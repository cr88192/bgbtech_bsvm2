{
  tag: #psblock,
  value: [
    {
      tag: #func,
      name: #clock,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 1
    }, 
    {
      tag: #func,
      name: #rand,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 3
    }, 
    {
      tag: #func,
      name: #bsvm2_natfib,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 4,
      args: [{tag: #var, name: #x, type: {tag: #type, name: #int}}]
    }, 
    {
      tag: #func,
      name: #bsvm2_natsorttst,
      type: {tag: #type, name: #void},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 5,
      args: [{tag: #var, name: #n, type: {tag: #type, name: #int}}]
    }, 
    {
      tag: #func,
      name: #bsvm2_vm_printf,
      type: {tag: #type, name: #variant},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 6,
      args: [
        {tag: #var, name: #str, type: {tag: #type, name: #string}}, 
        {tag: #vararg, name: #va}]
    }, 
    {
      tag: #func,
      name: #printf,
      type: {tag: #type, name: #void},
      tokcnt: 9,
      fn: "bstest/fib.bs",
      ln: 9,
      args: [
        {tag: #var, name: #str, type: {tag: #type, name: #string}}, 
        {tag: #vararg, name: #va}],
      body: {
        tag: #call,
        fn: "bstest/fib.bs",
        ln: 11,
        args: [#str, #va],
        func: #bsvm2_vm_printf
      }
    }, 
    {
      tag: #func,
      name: #fn_noArgReturnsInt,
      type: {tag: #type, name: #int},
      modi: 16777216,
      tokcnt: 1,
      fn: "bstest/fib.bs",
      ln: 11
    }, 
    {
      tag: #class,
      name: #Exception,
      modi: 1,
      fn: "bstest/fib.bs",
      ln: 13,
      body: {
        tag: #psblock,
        value: [
          {
            tag: #var,
            name: #dummy,
            type: {tag: #type, name: #int},
            fn: "bstest/fib.bs",
            ln: 15
          }, 
          {
            tag: #func,
            name: #$CTOR$,
            modi: 1,
            tokcnt: 2,
            fn: "bstest/fib.bs",
            ln: 16,
            body: {tag: #empty_block}
          }]
      }
    }, 
    {
      tag: #package,
      name: #bstest,
      fn: "bstest/fib.bs",
      ln: 21,
      body: {
        tag: #psblock,
        value: [
          {
            tag: #struct,
            name: #Foo,
            modi: 1,
            fn: "bstest/fib.bs",
            ln: 23,
            body: {
              tag: #psblock,
              value: [
                {
                  tag: #vars,
                  fn: "bstest/fib.bs",
                  ln: 24,
                  value: [
                    {tag: #var, name: #x, type: {tag: #type, name: #int}}, 
                    {tag: #var, name: #y, type: {tag: #type, name: #int}}]
                }, 
                {
                  tag: #var,
                  name: #z,
                  type: {tag: #type, name: #double},
                  fn: "bstest/fib.bs",
                  ln: 25
                }]
            }
          }, 
          {
            tag: #class,
            name: #Foo2,
            modi: 1,
            fn: "bstest/fib.bs",
            ln: 27,
            body: {
              tag: #psblock,
              value: [
                {
                  tag: #vars,
                  fn: "bstest/fib.bs",
                  ln: 29,
                  value: [
                    {
                      tag: #var,
                      name: #x,
                      type: {tag: #type, name: #int},
                      modi: 1
                    }, 
                    {
                      tag: #var,
                      name: #y,
                      type: {tag: #type, name: #int},
                      modi: 1
                    }]
                }, 
                {
                  tag: #var,
                  name: #z,
                  type: {tag: #type, name: #double},
                  modi: 1,
                  fn: "bstest/fib.bs",
                  ln: 30
                }, 
                {
                  tag: #func,
                  name: #$CTOR$,
                  modi: 1,
                  tokcnt: 9,
                  fn: "bstest/fib.bs",
                  ln: 31,
                  args: [{tag: #var, name: #a, type: {tag: #type, name: #int}}],
                  body: {
                    tag: #call,
                    fn: "bstest/fib.bs",
                    ln: 34,
                    args: ["Foo2 Ctor %d\n", 4],
                    func: #printf
                  }
                }, 
                {
                  tag: #func,
                  name: #method0,
                  type: {tag: #type, name: #double},
                  modi: 1,
                  tokcnt: 11,
                  fn: "bstest/fib.bs",
                  ln: 36,
                  body: {
                    tag: #return,
                    fn: "bstest/fib.bs",
                    ln: 39,
                    value: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"+", lhs: #x, rhs: #y},
                      rhs: #z
                    }
                  }
                }]
            }
          }, 
          {
            tag: #vars,
            fn: "bstest/fib.bs",
            ln: 42,
            value: [
              {
                tag: #var,
                name: #i,
                type: {tag: #type, name: #int},
                modi: 2
              }, 
              {
                tag: #var,
                name: #j,
                type: {tag: #type, name: #int},
                modi: 2
              }]
          }, 
          {
            tag: #var,
            name: #arr,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 2,
            fn: "bstest/fib.bs",
            ln: 44
          }, 
          {
            tag: #var,
            name: #arr2,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 256}},
            modi: 2,
            fn: "bstest/fib.bs",
            ln: 45
          }, 
          {
            tag: #func,
            name: #fib,
            type: {tag: #type, name: #int},
            modi: 1,
            tokcnt: 30,
            fn: "bstest/fib.bs",
            ln: 46,
            args: [{tag: #var, name: #x, type: {tag: #type, name: #int}}],
            body: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/fib.bs",
                  ln: 49,
                  cond: {tag: #bincmp, op: #"<", lhs: #x, rhs: 2},
                  then: {tag: #return, value: 1}
                }, 
                {
                  tag: #return,
                  fn: "bstest/fib.bs",
                  ln: 50,
                  value: {
                    tag: #binary,
                    op: #"+",
                    lhs: {
                      tag: #call,
                      args: {tag: #binary, op: #"-", lhs: #x, rhs: 1},
                      func: #fib
                    },
                    rhs: {
                      tag: #call,
                      args: {tag: #binary, op: #"-", lhs: #x, rhs: 2},
                      func: #fib
                    }
                  }
                }]
            }
          }, 
          {
            tag: #func,
            name: #selsort,
            type: {tag: #type, name: #int},
            modi: 1,
            tokcnt: 89,
            fn: "bstest/fib.bs",
            ln: 52,
            args: [
              {
                tag: #var,
                name: #arr,
                type: {tag: #type, name: #int, arrays: {tag: #arrdef0}}
              }, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}],
            body: {
              tag: #block,
              value: [
                {
                  tag: #var,
                  name: #arr1,
                  type: {tag: #type, name: #int, ptrlvl: 1},
                  fn: "bstest/fib.bs",
                  ln: 55
                }, 
                {
                  tag: #vars,
                  fn: "bstest/fib.bs",
                  ln: 56,
                  value: [
                    {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
                    {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
                    {tag: #var, name: #k, type: {tag: #type, name: #int}}]
                }, 
                {
                  tag: #assign,
                  lhs: #arr1,
                  rhs: {
                    tag: #prefix_cast,
                    lhs: #arr,
                    rhs: {tag: #type, name: #int, ptrlvl: 1}
                  },
                  fn: "bstest/fib.bs",
                  ln: 57
                }, 
                {
                  tag: #for,
                  fn: "bstest/fib.bs",
                  ln: 59,
                  cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #n},
                  then: {
                    tag: #for,
                    cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: #n},
                    then: {
                      tag: #if,
                      fn: "bstest/fib.bs",
                      ln: 62,
                      cond: {
                        tag: #bincmp,
                        op: #"<",
                        lhs: {tag: #loadindex, lhs: #arr1, rhs: #j},
                        rhs: {tag: #loadindex, lhs: #arr1, rhs: #i}
                      },
                      then: {
                        tag: #block,
                        value: [
                          {
                            tag: #assign,
                            lhs: #k,
                            rhs: {tag: #loadindex, lhs: #arr1, rhs: #i},
                            fn: "bstest/fib.bs",
                            ln: 64
                          }, 
                          {
                            tag: #assign,
                            lhs: {tag: #loadindex, lhs: #arr1, rhs: #i},
                            rhs: {tag: #loadindex, lhs: #arr1, rhs: #j},
                            fn: "bstest/fib.bs",
                            ln: 65
                          }, 
                          {
                            tag: #assign,
                            lhs: {tag: #loadindex, lhs: #arr1, rhs: #j},
                            rhs: #k,
                            fn: "bstest/fib.bs",
                            ln: 66
                          }]
                      }
                    },
                    init: {
                      tag: #assign,
                      lhs: #j,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    step: {tag: #postinc, value: #j}
                  },
                  init: {tag: #assign, lhs: #i, rhs: 0},
                  step: {tag: #postinc, value: #i}
                }]
            }
          }, 
          {
            tag: #func,
            name: #sorttst,
            type: {tag: #type, name: #void},
            modi: 1,
            tokcnt: 47,
            fn: "bstest/fib.bs",
            ln: 70,
            args: [{tag: #var, name: #n, type: {tag: #type, name: #int}}],
            body: {
              tag: #block,
              value: [
                {
                  tag: #var,
                  name: #arr,
                  type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
                  fn: "bstest/fib.bs",
                  ln: 73
                }, 
                {
                  tag: #var,
                  name: #i,
                  type: {tag: #type, name: #int},
                  fn: "bstest/fib.bs",
                  ln: 74
                }, 
                {
                  tag: #assign,
                  lhs: #arr,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: #n}
                    }
                  },
                  fn: "bstest/fib.bs",
                  ln: 75
                }, 
                {
                  tag: #for,
                  fn: "bstest/fib.bs",
                  ln: 77,
                  cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #n},
                  then: {
                    tag: #assign,
                    lhs: {tag: #loadindex, lhs: #arr, rhs: #i},
                    rhs: {tag: #call, args: undefined, func: #rand}
                  },
                  init: {tag: #assign, lhs: #i, rhs: 0},
                  step: {tag: #postinc, value: #i}
                }, 
                {
                  tag: #call,
                  fn: "bstest/fib.bs",
                  ln: 80,
                  args: [#arr, #n],
                  func: #selsort
                }]
            }
          }, 
          {
            tag: #class,
            name: #Fib,
            modi: 1,
            fn: "bstest/fib.bs",
            ln: 82,
            body: {
              tag: #psblock,
              value: [
                {
                  tag: #var,
                  name: #foo,
                  type: {tag: #type, name: #Foo},
                  fn: "bstest/fib.bs",
                  ln: 122
                }, 
                {
                  tag: #func,
                  name: #$CTOR$,
                  modi: 1,
                  tokcnt: 26,
                  fn: "bstest/fib.bs",
                  ln: 123,
                  args: [
                    {tag: #var, name: #x, type: {tag: #type, name: #int}}, 
                    {tag: #var, name: #y, type: {tag: #type, name: #int}}],
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #foo, rhs: #x},
                        rhs: #x,
                        fn: "bstest/fib.bs",
                        ln: 126
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #foo, rhs: #y},
                        rhs: #y,
                        fn: "bstest/fib.bs",
                        ln: 127
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #foo, rhs: #z},
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: {tag: #loadslot, lhs: #foo, rhs: #x},
                          rhs: {tag: #loadslot, lhs: #foo, rhs: #y}
                        },
                        fn: "bstest/fib.bs",
                        ln: 128
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_switch,
                  type: {tag: #type, name: #int},
                  modi: 9,
                  tokcnt: 133,
                  fn: "bstest/fib.bs",
                  ln: 130,
                  args: [{tag: #var, name: #i, type: {tag: #type, name: #int}}],
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #var,
                        name: #j,
                        type: {tag: #type, name: #int},
                        fn: "bstest/fib.bs",
                        ln: 133
                      }, 
                      {
                        tag: #switch,
                        fn: "bstest/fib.bs",
                        ln: 134,
                        cond: #i,
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 136,
                              value: 0
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 1,
                              fn: "bstest/fib.bs",
                              ln: 137
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 137,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 137,
                              value: 1
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 4,
                              fn: "bstest/fib.bs",
                              ln: 138
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 138,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 138,
                              value: 2
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 9,
                              fn: "bstest/fib.bs",
                              ln: 139
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 139,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 139,
                              value: 3
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 16,
                              fn: "bstest/fib.bs",
                              ln: 140
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 140,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 140,
                              value: 4
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 25,
                              fn: "bstest/fib.bs",
                              ln: 141
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 141,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 141,
                              value: 5
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 36,
                              fn: "bstest/fib.bs",
                              ln: 142
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 142,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 142,
                              value: 6
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 49,
                              fn: "bstest/fib.bs",
                              ln: 143
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 143,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 143,
                              value: 7
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 64,
                              fn: "bstest/fib.bs",
                              ln: 144
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 144,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 144,
                              value: 8
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 81,
                              fn: "bstest/fib.bs",
                              ln: 145
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 145,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 145,
                              value: 9
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 100,
                              fn: "bstest/fib.bs",
                              ln: 146
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 146,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 146,
                              value: 10
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 121,
                              fn: "bstest/fib.bs",
                              ln: 147
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 147,
                              value: 1
                            }, 
                            {
                              tag: #case,
                              fn: "bstest/fib.bs",
                              ln: 147,
                              value: 11
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: 144,
                              fn: "bstest/fib.bs",
                              ln: 148
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 148,
                              value: 1
                            }, 
                            {
                              tag: #case_default,
                              fn: "bstest/fib.bs",
                              ln: 148
                            }, 
                            {
                              tag: #assign,
                              lhs: #j,
                              rhs: -1,
                              fn: "bstest/fib.bs",
                              ln: 150
                            }, 
                            {
                              tag: #break,
                              fn: "bstest/fib.bs",
                              ln: 150,
                              value: 1
                            }]
                        }
                      }, 
                      {
                        tag: #return,
                        fn: "bstest/fib.bs",
                        ln: 151,
                        value: #j
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_ref,
                  type: {tag: #type, name: #int},
                  modi: 9,
                  tokcnt: 13,
                  fn: "bstest/fib.bs",
                  ln: 153,
                  args: [
                    {
                      tag: #var,
                      name: #i,
                      type: {tag: #type, name: #int, reflvl: 1}
                    }, 
                    {
                      tag: #var,
                      name: #j,
                      type: {tag: #type, name: #int, reflvl: 1}
                    }],
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: #j},
                        fn: "bstest/fib.bs",
                        ln: 156
                      }, 
                      {
                        tag: #return,
                        fn: "bstest/fib.bs",
                        ln: 157,
                        value: #j
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_func,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 49,
                  fn: "bstest/fib.bs",
                  ln: 159,
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #var,
                        name: #fn,
                        type: {tag: #type, name: #fn_noArgReturnsInt},
                        fn: "bstest/fib.bs",
                        ln: 162
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 164,
                        value: [
                          {
                            tag: #var,
                            name: #x,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #y,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #z,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #assign,
                        lhs: #x,
                        rhs: 2,
                        fn: "bstest/fib.bs",
                        ln: 165
                      }, 
                      {
                        tag: #assign,
                        lhs: #y,
                        rhs: 3,
                        fn: "bstest/fib.bs",
                        ln: 167
                      }, 
                      {
                        tag: #assign,
                        lhs: #fn,
                        rhs: {
                          tag: #func_dfl,
                          name: #$GS$3AF758F2_0001,
                          type: {tag: #type, name: #int},
                          tokcnt: 5,
                          body: {
                            tag: #tail,
                            fn: "bstest/fib.bs",
                            ln: 169,
                            value: {tag: #binary, op: #"+", lhs: #x, rhs: #y}
                          }
                        },
                        fn: "bstest/fib.bs",
                        ln: 167
                      }, 
                      {
                        tag: #assign,
                        lhs: #z,
                        rhs: {tag: #call, args: undefined, func: #fn},
                        fn: "bstest/fib.bs",
                        ln: 169
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 170,
                        args: ["tst_func: %d %d %d\n", #x, #y, #z],
                        func: #printf
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_func2,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 50,
                  fn: "bstest/fib.bs",
                  ln: 172,
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #var,
                        name: #fn,
                        type: {tag: #type, name: #fn_noArgReturnsInt},
                        fn: "bstest/fib.bs",
                        ln: 175
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 177,
                        value: [
                          {
                            tag: #var,
                            name: #x,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #y,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #z,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #assign,
                        lhs: #x,
                        rhs: 3,
                        fn: "bstest/fib.bs",
                        ln: 178
                      }, 
                      {
                        tag: #assign,
                        lhs: #y,
                        rhs: 4,
                        fn: "bstest/fib.bs",
                        ln: 180
                      }, 
                      {
                        tag: #assign,
                        lhs: #fn,
                        rhs: {
                          tag: #func_aut,
                          name: #$GS$3AF758F2_0002,
                          type: {tag: #type, name: #int},
                          tokcnt: 5,
                          body: {
                            tag: #tail,
                            fn: "bstest/fib.bs",
                            ln: 182,
                            value: {tag: #binary, op: #"+", lhs: #x, rhs: #y}
                          }
                        },
                        fn: "bstest/fib.bs",
                        ln: 180
                      }, 
                      {
                        tag: #assign,
                        lhs: #z,
                        rhs: {tag: #call, args: undefined, func: #fn},
                        fn: "bstest/fib.bs",
                        ln: 182
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 183,
                        args: ["tst_func2: %d %d %d\n", #x, #y, #z],
                        func: #printf
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_tryex2,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 8,
                  fn: "bstest/fib.bs",
                  ln: 185,
                  body: {
                    tag: #throw,
                    fn: "bstest/fib.bs",
                    ln: 188,
                    value: {
                      tag: #new,
                      type: {tag: #type, name: #Exception},
                      args: __unknown_4
                    }
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_tryex,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 39,
                  fn: "bstest/fib.bs",
                  ln: 190,
                  body: {
                    tag: #finally,
                    lhs: {
                      tag: #catch,
                      lhs: {
                        tag: #try,
                        body: {
                          tag: #block,
                          value: [
                            {
                              tag: #call,
                              fn: "bstest/fib.bs",
                              ln: 194,
                              args: "try 1\n",
                              func: #printf
                            }, 
                            {
                              tag: #call,
                              fn: "bstest/fib.bs",
                              ln: 195,
                              args: undefined,
                              func: #tst_tryex2
                            }, 
                            {
                              tag: #call,
                              fn: "bstest/fib.bs",
                              ln: 196,
                              args: "try 2\n",
                              func: #printf
                            }]
                        }
                      },
                      rhs: {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 199,
                        args: "catch\n",
                        func: #printf
                      },
                      cond: {
                        tag: #var,
                        name: #ex,
                        type: {tag: #type, name: #Exception}
                      }
                    },
                    rhs: {
                      tag: #call,
                      fn: "bstest/fib.bs",
                      ln: 202,
                      args: "finally\n",
                      func: #printf
                    },
                    fn: "bstest/fib.bs",
                    ln: 193
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_letlec,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 32,
                  fn: "bstest/fib.bs",
                  ln: 205,
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 208,
                        args: "letlec A\n",
                        func: #printf
                      }, 
                      {
                        tag: #let_escape,
                        fn: "bstest/fib.bs",
                        ln: 209,
                        cond: {
                          tag: #var,
                          name: #ex,
                          type: {tag: #type, name: #variant}
                        },
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #call,
                              fn: "bstest/fib.bs",
                              ln: 211,
                              args: "letlec B\n",
                              func: #printf
                            }, 
                            {
                              tag: #throw,
                              fn: "bstest/fib.bs",
                              ln: 212,
                              value: #ex
                            }, 
                            {
                              tag: #call,
                              fn: "bstest/fib.bs",
                              ln: 213,
                              args: "letlec C\n",
                              func: #printf
                            }]
                        }
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 215,
                        args: "letlec D\n",
                        func: #printf
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #tst_decjpg,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 174,
                  fn: "bstest/fib.bs",
                  ln: 217,
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #var,
                        name: #ctx,
                        type: {tag: #type, name: #PDJPG_Context},
                        fn: "bstest/fib.bs",
                        ln: 220
                      }, 
                      {
                        tag: #var,
                        name: #rgba,
                        type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
                        fn: "bstest/fib.bs",
                        ln: 221
                      }, 
                      {
                        tag: #var,
                        name: #buf,
                        type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
                        fn: "bstest/fib.bs",
                        ln: 222
                      }, 
                      {
                        tag: #var,
                        name: #cs,
                        type: {tag: #type, name: #byte, ptrlvl: 1},
                        fn: "bstest/fib.bs",
                        ln: 223
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 224,
                        value: [
                          {
                            tag: #var,
                            name: #t0,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #t1,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #t2,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 225,
                        value: [
                          {
                            tag: #var,
                            name: #sz,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #xs,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #ys,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 226,
                        value: [
                          {
                            tag: #var,
                            name: #i,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #j,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #k,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #n,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 227,
                        args: [
                          "ATst %d\n", 
                          {tag: #loadindex, lhs: #pdjpg_zigzag2, rhs: 23}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #buf,
                        rhs: {
                          tag: #call,
                          args: ["NanoITX_4_1.jpg", #sz],
                          func: #readfile
                        },
                        fn: "bstest/fib.bs",
                        ln: 229
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 231,
                        args: [
                          "JP: %02X %02X sz=%d\n", 
                          {tag: #loadindex, lhs: #buf, rhs: 0}, 
                          {tag: #loadindex, lhs: #buf, rhs: 1}, #sz],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #ctx,
                        rhs: {
                          tag: #call,
                          args: undefined,
                          func: #PDJPG_AllocContext
                        },
                        fn: "bstest/fib.bs",
                        ln: 232
                      }, 
                      {
                        tag: #assign,
                        lhs: #cs,
                        rhs: #buf,
                        fn: "bstest/fib.bs",
                        ln: 234
                      }, 
                      {
                        tag: #postinc,
                        fn: "bstest/fib.bs",
                        ln: 236,
                        value: #cs
                      }, 
                      {
                        tag: #assign,
                        lhs: #t0,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 237
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 239,
                        args: [
                          #ctx, #buf, #sz, 
                          {tag: #unary, op: #"&", value: #xs}, 
                          {tag: #unary, op: #"&", value: #ys}],
                        func: #PDJPG_DecodeBasic
                      }, 
                      {
                        tag: #assign,
                        lhs: #t1,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 240
                      }, 
                      {
                        tag: #assign,
                        lhs: #t2,
                        rhs: {tag: #binary, op: #"-", lhs: #t1, rhs: #t0},
                        fn: "bstest/fib.bs",
                        ln: 241
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 243,
                        args: ["DecJPG %d\n", #t2],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 244,
                        args: ["Image Dec %d x %d\n", #xs, #ys],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #rgba,
                        rhs: {
                          tag: #new,
                          type: {
                            tag: #type,
                            name: #byte,
                            arrays: {
                              tag: #arrdef,
                              value: {
                                tag: #binary,
                                op: #"*",
                                lhs: {
                                  tag: #binary,
                                  op: #"*",
                                  lhs: #xs,
                                  rhs: #ys
                                },
                                rhs: 4
                              }
                            }
                          }
                        },
                        fn: "bstest/fib.bs",
                        ln: 246
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 248,
                        args: [#ctx, #rgba, #xs, #ys],
                        func: #PDJPG_GetImageRGBA
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 249,
                        args: ["fibtst0.tga", #rgba, #xs, #ys],
                        func: #PDJPG_StoreTGA
                      }]
                  }
                }, 
                {
                  tag: #func,
                  name: #main,
                  type: {tag: #type, name: #void},
                  modi: 9,
                  tokcnt: 557,
                  fn: "bstest/fib.bs",
                  ln: 263,
                  args: [
                    {
                      tag: #var,
                      name: #argv,
                      type: {tag: #type, name: #string, arrays: {tag: #arrdef0}}
                    }],
                  body: {
                    tag: #block,
                    value: [
                      {
                        tag: #var,
                        name: #fstr,
                        type: {tag: #type, name: #Foo},
                        fn: "bstest/fib.bs",
                        ln: 266
                      }, 
                      {
                        tag: #var,
                        name: #tfib,
                        type: {tag: #type, name: #Fib},
                        fn: "bstest/fib.bs",
                        ln: 267
                      }, 
                      {
                        tag: #var,
                        name: #fobj,
                        type: {tag: #type, name: #Foo2},
                        fn: "bstest/fib.bs",
                        ln: 268
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 269,
                        value: [
                          {
                            tag: #var,
                            name: #v0,
                            type: {tag: #type, name: #vec2f}
                          }, 
                          {
                            tag: #var,
                            name: #v1,
                            type: {tag: #type, name: #vec2f}
                          }, 
                          {
                            tag: #var,
                            name: #v2,
                            type: {tag: #type, name: #vec2f}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 270,
                        value: [
                          {
                            tag: #var,
                            name: #w0,
                            type: {tag: #type, name: #vec3f}
                          }, 
                          {
                            tag: #var,
                            name: #w1,
                            type: {tag: #type, name: #vec3f}
                          }, 
                          {
                            tag: #var,
                            name: #w2,
                            type: {tag: #type, name: #vec3f}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 271,
                        value: [
                          {
                            tag: #var,
                            name: #u0,
                            type: {tag: #type, name: #uint}
                          }, 
                          {
                            tag: #var,
                            name: #u1,
                            type: {tag: #type, name: #uint}
                          }, 
                          {
                            tag: #var,
                            name: #u2,
                            type: {tag: #type, name: #uint}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 272,
                        value: [
                          {
                            tag: #var,
                            name: #a1,
                            type: {
                              tag: #type,
                              name: #int,
                              arrays: {tag: #arrdef0}
                            }
                          }, 
                          {
                            tag: #var,
                            name: #a2,
                            type: {
                              tag: #type,
                              name: #int,
                              arrays: {tag: #arrdef0}
                            }
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 273,
                        value: [
                          {
                            tag: #var,
                            name: #p1,
                            type: {tag: #type, name: #int, ptrlvl: 1}
                          }, 
                          {
                            tag: #var,
                            name: #p2,
                            type: {tag: #type, name: #int, ptrlvl: 1}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 274,
                        value: [
                          {
                            tag: #var,
                            name: #i,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #j,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #vars,
                        fn: "bstest/fib.bs",
                        ln: 275,
                        value: [
                          {
                            tag: #var,
                            name: #t0,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #t1,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #t2,
                            type: {tag: #type, name: #int}
                          }, 
                          {
                            tag: #var,
                            name: #sz,
                            type: {tag: #type, name: #int}
                          }]
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 276,
                        args: ["%f\n", 3.14159000000000077079675975255668],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: 8,
                        fn: "bstest/fib.bs",
                        ln: 278
                      }, 
                      {
                        tag: #assign,
                        lhs: #u0,
                        rhs: 3737841664,
                        fn: "bstest/fib.bs",
                        ln: 280
                      }, 
                      {
                        tag: #assign,
                        lhs: #u1,
                        rhs: {tag: #binary, op: #">>", lhs: #u0, rhs: 8},
                        fn: "bstest/fib.bs",
                        ln: 282
                      }, 
                      {
                        tag: #assign,
                        lhs: #u2,
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {tag: #binary, op: #"<<", lhs: #u0, rhs: #i},
                          rhs: #u1
                        },
                        fn: "bstest/fib.bs",
                        ln: 283
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #binary,
                          op: #"&",
                          lhs: {tag: #binary, op: #">>", lhs: #u2, rhs: 8},
                          rhs: 15
                        },
                        fn: "bstest/fib.bs",
                        ln: 286
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 287,
                        args: ["%08X %08X %08X %d\n", #u0, #u1, #u2, #j],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: -1,
                        fn: "bstest/fib.bs",
                        ln: 288
                      }, 
                      {
                        tag: #ifelse,
                        fn: "bstest/fib.bs",
                        ln: 290,
                        cond: {tag: #bincmp, op: #"<=", lhs: #j, rhs: 0},
                        then: {
                          tag: #call,
                          fn: "bstest/fib.bs",
                          ln: 292,
                          args: "T\n",
                          func: #printf
                        },
                        else: {
                          tag: #call,
                          fn: "bstest/fib.bs",
                          ln: 294,
                          args: "F\n",
                          func: #printf
                        }
                      }, 
                      {
                        tag: #assign,
                        lhs: #t0,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 294
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 296,
                        args: ["BS Fib %d\n", {tag: #call, args: 38, func: #fib}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #t1,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 298
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 299,
                        args: [
                          "BS Dt %d\n", 
                          {tag: #binary, op: #"-", lhs: #t1, rhs: #t0}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #t0,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 300
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 302,
                        args: [
                          "Na Fib %d\n", 
                          {tag: #call, args: 38, func: #bsvm2_natfib}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #t1,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 304
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 305,
                        args: [
                          "Na Dt %d\n", 
                          {tag: #binary, op: #"-", lhs: #t1, rhs: #t0}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #t0,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 306
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 309,
                        args: {tag: #binary, op: #"<<", lhs: 1, rhs: 13},
                        func: #sorttst
                      }, 
                      {
                        tag: #assign,
                        lhs: #t1,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 311
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 313,
                        args: [
                          "Bs SortTst Dt %d\n", 
                          {tag: #binary, op: #"-", lhs: #t1, rhs: #t0}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #t0,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 314
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 316,
                        args: {tag: #binary, op: #"<<", lhs: 1, rhs: 13},
                        func: #bsvm2_natsorttst
                      }, 
                      {
                        tag: #assign,
                        lhs: #t1,
                        rhs: {tag: #call, args: undefined, func: #clock},
                        fn: "bstest/fib.bs",
                        ln: 318
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 320,
                        args: [
                          "Na SortTst Dt %d\n", 
                          {tag: #binary, op: #"-", lhs: #t1, rhs: #t0}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #fobj,
                        rhs: {
                          tag: #new,
                          type: {tag: #type, name: #Foo2},
                          args: 1
                        },
                        fn: "bstest/fib.bs",
                        ln: 321
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #fobj, rhs: #x},
                        rhs: 3,
                        fn: "bstest/fib.bs",
                        ln: 325
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #fobj, rhs: #y},
                        rhs: 4,
                        fn: "bstest/fib.bs",
                        ln: 326
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #fobj, rhs: #z},
                        rhs: 5,
                        fn: "bstest/fib.bs",
                        ln: 327
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 328,
                        args: "FObj ",
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 330,
                        args: ["%d ", {tag: #loadslot, lhs: #fobj, rhs: #x}],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 331,
                        args: ["%d ", {tag: #loadslot, lhs: #fobj, rhs: #y}],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 332,
                        args: ["%f\n", {tag: #loadslot, lhs: #fobj, rhs: #z}],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 333,
                        args: [
                          "FObj Method %f\n", 
                          {
                            tag: #call,
                            args: undefined,
                            func: {tag: #loadslot, lhs: #fobj, rhs: #method0}
                          }],
                        func: #printf
                      }, 
                      {
                        tag: #delete,
                        fn: "bstest/fib.bs",
                        ln: 335,
                        value: #fobj
                      }, 
                      {
                        tag: #assign,
                        lhs: #v0,
                        rhs: {tag: #vector, value: [2, 3]},
                        fn: "bstest/fib.bs",
                        ln: 337
                      }, 
                      {
                        tag: #assign,
                        lhs: #v1,
                        rhs: {tag: #vector, value: [4, 5]},
                        fn: "bstest/fib.bs",
                        ln: 339
                      }, 
                      {
                        tag: #assign,
                        lhs: #v2,
                        rhs: {tag: #binary, op: #"+", lhs: #v0, rhs: #v1},
                        fn: "bstest/fib.bs",
                        ln: 340
                      }, 
                      {
                        tag: #assign,
                        lhs: #w0,
                        rhs: {tag: #vector, value: [1, 0, 0]},
                        fn: "bstest/fib.bs",
                        ln: 341
                      }, 
                      {
                        tag: #assign,
                        lhs: #w1,
                        rhs: {tag: #vector, value: [0, 1, 0]},
                        fn: "bstest/fib.bs",
                        ln: 343
                      }, 
                      {
                        tag: #assign,
                        lhs: #w2,
                        rhs: {tag: #binary, op: #"%", lhs: #w0, rhs: #w1},
                        fn: "bstest/fib.bs",
                        ln: 344
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 345,
                        args: [
                          "w2=(%f %f %f)\n", 
                          {tag: #loadslot, lhs: #w2, rhs: #x}, 
                          {tag: #loadslot, lhs: #w2, rhs: #y}, 
                          {tag: #loadslot, lhs: #w2, rhs: #z}],
                        func: #printf
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/fib.bs",
                        ln: 347,
                        cond: {tag: #binary, op: #"&&", lhs: #i, rhs: #j},
                        then: {
                          tag: #call,
                          fn: "bstest/fib.bs",
                          ln: 350,
                          args: "T\n",
                          func: #printf
                        }
                      }, 
                      {
                        tag: #assign,
                        lhs: #a1,
                        rhs: {
                          tag: #new,
                          type: {
                            tag: #type,
                            name: #int,
                            arrays: {tag: #arrdef, value: 64}
                          }
                        },
                        fn: "bstest/fib.bs",
                        ln: 352
                      }, 
                      {
                        tag: #assign,
                        lhs: #a2,
                        rhs: {tag: #binary, op: #"+", lhs: #a1, rhs: 32},
                        fn: "bstest/fib.bs",
                        ln: 356
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #a2, rhs: 0},
                        rhs: 69,
                        fn: "bstest/fib.bs",
                        ln: 357
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 359,
                        args: ["Oat %d\n", {tag: #loadindex, lhs: #a1, rhs: 32}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #p1,
                        rhs: #a1,
                        fn: "bstest/fib.bs",
                        ln: 360
                      }, 
                      {
                        tag: #assign,
                        lhs: #p2,
                        rhs: {tag: #binary, op: #"+", lhs: #p1, rhs: 32},
                        fn: "bstest/fib.bs",
                        ln: 361
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 362,
                        args: ["Opt %d\n", {tag: #unary, op: #"*", value: #p2}],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: {tag: #binary, op: #"-", lhs: #p2, rhs: #p1},
                        fn: "bstest/fib.bs",
                        ln: 363
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 365,
                        args: ["Dptr %d\n", #i],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: 3,
                        fn: "bstest/fib.bs",
                        ln: 366
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: 4,
                        fn: "bstest/fib.bs",
                        ln: 374
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 374,
                        args: ["RtA i=%d, j=%d\n", #i, #j],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 376,
                        args: [#i, #j],
                        func: #tst_ref
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 377,
                        args: ["RtB i=%d, j=%d\n", #i, #j],
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {tag: #call, args: #i, func: #tst_switch},
                        fn: "bstest/fib.bs",
                        ln: 378
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 380,
                        args: ["St i=%d, j=%d\n", #i, #j],
                        func: #printf
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #i,
                        rhs: 2,
                        fn: "bstest/fib.bs",
                        ln: 381
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {tag: #binary, op: #"*", lhs: #i, rhs: #j},
                        fn: "bstest/fib.bs",
                        ln: 383
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 384,
                        args: ["St2 i=%d, j=%d\n", #i, #j],
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 385,
                        args: undefined,
                        func: #tst_func
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 387,
                        args: undefined,
                        func: #tst_func2
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 388,
                        args: undefined,
                        func: #tst_letlec
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 390,
                        args: undefined,
                        func: #tst_tryex
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/fib.bs",
                        ln: 392,
                        args: undefined,
                        func: #tst_decjpg
                      }]
                  }
                }]
            }
          }]
      }
    }]
}{
  tag: #psblock,
  value: [
    {
      tag: #func,
      name: #fopen,
      type: {tag: #type, name: #void, ptrlvl: 1},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 1,
      args: [
        {tag: #var, name: #path, type: {tag: #type, name: #cstring}}, 
        {tag: #var, name: #mode, type: {tag: #type, name: #cstring}}]
    }, 
    {
      tag: #func,
      name: #fclose,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 2,
      args: [{tag: #var, name: #fd, type: {tag: #type, name: #void, ptrlvl: 1}}]
    }, 
    {
      tag: #func,
      name: #fread,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 3,
      args: [
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #n1, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #n2, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #fd, type: {tag: #type, name: #void, ptrlvl: 1}}]
    }, 
    {
      tag: #func,
      name: #fwrite,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 4,
      args: [
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #n1, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #n2, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #fd, type: {tag: #type, name: #void, ptrlvl: 1}}]
    }, 
    {
      tag: #func,
      name: #fseek,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 5,
      args: [
        {tag: #var, name: #fd, type: {tag: #type, name: #void, ptrlvl: 1}}, 
        {tag: #var, name: #pos, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #rel, type: {tag: #type, name: #int}}]
    }, 
    {
      tag: #func,
      name: #ftell,
      type: {tag: #type, name: #int},
      modi: 32,
      tokcnt: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 6,
      args: [{tag: #var, name: #fd, type: {tag: #type, name: #void, ptrlvl: 1}}]
    }, 
    {
      tag: #func,
      name: #readfile,
      type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
      modi: 1,
      tokcnt: 91,
      fn: "bstest/bs_decjpg.bs",
      ln: 7,
      args: [
        {tag: #var, name: #path, type: {tag: #type, name: #string}}, 
        {tag: #var, name: #rsz, type: {tag: #type, name: #int, reflvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #buf,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            fn: "bstest/bs_decjpg.bs",
            ln: 10
          }, 
          {
            tag: #var,
            name: #fd,
            type: {tag: #type, name: #void, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 11
          }, 
          {
            tag: #var,
            name: #sz,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 12
          }, 
          {
            tag: #assign,
            lhs: #fd,
            rhs: {tag: #call, args: [#path, "rb"], func: #fopen},
            fn: "bstest/bs_decjpg.bs",
            ln: 13
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 15,
            cond: {tag: #unary, op: #"!", value: #fd},
            then: {tag: #return, value: #null}
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 17,
            args: [#fd, 0, 2],
            func: #fseek
          }, 
          {
            tag: #assign,
            lhs: #sz,
            rhs: {tag: #call, args: #fd, func: #ftell},
            fn: "bstest/bs_decjpg.bs",
            ln: 19
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 20,
            args: [#fd, 0, 0],
            func: #fseek
          }, 
          {
            tag: #assign,
            lhs: #buf,
            rhs: {
              tag: #new,
              type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: #sz}}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 21
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 22,
            args: [#buf, 1, #sz, #fd],
            func: #fread
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 23,
            args: #fd,
            func: #fclose
          }, 
          {
            tag: #assign,
            lhs: #rsz,
            rhs: #sz,
            fn: "bstest/bs_decjpg.bs",
            ln: 24
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 26, value: #buf}]
      }
    }, 
    {
      tag: #var,
      name: #DCTSZ,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 28,
      init: 8
    }, 
    {
      tag: #var,
      name: #DCTSZ2,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 30,
      init: 64
    }, 
    {
      tag: #var,
      name: #JPG_SOF0,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 31,
      init: 192
    }, 
    {
      tag: #var,
      name: #JPG_SOF1,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 33,
      init: 193
    }, 
    {
      tag: #var,
      name: #JPG_SOF2,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 34,
      init: 194
    }, 
    {
      tag: #var,
      name: #JPG_SOF3,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 35,
      init: 195
    }, 
    {
      tag: #var,
      name: #JPG_DHT,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 36,
      init: 196
    }, 
    {
      tag: #var,
      name: #JPG_SOF5,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 37,
      init: 197
    }, 
    {
      tag: #var,
      name: #JPG_SOF6,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 38,
      init: 198
    }, 
    {
      tag: #var,
      name: #JPG_SOF7,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 39,
      init: 199
    }, 
    {
      tag: #var,
      name: #JPG_JPG,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 40,
      init: 200
    }, 
    {
      tag: #var,
      name: #JPG_SOF9,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 41,
      init: 201
    }, 
    {
      tag: #var,
      name: #JPG_SOF10,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 42,
      init: 202
    }, 
    {
      tag: #var,
      name: #JPG_SOF11,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 43,
      init: 203
    }, 
    {
      tag: #var,
      name: #JPG_DAC,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 44,
      init: 204
    }, 
    {
      tag: #var,
      name: #JPG_SOF13,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 45,
      init: 205
    }, 
    {
      tag: #var,
      name: #JPG_SOF14,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 46,
      init: 206
    }, 
    {
      tag: #var,
      name: #JPG_SOF15,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 47,
      init: 207
    }, 
    {
      tag: #var,
      name: #JPG_RST0,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 48,
      init: 208
    }, 
    {
      tag: #var,
      name: #JPG_RST1,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 50,
      init: 209
    }, 
    {
      tag: #var,
      name: #JPG_RST2,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 51,
      init: 210
    }, 
    {
      tag: #var,
      name: #JPG_RST3,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 52,
      init: 211
    }, 
    {
      tag: #var,
      name: #JPG_RST4,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 53,
      init: 212
    }, 
    {
      tag: #var,
      name: #JPG_RST5,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 54,
      init: 213
    }, 
    {
      tag: #var,
      name: #JPG_RST6,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 55,
      init: 214
    }, 
    {
      tag: #var,
      name: #JPG_RST7,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 56,
      init: 215
    }, 
    {
      tag: #var,
      name: #JPG_SOI,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 57,
      init: 216
    }, 
    {
      tag: #var,
      name: #JPG_EOI,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 59,
      init: 217
    }, 
    {
      tag: #var,
      name: #JPG_SOS,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 60,
      init: 218
    }, 
    {
      tag: #var,
      name: #JPG_DQT,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 61,
      init: 219
    }, 
    {
      tag: #var,
      name: #JPG_DNL,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 62,
      init: 220
    }, 
    {
      tag: #var,
      name: #JPG_DRI,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 63,
      init: 221
    }, 
    {
      tag: #var,
      name: #JPG_DHP,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 64,
      init: 222
    }, 
    {
      tag: #var,
      name: #JPG_EXP,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 65,
      init: 223
    }, 
    {
      tag: #var,
      name: #JPG_APP0,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 66,
      init: 224
    }, 
    {
      tag: #var,
      name: #JPG_APP1,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 68,
      init: 225
    }, 
    {
      tag: #var,
      name: #JPG_APP2,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 69,
      init: 226
    }, 
    {
      tag: #var,
      name: #JPG_APP3,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 70,
      init: 227
    }, 
    {
      tag: #var,
      name: #JPG_APP4,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 71,
      init: 228
    }, 
    {
      tag: #var,
      name: #JPG_APP5,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 72,
      init: 229
    }, 
    {
      tag: #var,
      name: #JPG_APP6,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 73,
      init: 230
    }, 
    {
      tag: #var,
      name: #JPG_APP7,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 74,
      init: 231
    }, 
    {
      tag: #var,
      name: #JPG_APP8,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 75,
      init: 232
    }, 
    {
      tag: #var,
      name: #JPG_APP9,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 76,
      init: 233
    }, 
    {
      tag: #var,
      name: #JPG_APP10,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 77,
      init: 234
    }, 
    {
      tag: #var,
      name: #JPG_APP11,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 78,
      init: 235
    }, 
    {
      tag: #var,
      name: #JPG_APP12,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 79,
      init: 236
    }, 
    {
      tag: #var,
      name: #JPG_APP13,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 80,
      init: 237
    }, 
    {
      tag: #var,
      name: #JPG_APP14,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 81,
      init: 238
    }, 
    {
      tag: #var,
      name: #JPG_APP15,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 82,
      init: 239
    }, 
    {
      tag: #var,
      name: #JPG_JPG0,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 83,
      init: 240
    }, 
    {
      tag: #var,
      name: #JPG_JPG1,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 85,
      init: 241
    }, 
    {
      tag: #var,
      name: #JPG_JPG2,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 86,
      init: 242
    }, 
    {
      tag: #var,
      name: #JPG_JPG3,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 87,
      init: 243
    }, 
    {
      tag: #var,
      name: #JPG_JPG4,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 88,
      init: 244
    }, 
    {
      tag: #var,
      name: #JPG_JPG5,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 89,
      init: 245
    }, 
    {
      tag: #var,
      name: #JPG_JPG6,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 90,
      init: 246
    }, 
    {
      tag: #var,
      name: #JPG_JPG7,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 91,
      init: 247
    }, 
    {
      tag: #var,
      name: #JPG_JPG8,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 92,
      init: 248
    }, 
    {
      tag: #var,
      name: #JPG_JPG9,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 93,
      init: 249
    }, 
    {
      tag: #var,
      name: #JPG_JPG10,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 94,
      init: 250
    }, 
    {
      tag: #var,
      name: #JPG_JPG11,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 95,
      init: 251
    }, 
    {
      tag: #var,
      name: #JPG_JPG12,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 96,
      init: 252
    }, 
    {
      tag: #var,
      name: #JPG_JPG13,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 97,
      init: 253
    }, 
    {
      tag: #var,
      name: #JPG_COM,
      type: {tag: #type, name: #int},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 98,
      init: 254
    }, 
    {
      tag: #var,
      name: #pdjpg_marker,
      type: {tag: #type, name: #string, arrays: {tag: #arrdef0}},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 99,
      init: {
        tag: #array,
        value: [
          "SOF0", "SOF1", "SOF2", "SOF3", "DHT", "SOF5", "SOF6", "SOF7", 
          "JPG", "SOF9", "SOF10", "SOF11", "DAC", "SOF13", "SOF14", "SOF15", 
          "RST0", "RST1", "RST2", "RST3", "RST4", "RST5", "RST6", "RST7", 
          "SOI", "EOI", "SOS", "DQT", "DNL", "DRI", "DHP", "EXP", "APP0", 
          "APP1", "APP2", "APP3", "APP4", "APP5", "APP6", "APP7", "APP8", 
          "APP9", "APP10", "APP11", "APP12", "APP13", "APP14", "APP15", 
          "JPG0", "JPG1", "JPG2", "JPG3", "JPG4", "JPG5", "JPG6", "JPG7", 
          "JPG8", "JPG9", "JPG10", "JPG11", "JPG12", "JPG13", "COM", ""]
      }
    }, 
    {
      tag: #var,
      name: #pdjpg_zigzag,
      type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 110,
      init: {
        tag: #array,
        value: [
          0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 
          17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 
          39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 
          50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63]
      }
    }, 
    {
      tag: #var,
      name: #pdjpg_zigzag2,
      type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 64}},
      modi: 16,
      fn: "bstest/bs_decjpg.bs",
      ln: 121,
      init: {
        tag: #array,
        value: [
          0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 
          26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 
          56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 
          45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]
      }
    }, 
    {
      tag: #var,
      name: #u16,
      type: {tag: #type, name: #ushort},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 132
    }, 
    {
      tag: #var,
      name: #s16,
      type: {tag: #type, name: #short},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 134
    }, 
    {
      tag: #var,
      name: #u32,
      type: {tag: #type, name: #uint},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 135
    }, 
    {
      tag: #var,
      name: #s32,
      type: {tag: #type, name: #int},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 136
    }, 
    {
      tag: #var,
      name: #u64,
      type: {tag: #type, name: #ulong},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 137
    }, 
    {
      tag: #var,
      name: #u64,
      type: {tag: #type, name: #long},
      modi: 16777216,
      fn: "bstest/bs_decjpg.bs",
      ln: 138
    }, 
    {
      tag: #class,
      name: #PDJPG_Context,
      modi: 1,
      fn: "bstest/bs_decjpg.bs",
      ln: 139,
      body: {
        tag: #psblock,
        value: [
          {
            tag: #func,
            name: #$CTOR$,
            modi: 1,
            tokcnt: 175,
            fn: "bstest/bs_decjpg.bs",
            ln: 142,
            body: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #huff_code,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #u16,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 8, rhs: 256}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 144
                }, 
                {
                  tag: #assign,
                  lhs: #huff_mask,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #u16,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 8, rhs: 256}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 145
                }, 
                {
                  tag: #assign,
                  lhs: #huff_next,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #s16,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 8, rhs: 256}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 146
                }, 
                {
                  tag: #assign,
                  lhs: #huff_len,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 8, rhs: 256}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 147
                }, 
                {
                  tag: #assign,
                  lhs: #huff_idx,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #s16,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 8, rhs: 256}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 148
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_qt,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {
                        tag: #arrdef,
                        value: {tag: #binary, op: #"*", lhs: 4, rhs: 64}
                      }
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 149
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_cid,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 151
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_ch,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 153
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_cv,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 154
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_qid,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #byte,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 155
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_cxi,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 156
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_cyi,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 16}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 157
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_scid,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 158
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_scn,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 160
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_sibuf,
                  rhs: {
                    tag: #prefix_cast,
                    lhs: {
                      tag: #new,
                      type: {
                        tag: #type,
                        name: #variant,
                        arrays: {tag: #arrdef, value: 4}
                      }
                    },
                    rhs: {
                      tag: #type,
                      name: #byte,
                      arrays: [{tag: #arrdef0}, {tag: #arrdef0}]
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 161
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_schs,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 163
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_scvs,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 165
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_schsci,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 166
                }, 
                {
                  tag: #assign,
                  lhs: #jpg_scvsci,
                  rhs: {
                    tag: #new,
                    type: {
                      tag: #type,
                      name: #int,
                      arrays: {tag: #arrdef, value: 4}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 167
                }]
            }
          }, 
          {
            tag: #var,
            name: #huff_css,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 169
          }, 
          {
            tag: #var,
            name: #huff_cs,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 171
          }, 
          {
            tag: #var,
            name: #huff_ct,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 172
          }, 
          {
            tag: #var,
            name: #huff_win,
            type: {tag: #type, name: #uint},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 173
          }, 
          {
            tag: #var,
            name: #huff_pos,
            type: {tag: #type, name: #int},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 174
          }, 
          {
            tag: #var,
            name: #huff_isend,
            type: {tag: #type, name: #int},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 175
          }, 
          {
            tag: #var,
            name: #huff_code,
            type: {tag: #type, name: #u16, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 176
          }, 
          {
            tag: #var,
            name: #huff_mask,
            type: {tag: #type, name: #u16, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 190
          }, 
          {
            tag: #var,
            name: #huff_next,
            type: {tag: #type, name: #s16, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 191
          }, 
          {
            tag: #var,
            name: #huff_len,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 192
          }, 
          {
            tag: #var,
            name: #huff_idx,
            type: {tag: #type, name: #s16, ptrlvl: 1},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 193
          }, 
          {
            tag: #var,
            name: #jpg_qt,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 194
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 197,
            value: [
              {
                tag: #var,
                name: #xs,
                type: {tag: #type, name: #int},
                modi: 1
              }, 
              {
                tag: #var,
                name: #ys,
                type: {tag: #type, name: #int},
                modi: 1
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 199,
            value: [
              {
                tag: #var,
                name: #lxs,
                type: {tag: #type, name: #int},
                modi: 1
              }, 
              {
                tag: #var,
                name: #lys,
                type: {tag: #type, name: #int},
                modi: 1
              }]
          }, 
          {
            tag: #var,
            name: #jpg_cid,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 200
          }, 
          {
            tag: #var,
            name: #jpg_ch,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 208
          }, 
          {
            tag: #var,
            name: #jpg_cv,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 209
          }, 
          {
            tag: #var,
            name: #jpg_qid,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 210
          }, 
          {
            tag: #var,
            name: #jpg_cxi,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 211
          }, 
          {
            tag: #var,
            name: #jpg_cyi,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 212
          }, 
          {
            tag: #var,
            name: #jpg_nc,
            type: {tag: #type, name: #int},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 213
          }, 
          {
            tag: #var,
            name: #jpg_chm,
            type: {tag: #type, name: #int},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 215
          }, 
          {
            tag: #var,
            name: #jpg_chn,
            type: {tag: #type, name: #int},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 216
          }, 
          {
            tag: #var,
            name: #jpg_scid,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 217
          }, 
          {
            tag: #var,
            name: #jpg_scn,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 221
          }, 
          {
            tag: #var,
            name: #jpg_sibuf,
            type: {
              tag: #type,
              name: #byte,
              arrays: [{tag: #arrdef0}, {tag: #arrdef0}]
            },
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 222
          }, 
          {
            tag: #var,
            name: #jpg_sabuf,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 223
          }, 
          {
            tag: #var,
            name: #jpg_schs,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 224
          }, 
          {
            tag: #var,
            name: #jpg_scvs,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 231
          }, 
          {
            tag: #var,
            name: #jpg_schsci,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 232
          }, 
          {
            tag: #var,
            name: #jpg_scvsci,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef0}},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 233
          }, 
          {
            tag: #var,
            name: #jpg_is420,
            type: {tag: #type, name: #byte},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 234
          }, 
          {
            tag: #var,
            name: #jpg_is444,
            type: {tag: #type, name: #byte},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 236
          }, 
          {
            tag: #var,
            name: #jpg_rdct,
            type: {tag: #type, name: #byte},
            modi: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 237
          }]
      }
    }, 
    {
      tag: #func,
      name: #clamp255,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 29,
      fn: "bstest/bs_decjpg.bs",
      ln: 239,
      args: [{tag: #var, name: #x, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 242,
            cond: {tag: #bincmp, op: #"<", lhs: #x, rhs: 0},
            then: {tag: #return, value: 0}
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 244,
            cond: {tag: #bincmp, op: #">", lhs: #x, rhs: 255},
            then: {tag: #return, value: 255}
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 246, value: #x}]
      }
    }, 
    {
      tag: #func,
      name: #memcpy,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 40,
      fn: "bstest/bs_decjpg.bs",
      ln: 248,
      args: [
        {tag: #var, name: #dst, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #src, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 251,
            value: [
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cse,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #src,
            fn: "bstest/bs_decjpg.bs",
            ln: 252
          }, 
          {
            tag: #assign,
            lhs: #cse,
            rhs: {tag: #binary, op: #"+", lhs: #cs, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 254
          }, 
          {
            tag: #assign,
            lhs: #ct,
            rhs: #dst,
            fn: "bstest/bs_decjpg.bs",
            ln: 254
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 254,
            cond: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
            then: {
              tag: #assign,
              lhs: {tag: #unary, op: #"*", value: {tag: #postinc, value: #ct}},
              rhs: {tag: #unary, op: #"*", value: {tag: #postinc, value: #cs}},
              fn: "bstest/bs_decjpg.bs",
              ln: 268
            }
          }]
      }
    }, 
    {
      tag: #func,
      name: #memset,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 32,
      fn: "bstest/bs_decjpg.bs",
      ln: 269,
      args: [
        {tag: #var, name: #dst, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #val, type: {tag: #type, name: #byte}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 272,
            value: [
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cte,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #assign,
            lhs: #ct,
            rhs: #dst,
            fn: "bstest/bs_decjpg.bs",
            ln: 273
          }, 
          {
            tag: #assign,
            lhs: #cte,
            rhs: {tag: #binary, op: #"+", lhs: #ct, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 275
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 275,
            cond: {tag: #bincmp, op: #"<", lhs: #ct, rhs: #cte},
            then: {
              tag: #assign,
              lhs: {tag: #unary, op: #"*", value: {tag: #postinc, value: #ct}},
              rhs: #val,
              fn: "bstest/bs_decjpg.bs",
              ln: 277
            }
          }]
      }
    }, 
    {
      tag: #func,
      name: #strcmp,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 98,
      fn: "bstest/bs_decjpg.bs",
      ln: 278,
      args: [
        {tag: #var, name: #s1, type: {tag: #type, name: #char8, ptrlvl: 1}}, 
        {tag: #var, name: #s2, type: {tag: #type, name: #char8, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 281,
            cond: {
              tag: #binary,
              op: #"&&",
              lhs: {
                tag: #binary,
                op: #"&&",
                lhs: {tag: #unary, op: #"*", value: #s1},
                rhs: {tag: #unary, op: #"*", value: #s2}
              },
              rhs: {
                tag: #bincmp,
                op: #"==",
                lhs: {tag: #unary, op: #"*", value: #s1},
                rhs: {tag: #unary, op: #"*", value: #s2}
              }
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #postinc,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 283,
                  value: #s1
                }, 
                {
                  tag: #postinc,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 283,
                  value: #s2
                }]
            }
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 283,
            cond: {
              tag: #unary,
              op: #"!",
              value: {tag: #unary, op: #"*", value: #s1}
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 285,
                  cond: {
                    tag: #unary,
                    op: #"!",
                    value: {tag: #unary, op: #"*", value: #s2}
                  },
                  then: {tag: #return, value: 0}
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 287,
                  value: 1
                }]
            }
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 289,
            cond: {
              tag: #unary,
              op: #"!",
              value: {tag: #unary, op: #"*", value: #s2}
            },
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 290,
            cond: {
              tag: #bincmp,
              op: #">",
              lhs: {tag: #unary, op: #"*", value: #s1},
              rhs: {tag: #unary, op: #"*", value: #s2}
            },
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 291,
            cond: {
              tag: #bincmp,
              op: #"<",
              lhs: {tag: #unary, op: #"*", value: #s1},
              rhs: {tag: #unary, op: #"*", value: #s2}
            },
            then: {tag: #return, value: 1}
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 292, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #strlen,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 27,
      fn: "bstest/bs_decjpg.bs",
      ln: 294,
      args: [{tag: #var, name: #s1, type: {tag: #type, name: #char8, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #n,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 297
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 298
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 299,
            cond: {tag: #unary, op: #"*", value: #s1},
            then: {
              tag: #block,
              value: [
                {
                  tag: #postinc,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 300,
                  value: #s1
                }, 
                {
                  tag: #postinc,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 300,
                  value: #n
                }]
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 300, value: #n}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_AllocContext,
      type: {tag: #type, name: #PDJPG_Context},
      modi: 1,
      tokcnt: 17,
      fn: "bstest/bs_decjpg.bs",
      ln: 302,
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #ctx,
            type: {tag: #type, name: #PDJPG_Context},
            fn: "bstest/bs_decjpg.bs",
            ln: 305
          }, 
          {
            tag: #assign,
            lhs: #ctx,
            rhs: {
              tag: #new,
              type: {tag: #type, name: #PDJPG_Context},
              args: __unknown_4
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 306
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 307, value: #ctx}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_FreeContext,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 38,
      fn: "bstest/bs_decjpg.bs",
      ln: 309,
      args: [{tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 312
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 313,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 4},
            then: {
              tag: #if,
              cond: {
                tag: #loadindex,
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                rhs: #i
              },
              then: {
                tag: #delete,
                value: {
                  tag: #loadindex,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                  rhs: #i
                }
              }
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {tag: #delete, fn: "bstest/bs_decjpg.bs", ln: 317, value: #ctx}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_Init,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 28,
      fn: "bstest/bs_decjpg.bs",
      ln: 320,
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #init,
            type: {tag: #type, name: #int},
            modi: 8,
            fn: "bstest/bs_decjpg.bs",
            ln: 323
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 324,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 325,
            value: [
              {tag: #var, name: #f, type: {tag: #type, name: #float}}, 
              {tag: #var, name: #g, type: {tag: #type, name: #float}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 326,
            cond: #init,
            then: {tag: #return, value: null}
          }, 
          {
            tag: #assign,
            lhs: #init,
            rhs: 1,
            fn: "bstest/bs_decjpg.bs",
            ln: 328
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_TransIDCT_Horiz,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 319,
      fn: "bstest/bs_decjpg.bs",
      ln: 330,
      args: [
        {tag: #var, name: #iblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #oblk, type: {tag: #type, name: #int, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 333,
            value: [
              {tag: #var, name: #a, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #c, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #d, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #e, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #f, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 334,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 335,
            value: [
              {tag: #var, name: #m, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #o, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #p, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #a,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 0},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 336
          }, 
          {
            tag: #assign,
            lhs: #b,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 4},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 338
          }, 
          {
            tag: #assign,
            lhs: #c,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 2},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 338
          }, 
          {
            tag: #assign,
            lhs: #d,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 2},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 339
          }, 
          {
            tag: #assign,
            lhs: #e,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 6},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 339
          }, 
          {
            tag: #assign,
            lhs: #f,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 6},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 340
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 340
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 341
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 341
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 341
          }, 
          {
            tag: #assign,
            lhs: #m,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 1},
                    rhs: 126
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 3},
                    rhs: 106
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 5},
                  rhs: 71
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 7},
                rhs: 25
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 341
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 1},
                    rhs: 106
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 3},
                    rhs: 25
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 5},
                  rhs: 126
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 7},
                rhs: 71
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 342
          }, 
          {
            tag: #assign,
            lhs: #o,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 1},
                    rhs: 71
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 3},
                    rhs: 126
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 5},
                  rhs: 25
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 7},
                rhs: 106
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 343
          }, 
          {
            tag: #assign,
            lhs: #p,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 1},
                    rhs: 25
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 3},
                    rhs: 71
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 5},
                  rhs: 106
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 7},
                rhs: 126
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 344
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 0},
            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: #m},
            fn: "bstest/bs_decjpg.bs",
            ln: 345
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 1},
            rhs: {tag: #binary, op: #"+", lhs: #j, rhs: #n},
            fn: "bstest/bs_decjpg.bs",
            ln: 346
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 2},
            rhs: {tag: #binary, op: #"+", lhs: #k, rhs: #o},
            fn: "bstest/bs_decjpg.bs",
            ln: 346
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 3},
            rhs: {tag: #binary, op: #"+", lhs: #l, rhs: #p},
            fn: "bstest/bs_decjpg.bs",
            ln: 346
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 4},
            rhs: {tag: #binary, op: #"-", lhs: #l, rhs: #p},
            fn: "bstest/bs_decjpg.bs",
            ln: 346
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 5},
            rhs: {tag: #binary, op: #"-", lhs: #k, rhs: #o},
            fn: "bstest/bs_decjpg.bs",
            ln: 347
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 6},
            rhs: {tag: #binary, op: #"-", lhs: #j, rhs: #n},
            fn: "bstest/bs_decjpg.bs",
            ln: 347
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 7},
            rhs: {tag: #binary, op: #"-", lhs: #i, rhs: #m},
            fn: "bstest/bs_decjpg.bs",
            ln: 347
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_TransIDCT_Vert,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 319,
      fn: "bstest/bs_decjpg.bs",
      ln: 348,
      args: [
        {tag: #var, name: #iblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #oblk, type: {tag: #type, name: #int, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 351,
            value: [
              {tag: #var, name: #a, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #c, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #d, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #e, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #f, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 352,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 353,
            value: [
              {tag: #var, name: #m, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #o, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #p, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #a,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 0},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 354
          }, 
          {
            tag: #assign,
            lhs: #b,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 32},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 356
          }, 
          {
            tag: #assign,
            lhs: #c,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 16},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 356
          }, 
          {
            tag: #assign,
            lhs: #d,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 16},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 357
          }, 
          {
            tag: #assign,
            lhs: #e,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 48},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 357
          }, 
          {
            tag: #assign,
            lhs: #f,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 48},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 358
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 358
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 359
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 359
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 359
          }, 
          {
            tag: #assign,
            lhs: #m,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 126
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 106
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 71
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 25
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 359
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 106
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 25
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 126
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 71
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 360
          }, 
          {
            tag: #assign,
            lhs: #o,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 71
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 126
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 25
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 106
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 361
          }, 
          {
            tag: #assign,
            lhs: #p,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 25
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 71
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 106
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 126
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 362
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 0},
            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: #m},
            fn: "bstest/bs_decjpg.bs",
            ln: 363
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 8},
            rhs: {tag: #binary, op: #"+", lhs: #j, rhs: #n},
            fn: "bstest/bs_decjpg.bs",
            ln: 364
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 16},
            rhs: {tag: #binary, op: #"+", lhs: #k, rhs: #o},
            fn: "bstest/bs_decjpg.bs",
            ln: 364
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 24},
            rhs: {tag: #binary, op: #"+", lhs: #l, rhs: #p},
            fn: "bstest/bs_decjpg.bs",
            ln: 364
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 32},
            rhs: {tag: #binary, op: #"-", lhs: #l, rhs: #p},
            fn: "bstest/bs_decjpg.bs",
            ln: 364
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 40},
            rhs: {tag: #binary, op: #"-", lhs: #k, rhs: #o},
            fn: "bstest/bs_decjpg.bs",
            ln: 365
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 48},
            rhs: {tag: #binary, op: #"-", lhs: #j, rhs: #n},
            fn: "bstest/bs_decjpg.bs",
            ln: 365
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 56},
            rhs: {tag: #binary, op: #"-", lhs: #i, rhs: #m},
            fn: "bstest/bs_decjpg.bs",
            ln: 365
          }]
      }
    }, 
    {
      tag: #func,
      name: #BGBBTJ_JPG_TransIDCT_Vert2,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 383,
      fn: "bstest/bs_decjpg.bs",
      ln: 366,
      args: [
        {tag: #var, name: #iblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #oblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #dcbias, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 369,
            value: [
              {tag: #var, name: #a, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #c, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #d, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #e, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #f, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 370,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 371,
            value: [
              {tag: #var, name: #m, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #o, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #p, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #a,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 0},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 372
          }, 
          {
            tag: #assign,
            lhs: #b,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 32},
              rhs: 91
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 374
          }, 
          {
            tag: #assign,
            lhs: #c,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 16},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 374
          }, 
          {
            tag: #assign,
            lhs: #d,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 16},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 375
          }, 
          {
            tag: #assign,
            lhs: #e,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 48},
              rhs: 118
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 375
          }, 
          {
            tag: #assign,
            lhs: #f,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #loadindex, lhs: #iblk, rhs: 48},
              rhs: 49
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 376
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 376
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"+", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 377
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #d},
                rhs: #b
              },
              rhs: #e
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 377
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"-", lhs: #a, rhs: #c},
                rhs: #b
              },
              rhs: #f
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 377
          }, 
          {
            tag: #assign,
            lhs: #m,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 126
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 106
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 71
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 25
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 377
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 106
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 25
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 126
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 71
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 378
          }, 
          {
            tag: #assign,
            lhs: #o,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 71
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 126
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 25
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 106
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 379
          }, 
          {
            tag: #assign,
            lhs: #p,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 8},
                    rhs: 25
                  },
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadindex, lhs: #iblk, rhs: 24},
                    rhs: 71
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"*",
                  lhs: {tag: #loadindex, lhs: #iblk, rhs: 40},
                  rhs: 106
                }
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadindex, lhs: #iblk, rhs: 56},
                rhs: 126
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 380
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 0},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"+", lhs: #i, rhs: #m},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 381
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 8},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"+", lhs: #j, rhs: #n},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 382
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 16},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"+", lhs: #k, rhs: #o},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 382
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 24},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"+", lhs: #l, rhs: #p},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 383
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 32},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"-", lhs: #l, rhs: #p},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 383
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 40},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"-", lhs: #k, rhs: #o},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 384
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 48},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"-", lhs: #j, rhs: #n},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 384
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #oblk, rhs: 56},
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #binary, op: #"-", lhs: #i, rhs: #m},
                rhs: 16
              },
              rhs: #dcbias
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 385
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_TransIDCT,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 382,
      fn: "bstest/bs_decjpg.bs",
      ln: 386,
      args: [
        {tag: #var, name: #iblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #oblk, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #dcbias, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #rtm, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #s,
            type: {
              tag: #type,
              name: #int,
              arrays: {tag: #arrdef, value: #DCTSZ2}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 389
          }, 
          {
            tag: #var,
            name: #t,
            type: {
              tag: #type,
              name: #int,
              arrays: {tag: #arrdef, value: #DCTSZ2}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 390
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 391,
            value: [
              {
                tag: #var,
                name: #ob,
                type: {tag: #type, name: #int, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #obe,
                type: {tag: #type, name: #int, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 392,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 393,
            cond: {tag: #bincmp, op: #"==", lhs: #rtm, rhs: 2},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #k,
                  rhs: {
                    tag: #binary,
                    op: #"+",
                    lhs: {
                      tag: #binary,
                      op: #">>",
                      lhs: {
                        tag: #binary,
                        op: #"+",
                        lhs: {
                          tag: #binary,
                          op: #"*",
                          lhs: {tag: #loadindex, lhs: #iblk, rhs: 0},
                          rhs: 8281
                        },
                        rhs: 32768
                      },
                      rhs: 16
                    },
                    rhs: #dcbias
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 396
                }, 
                {
                  tag: #assign,
                  lhs: #ob,
                  rhs: #oblk,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 398
                }, 
                {
                  tag: #assign,
                  lhs: #obe,
                  rhs: {tag: #binary, op: #"+", lhs: #ob, rhs: 64},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 399
                }, 
                {
                  tag: #while,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 399,
                  cond: {tag: #bincmp, op: #"<", lhs: #ob, rhs: #obe},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 0},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 401
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 1},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 402
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 2},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 402
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 3},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 402
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 4},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 402
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 5},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 403
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 6},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 403
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 7},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 403
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 8},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 403
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 9},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 404
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 10},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 404
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 11},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 404
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 12},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 404
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 13},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 405
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 14},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 405
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadindex, lhs: #ob, rhs: 15},
                        rhs: #k,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 405
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #ob,
                        rhs: 16,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 405
                      }]
                  }
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 407,
                  value: null
                }]
            }
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 409,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 0}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 0}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 411,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 8}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 8}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 412,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 16}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 16}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 413,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 24}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 24}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 414,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 32}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 32}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 415,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 40}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 40}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 416,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 48}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 48}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 417,
            args: [
              {tag: #binary, op: #"+", lhs: #iblk, rhs: 56}, 
              {tag: #binary, op: #"+", lhs: #s, rhs: 56}],
            func: #PDJPG_TransIDCT_Horiz
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 418,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 0}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 0}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 420,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 1}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 1}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 421,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 2}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 2}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 422,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 3}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 3}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 423,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 4}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 4}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 424,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 5}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 5}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 425,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 6}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 6}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 426,
            args: [
              {tag: #binary, op: #"+", lhs: #s, rhs: 7}, 
              {tag: #binary, op: #"+", lhs: #oblk, rhs: 7}, #dcbias],
            func: #BGBBTJ_JPG_TransIDCT_Vert2
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_NextByte,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 58,
      fn: "bstest/bs_decjpg.bs",
      ln: 428,
      args: [{tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 434,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #unary,
              op: #"*",
              value: {
                tag: #postinc,
                value: {tag: #loadslot, lhs: #ctx, rhs: #huff_cs}
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 435
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 437,
            cond: {tag: #bincmp, op: #"==", lhs: #i, rhs: 255},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {
                    tag: #unary,
                    op: #"*",
                    value: {
                      tag: #postinc,
                      value: {tag: #loadslot, lhs: #ctx, rhs: #huff_cs}
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 439
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 441,
                  cond: #j,
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 443,
                        args: "IsEnd\n",
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_isend},
                        rhs: 1,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 444
                      }, 
                      {
                        tag: #return,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 445,
                        value: 0
                      }]
                  }
                }]
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 448, value: #i}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_InitStream,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 91,
      fn: "bstest/bs_decjpg.bs",
      ln: 453,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 456
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_isend},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 457
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_css},
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 458
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_cs},
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 460
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
            rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte},
            fn: "bstest/bs_decjpg.bs",
            ln: 461
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: 8
              },
              rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 462
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: 8
              },
              rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 463
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: 8
              },
              rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 464
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 465, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_ReadNBits,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 88,
      fn: "bstest/bs_decjpg.bs",
      ln: 467,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #n, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 486
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 487,
            cond: {tag: #bincmp, op: #"<=", lhs: #n, rhs: 0},
            then: {tag: #return, value: 0}
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"&",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: {tag: #binary, op: #"-", lhs: 32, rhs: #n},
                  rhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos}
                }
              },
              rhs: {
                tag: #binary,
                op: #"-",
                lhs: {tag: #binary, op: #"<<", lhs: 1, rhs: #n},
                rhs: 1
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 489
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
            rhs: #n,
            fn: "bstest/bs_decjpg.bs",
            ln: 497
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 498,
            cond: {
              tag: #bincmp,
              op: #">=",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
              rhs: 8
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                  rhs: {
                    tag: #binary,
                    op: #"|",
                    lhs: {
                      tag: #binary,
                      op: #"<<",
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                      rhs: 8
                    },
                    rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 507
                }, 
                {
                  tag: #assignop,
                  op: #"-",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                  rhs: 8,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 508
                }]
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 510, value: #i}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_SkipNBits,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 41,
      fn: "bstest/bs_decjpg.bs",
      ln: 526,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #n, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #assignop,
            op: #"+",
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
            rhs: #n,
            fn: "bstest/bs_decjpg.bs",
            ln: 529
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 530,
            cond: {
              tag: #bincmp,
              op: #">=",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
              rhs: 8
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                  rhs: {
                    tag: #binary,
                    op: #"|",
                    lhs: {
                      tag: #binary,
                      op: #"<<",
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                      rhs: 8
                    },
                    rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 532
                }, 
                {
                  tag: #assignop,
                  op: #"-",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                  rhs: 8,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 533
                }]
            }
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_PeekWord,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 28,
      fn: "bstest/bs_decjpg.bs",
      ln: 536,
      args: [{tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 539
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"&",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: 16,
                  rhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos}
                }
              },
              rhs: 65535
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 540
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 541, value: #i}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_DecodeSymbol,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 249,
      fn: "bstest/bs_decjpg.bs",
      ln: 543,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #tab, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 593,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #prefix_cast,
              lhs: {
                tag: #binary,
                op: #">>>",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: 24,
                  rhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos}
                }
              },
              rhs: {tag: #type, name: #byte}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 594
          }, 
          {
            tag: #assignop,
            op: #"<<",
            lhs: #tab,
            rhs: 8,
            fn: "bstest/bs_decjpg.bs",
            ln: 596
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #loadindex,
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
              rhs: {tag: #binary, op: #"|", lhs: #tab, rhs: #i}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 598
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {
              tag: #loadindex,
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_len},
              rhs: {tag: #binary, op: #"|", lhs: #tab, rhs: #j}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 599
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 601,
            cond: {tag: #bincmp, op: #"<=", lhs: #k, rhs: 8},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                  rhs: #k,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 603
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 604,
                  cond: {
                    tag: #bincmp,
                    op: #">=",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                    rhs: 8
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                            rhs: 8
                          },
                          rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 606
                      }, 
                      {
                        tag: #assignop,
                        op: #"-",
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                        rhs: 8,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 607
                      }]
                  }
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 609,
                  value: #j
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #prefix_cast,
              lhs: {
                tag: #binary,
                op: #">>>",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                rhs: {
                  tag: #binary,
                  op: #"-",
                  lhs: 16,
                  rhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos}
                }
              },
              rhs: {tag: #type, name: #u16}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 611
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 613,
            cond: 1,
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #l,
                  rhs: {tag: #binary, op: #"|", lhs: #tab, rhs: #j},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 617
                }, 
                {
                  tag: #assign,
                  lhs: #k,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_len},
                    rhs: #l
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 618
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 619,
                  cond: {tag: #unary, op: #"!", value: #k},
                  then: {
                    tag: #break,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 621,
                    value: 1
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 621,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #binary,
                      op: #">>",
                      lhs: #i,
                      rhs: {tag: #binary, op: #"-", lhs: 16, rhs: #k}
                    },
                    rhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_code},
                      rhs: #l
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_next},
                          rhs: #l
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 624
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 625,
                        cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: 0},
                        then: {
                          tag: #break,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 627,
                          value: 1
                        }
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 627,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                  rhs: #k,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 629
                }, 
                {
                  tag: #while,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 631,
                  cond: {
                    tag: #bincmp,
                    op: #">=",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                    rhs: 8
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_win},
                            rhs: 8
                          },
                          rhs: {tag: #call, args: #ctx, func: #PDJHUFF_NextByte}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 633
                      }, 
                      {
                        tag: #assignop,
                        op: #"-",
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_pos},
                        rhs: 8,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 634
                      }]
                  }
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 636,
                  value: #j
                }]
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 638, value: -1}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_DecodeDiffDC,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 60,
      fn: "bstest/bs_decjpg.bs",
      ln: 640,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #tab, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 643,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {tag: #call, args: [#ctx, #tab], func: #PDJHUFF_DecodeSymbol},
            fn: "bstest/bs_decjpg.bs",
            ln: 644
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {tag: #call, args: [#ctx, #i], func: #PDJHUFF_ReadNBits},
            fn: "bstest/bs_decjpg.bs",
            ln: 646
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"&",
              lhs: {
                tag: #unary,
                op: #"~",
                value: {
                  tag: #binary,
                  op: #">>",
                  lhs: {
                    tag: #binary,
                    op: #"<<",
                    lhs: #j,
                    rhs: {tag: #binary, op: #"-", lhs: 32, rhs: #i}
                  },
                  rhs: 31
                }
              },
              rhs: {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"<<", lhs: -1, rhs: #i},
                rhs: 1
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 651
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 652, value: #j}]
      }
    }, 
    {
      tag: #func,
      name: #PDJHUFF_DecodeBlock,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 274,
      fn: "bstest/bs_decjpg.bs",
      ln: 655,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #dctab, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #actab, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #qid, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ni, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #nn, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #qtab,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 660
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 661,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 662,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 64},
            then: {
              tag: #assign,
              lhs: {tag: #loadindex, lhs: #buf, rhs: #i},
              rhs: 0
            },
            init: {tag: #assign, lhs: #i, rhs: 1},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #assign,
            lhs: #qtab,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_qt},
              rhs: {tag: #binary, op: #"*", lhs: #qid, rhs: 64}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 667
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {
                tag: #call,
                args: [#ctx, #dctab],
                func: #PDJHUFF_DecodeDiffDC
              },
              rhs: {tag: #loadindex, lhs: #qtab, rhs: 0}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 669
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 671,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 64},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {
                    tag: #call,
                    args: [#ctx, #actab],
                    func: #PDJHUFF_DecodeSymbol
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 673
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 674,
                  cond: {tag: #bincmp, op: #"<=", lhs: #j, rhs: 0},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 676,
                        cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: 0},
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #call,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 678,
                              args: [
                                "bad dct block1 %02X(%d) %d/%d\n", #j, #j, 
                                #ni, #nn],
                              func: #printf
                            }, 
                            {
                              tag: #return,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 679,
                              value: -1
                            }]
                        }
                      }, 
                      {
                        tag: #break,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 681,
                        value: 1
                      }]
                  }
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #i,
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {tag: #binary, op: #">>", lhs: #j, rhs: 4},
                    rhs: 15
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 683
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 685,
                  cond: {
                    tag: #unary,
                    op: #"!",
                    value: {tag: #binary, op: #"&", lhs: #j, rhs: 15}
                  },
                  then: {tag: #continue, value: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 687,
                  cond: {tag: #bincmp, op: #">=", lhs: #i, rhs: 64},
                  then: {
                    tag: #break,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 689,
                    value: 1
                  }
                }, 
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {tag: #binary, op: #"&", lhs: #j, rhs: 15},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 689
                }, 
                {
                  tag: #assign,
                  lhs: #k,
                  rhs: {tag: #call, args: [#ctx, #j], func: #PDJHUFF_ReadNBits},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 692
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #k,
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {
                      tag: #unary,
                      op: #"~",
                      value: {
                        tag: #binary,
                        op: #">>",
                        lhs: {
                          tag: #binary,
                          op: #"<<",
                          lhs: #k,
                          rhs: {tag: #binary, op: #"-", lhs: 32, rhs: #j}
                        },
                        rhs: 31
                      }
                    },
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"<<", lhs: -1, rhs: #j},
                      rhs: 1
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 693
                }, 
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {tag: #loadindex, lhs: #pdjpg_zigzag2, rhs: #i},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 694
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #buf, rhs: #j},
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: #k,
                    rhs: {tag: #loadindex, lhs: #qtab, rhs: #j}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 696
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 1},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 698,
            cond: {tag: #bincmp, op: #">", lhs: #i, rhs: 64},
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 701,
                  args: [
                    "bad dct block2 %02X(%d) len=%d %d/%d\n", #j, #j, #i, 
                    #ni, #nn],
                  func: #printf
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 702,
                  args: [
                    "Error @ %06X\n", 
                    {
                      tag: #binary,
                      op: #"-",
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_cs},
                      rhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_css}
                    }],
                  func: #printf
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 703,
                  value: -1
                }]
            }
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 705,
            cond: {tag: #bincmp, op: #"==", lhs: #i, rhs: 1},
            then: {tag: #return, value: 2}
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 708, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_CopyOutBlock8B,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 311,
      fn: "bstest/bs_decjpg.bs",
      ln: 710,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #ibuf, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {
          tag: #var,
          name: #obuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #x, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #y, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #cs,
            type: {tag: #type, name: #int, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 716
          }, 
          {
            tag: #var,
            name: #ct,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 717
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 718,
            value: [
              {tag: #var, name: #i0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i3, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i4, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i5, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i6, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i7, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 719,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 720,
            cond: {
              tag: #binary,
              op: #"||",
              lhs: {
                tag: #bincmp,
                op: #">",
                lhs: {tag: #binary, op: #"+", lhs: #x, rhs: 8},
                rhs: #xs
              },
              rhs: {
                tag: #bincmp,
                op: #">",
                lhs: {tag: #binary, op: #"+", lhs: #y, rhs: 8},
                rhs: #ys
              }
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 723,
                  cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 8},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 725,
                        cond: {
                          tag: #bincmp,
                          op: #">=",
                          lhs: {tag: #binary, op: #"+", lhs: #y, rhs: #i},
                          rhs: #ys
                        },
                        then: {tag: #continue, value: 0}
                      }, 
                      {
                        tag: #assign,
                        lhs: #cs,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #ibuf,
                          rhs: {tag: #binary, op: #"*", lhs: #i, rhs: 8}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 727
                      }, 
                      {
                        tag: #assign,
                        lhs: #ct,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: #obuf,
                            rhs: {
                              tag: #binary,
                              op: #"*",
                              lhs: {tag: #binary, op: #"+", lhs: #y, rhs: #i},
                              rhs: #xs
                            }
                          },
                          rhs: #x
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 729
                      }, 
                      {
                        tag: #for,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 730,
                        cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: 8},
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #if,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 732,
                              cond: {
                                tag: #bincmp,
                                op: #">=",
                                lhs: {tag: #binary, op: #"+", lhs: #x, rhs: #j},
                                rhs: #xs
                              },
                              then: {tag: #continue, value: 0}
                            }, 
                            {
                              tag: #assign,
                              lhs: #k,
                              rhs: {
                                tag: #unary,
                                op: #"*",
                                value: {tag: #postinc, value: #cs}
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 734
                            }, 
                            {
                              tag: #if,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 735,
                              cond: {tag: #bincmp, op: #"<", lhs: #k, rhs: 0},
                              then: {tag: #assign, lhs: #k, rhs: 0}
                            }, 
                            {
                              tag: #if,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 736,
                              cond: {tag: #bincmp, op: #">", lhs: #k, rhs: 255},
                              then: {tag: #assign, lhs: #k, rhs: 255}
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #unary, op: #"*", value: #ct},
                              rhs: #k,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 737
                            }, 
                            {
                              tag: #postinc,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 738,
                              value: #ct
                            }]
                        },
                        init: {tag: #assign, lhs: #j, rhs: 0},
                        step: {tag: #postinc, value: #j}
                      }]
                  },
                  init: {tag: #assign, lhs: #i, rhs: 0},
                  step: {tag: #postinc, value: #i}
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 741,
                  value: null
                }]
            }
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 743,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 8},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #cs,
                  rhs: {
                    tag: #binary,
                    op: #"+",
                    lhs: #ibuf,
                    rhs: {tag: #binary, op: #"*", lhs: #i, rhs: 8}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 746
                }, 
                {
                  tag: #assign,
                  lhs: #ct,
                  rhs: {
                    tag: #binary,
                    op: #"+",
                    lhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: #obuf,
                      rhs: {
                        tag: #binary,
                        op: #"*",
                        lhs: {tag: #binary, op: #"+", lhs: #y, rhs: #i},
                        rhs: #xs
                      }
                    },
                    rhs: #x
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 747
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 0},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 0},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 748
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 1},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 1},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 750
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 2},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 2},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 750
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 3},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 3},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 751
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 4},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 4},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 751
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 5},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 5},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 752
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 6},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 6},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 752
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ct, rhs: 7},
                  rhs: {
                    tag: #call,
                    args: {tag: #loadindex, lhs: #cs, rhs: 7},
                    func: #clamp255
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 753
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerSOS,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 2141,
      fn: "bstest/bs_decjpg.bs",
      ln: 755,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #dbuf,
            type: {
              tag: #type,
              name: #int,
              arrays: {
                tag: #arrdef,
                value: {tag: #binary, op: #"*", lhs: 4, rhs: 64}
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 758
          }, 
          {
            tag: #var,
            name: #dcblk,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 64}},
            fn: "bstest/bs_decjpg.bs",
            ln: 759
          }, 
          {
            tag: #var,
            name: #diblk,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 64}},
            fn: "bstest/bs_decjpg.bs",
            ln: 760
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 761,
            value: [
              {
                tag: #var,
                name: #ch,
                type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #cv,
                type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #qid,
                type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}}
              }]
          }, 
          {
            tag: #var,
            name: #step,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}},
            fn: "bstest/bs_decjpg.bs",
            ln: 762
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 763,
            value: [
              {
                tag: #var,
                name: #xi,
                type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #yi,
                type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #wi,
                type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #hi,
                type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 764,
            value: [
              {
                tag: #var,
                name: #cdt,
                type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}}
              }, 
              {
                tag: #var,
                name: #cat,
                type: {tag: #type, name: #byte, arrays: {tag: #arrdef, value: 4}}
              }]
          }, 
          {
            tag: #var,
            name: #ccnt,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}},
            fn: "bstest/bs_decjpg.bs",
            ln: 765
          }, 
          {
            tag: #var,
            name: #sibuf,
            type: {
              tag: #type,
              name: #byte,
              arrays: {tag: #arrdef, value: 4},
              ptrlvl: 1
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 766
          }, 
          {
            tag: #var,
            name: #siystr,
            type: {tag: #type, name: #int, arrays: {tag: #arrdef, value: 4}},
            fn: "bstest/bs_decjpg.bs",
            ln: 768
          }, 
          {
            tag: #var,
            name: #s,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 769
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 771,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #i1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 772,
            value: [
              {tag: #var, name: #w, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #h, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #ns, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #rt, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 773,
            args: "PDJPG_MarkerSOS: A\n",
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 775
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 777,
            args: ["ns %d\n", {tag: #loadindex, lhs: #buf, rhs: 2}],
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #ns,
            rhs: {tag: #loadindex, lhs: #buf, rhs: 2},
            fn: "bstest/bs_decjpg.bs",
            ln: 778
          }, 
          {
            tag: #assign,
            lhs: #rt,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 780
          }, 
          {
            tag: #assign,
            lhs: #s,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: 3},
            fn: "bstest/bs_decjpg.bs",
            ln: 780
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 781,
            cond: {
              tag: #bincmp,
              op: #"<",
              lhs: #i,
              rhs: {tag: #loadindex, lhs: #buf, rhs: 2}
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 783,
                  args: [
                    "%d %d %d\n", {tag: #loadindex, lhs: #s, rhs: 0}, 
                    {
                      tag: #binary,
                      op: #">>",
                      lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                      rhs: 4
                    }, 
                    {
                      tag: #binary,
                      op: #"&",
                      lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                      rhs: 15
                    }],
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #cdt, rhs: #i},
                  rhs: {
                    tag: #binary,
                    op: #">>",
                    lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                    rhs: 4
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 784
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #cat, rhs: #i},
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                    rhs: 15
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 786
                }, 
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 787,
                  cond: {
                    tag: #bincmp,
                    op: #"<",
                    lhs: #j,
                    rhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_nc}
                  },
                  then: {
                    tag: #if,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 790,
                    cond: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cid},
                        rhs: #j
                      },
                      rhs: {tag: #loadindex, lhs: #s, rhs: 0}
                    },
                    then: {
                      tag: #block,
                      value: [
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #ch, rhs: #i},
                          rhs: {
                            tag: #loadindex,
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                            rhs: #j
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 792
                        }, 
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #cv, rhs: #i},
                          rhs: {
                            tag: #loadindex,
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                            rhs: #j
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 793
                        }, 
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #qid, rhs: #i},
                          rhs: {
                            tag: #loadindex,
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_qid},
                            rhs: #j
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 794
                        }, 
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #xi, rhs: #i},
                          rhs: {
                            tag: #loadindex,
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cxi},
                            rhs: #j
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 795
                        }, 
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #yi, rhs: #i},
                          rhs: {
                            tag: #loadindex,
                            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cyi},
                            rhs: #j
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 796
                        }, 
                        {
                          tag: #assign,
                          lhs: {tag: #loadindex, lhs: #step, rhs: #i},
                          rhs: {
                            tag: #binary,
                            op: #"*",
                            lhs: {tag: #loadindex, lhs: #ch, rhs: #i},
                            rhs: {tag: #loadindex, lhs: #cv, rhs: #i}
                          },
                          fn: "bstest/bs_decjpg.bs",
                          ln: 797
                        }, 
                        {
                          tag: #postinc,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 798,
                          value: #k1
                        }, 
                        {
                          tag: #break,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 800,
                          value: 1
                        }]
                    }
                  },
                  init: {tag: #assign, lhs: #j, rhs: 0},
                  step: {tag: #postinc, value: #j}
                }, 
                {
                  tag: #assign,
                  lhs: #w,
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #loadindex, lhs: #xi, rhs: #i},
                      rhs: 7
                    },
                    rhs: 8
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 809
                }, 
                {
                  tag: #assign,
                  lhs: #h,
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #loadindex, lhs: #yi, rhs: #i},
                      rhs: 7
                    },
                    rhs: 8
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 811
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #wi, rhs: #i},
                  rhs: #w,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 812
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #hi, rhs: #i},
                  rhs: #h,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 815
                }, 
                {
                  tag: #assign,
                  lhs: #n,
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #binary, op: #"+", lhs: #w, rhs: 1},
                    rhs: {tag: #binary, op: #"+", lhs: #h, rhs: 2}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 816
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scid},
                    rhs: #i
                  },
                  rhs: {tag: #loadindex, lhs: #s, rhs: 0},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 818
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scn},
                    rhs: #i
                  },
                  rhs: #j,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 819
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 820,
                  cond: {
                    tag: #unary,
                    op: #"!",
                    value: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: #i
                    }
                  },
                  then: {
                    tag: #assign,
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: #i
                    },
                    rhs: {
                      tag: #new,
                      type: {
                        tag: #type,
                        name: #byte,
                        arrays: {
                          tag: #arrdef,
                          value: {tag: #binary, op: #"*", lhs: #n, rhs: 64}
                        }
                      }
                    }
                  }
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #sibuf, rhs: #i},
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                    rhs: #i
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 827
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadindex, lhs: #ccnt, rhs: #i},
                  rhs: 0,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 829
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #s,
                  rhs: 2,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 832
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: #s,
            rhs: 3,
            fn: "bstest/bs_decjpg.bs",
            ln: 835
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 836,
            args: "PDJPG_MarkerSOS: B\n",
            func: #printf
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 838,
            cond: {
              tag: #bincmp,
              op: #"<",
              lhs: #i,
              rhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_nc}
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scn},
                    rhs: #i
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 841
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 842,
                  args: [
                    "PDJPG_MarkerSOS: ch=%d cv=%d chm=%d chn=%d\n", 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                      rhs: #j
                    }, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                      rhs: #j
                    }, 
                    {tag: #loadslot, lhs: #ctx, rhs: #jpg_chm}, 
                    {tag: #loadslot, lhs: #ctx, rhs: #jpg_chn}],
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"*",
                      lhs: 65536,
                      rhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                        rhs: #j
                      }
                    },
                    rhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chm}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 845
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"*",
                      lhs: 65536,
                      rhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                        rhs: #j
                      }
                    },
                    rhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chn}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 847
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schs},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cxi},
                        rhs: #j
                      },
                      rhs: 7
                    },
                    rhs: 8
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 848
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvs},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cyi},
                        rhs: #j
                      },
                      rhs: 7
                    },
                    rhs: 8
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 850
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 851,
                  args: [
                    "PDJPG_MarkerSOS: i=%d j=%d %d %d %d %d\n", #i, #j, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: #i
                    }, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: #i
                    }, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schs},
                      rhs: #i
                    }, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvs},
                      rhs: #i
                    }],
                  func: #printf
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #ifelse,
            fn: "bstest/bs_decjpg.bs",
            ln: 856,
            cond: {
              tag: #bincmp,
              op: #"==",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_nc},
              rhs: 3
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: 1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 859
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 860,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 0
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 861,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 0
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 862,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 1
                    },
                    rhs: 32768
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 863,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 1
                    },
                    rhs: 32768
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 864,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 2
                    },
                    rhs: 32768
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 865,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 2
                    },
                    rhs: 32768
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
                  rhs: #i,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 866
                }, 
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: 1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 867
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 869,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 0
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 870,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 0
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 871,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 1
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 872,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 1
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 873,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_schsci},
                      rhs: 2
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 874,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_scvsci},
                      rhs: 2
                    },
                    rhs: 65536
                  },
                  then: {tag: #assign, lhs: #i, rhs: 0}
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is444},
                  rhs: #i,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 875
                }]
            },
            else: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
                  rhs: 0,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 878
                }, 
                {
                  tag: #assign,
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is444},
                  rhs: 0,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 879
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #w,
            rhs: {
              tag: #binary,
              op: #"/",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #xs},
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chm},
                    rhs: 8
                  }
                },
                rhs: 1
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chm},
                rhs: 8
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 881
          }, 
          {
            tag: #assign,
            lhs: #h,
            rhs: {
              tag: #binary,
              op: #"/",
              lhs: {
                tag: #binary,
                op: #"-",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {tag: #loadslot, lhs: #ctx, rhs: #ys},
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chn},
                    rhs: 8
                  }
                },
                rhs: 1
              },
              rhs: {
                tag: #binary,
                op: #"*",
                lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chn},
                rhs: 8
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 883
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: {tag: #binary, op: #"*", lhs: #w, rhs: #h},
            fn: "bstest/bs_decjpg.bs",
            ln: 884
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 885,
            args: [#ctx, #s],
            func: #PDJHUFF_InitStream
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 887,
            cond: {
              tag: #bincmp,
              op: #"<",
              lhs: #i,
              rhs: {tag: #binary, op: #"*", lhs: 4, rhs: 64}
            },
            then: {
              tag: #assign,
              lhs: {tag: #loadindex, lhs: #dbuf, rhs: #i},
              rhs: 0
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 889,
            args: "PDJPG_MarkerSOS: C\n",
            func: #printf
          }, 
          {
            tag: #ifelse,
            fn: "bstest/bs_decjpg.bs",
            ln: 891,
            cond: {
              tag: #bincmp,
              op: #"==",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_nc},
              rhs: 1
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 894,
                  args: "PDJPG_MarkerSOS: Mono\n",
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: #rt,
                  rhs: 0,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 895
                }, 
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 897,
                  cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #h},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #for,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 899,
                        cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: #w},
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #assign,
                              lhs: #rt,
                              rhs: {
                                tag: #call,
                                args: [
                                  #ctx, #dbuf, 
                                  {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: {
                                      tag: #binary,
                                      op: #"*",
                                      lhs: {tag: #loadindex, lhs: #cdt, rhs: 0},
                                      rhs: 2
                                    },
                                    rhs: 0
                                  }, 
                                  {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: {
                                      tag: #binary,
                                      op: #"*",
                                      lhs: {tag: #loadindex, lhs: #cat, rhs: 0},
                                      rhs: 2
                                    },
                                    rhs: 1
                                  }, 
                                  {tag: #loadindex, lhs: #qid, rhs: 0}, 
                                  {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: {
                                      tag: #binary,
                                      op: #"*",
                                      lhs: #i,
                                      rhs: #w
                                    },
                                    rhs: #j
                                  }, 
                                  #n],
                                func: #PDJHUFF_DecodeBlock
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 901
                            }, 
                            {
                              tag: #if,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 903,
                              cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                              then: {tag: #break, value: 1}
                            }, 
                            {
                              tag: #call,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 904,
                              args: [#dbuf, #diblk, 128, #rt],
                              func: #PDJPG_TransIDCT
                            }, 
                            {
                              tag: #call,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 905,
                              args: [
                                #ctx, #diblk, 
                                {tag: #loadindex, lhs: #sibuf, rhs: 0}, 
                                {tag: #loadindex, lhs: #xi, rhs: 0}, 
                                {tag: #loadindex, lhs: #yi, rhs: 0}, 
                                {tag: #binary, op: #"*", lhs: #j, rhs: 8}, 
                                {tag: #binary, op: #"*", lhs: #i, rhs: 8}],
                              func: #PDJPG_CopyOutBlock8B
                            }]
                        },
                        init: {tag: #assign, lhs: #j, rhs: 0},
                        step: {tag: #postinc, value: #j}
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 908,
                        cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                        then: {tag: #break, value: 1}
                      }]
                  },
                  init: {tag: #assign, lhs: #i, rhs: 0},
                  step: {tag: #postinc, value: #i}
                }]
            },
            else: {
              tag: #ifelse,
              cond: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
              then: {
                tag: #block,
                value: [
                  {
                    tag: #call,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 912,
                    args: "PDJPG_MarkerSOS: Clr420\n",
                    func: #printf
                  }, 
                  {
                    tag: #assign,
                    lhs: #rt,
                    rhs: 0,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 913
                  }, 
                  {
                    tag: #for,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 915,
                    cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #h},
                    then: {
                      tag: #block,
                      value: [
                        {
                          tag: #for,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 917,
                          cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: #w},
                          then: {
                            tag: #block,
                            value: [
                              {
                                tag: #assign,
                                lhs: #i1,
                                rhs: {tag: #binary, op: #"<<", lhs: #i, rhs: 1},
                                fn: "bstest/bs_decjpg.bs",
                                ln: 919
                              }, 
                              {
                                tag: #assign,
                                lhs: #j1,
                                rhs: {tag: #binary, op: #"<<", lhs: #j, rhs: 1},
                                fn: "bstest/bs_decjpg.bs",
                                ln: 920
                              }, 
                              {
                                tag: #assign,
                                lhs: #k,
                                rhs: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 0
                                    },
                                    rhs: {tag: #loadindex, lhs: #wi, rhs: 0}
                                  },
                                  rhs: {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #j1,
                                    rhs: 0
                                  }
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 920
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, #dbuf, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 0}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 922
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 924,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 925,
                                args: [#dbuf, #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 926,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 0}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 0}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 0}, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: 8,
                                    rhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #j1,
                                      rhs: 0
                                    }
                                  }, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 0
                                    },
                                    rhs: 8
                                  }],
                                func: #PDJPG_CopyOutBlock8B
                              }, 
                              {
                                tag: #assign,
                                lhs: #k,
                                rhs: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 0
                                    },
                                    rhs: {tag: #loadindex, lhs: #wi, rhs: 0}
                                  },
                                  rhs: {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #j1,
                                    rhs: 1
                                  }
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 929
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, #dbuf, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 0}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 931
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 933,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 934,
                                args: [#dbuf, #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 935,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 0}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 0}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 0}, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: 8,
                                    rhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #j1,
                                      rhs: 1
                                    }
                                  }, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 0
                                    },
                                    rhs: 8
                                  }],
                                func: #PDJPG_CopyOutBlock8B
                              }, 
                              {
                                tag: #assign,
                                lhs: #k,
                                rhs: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 1
                                    },
                                    rhs: {tag: #loadindex, lhs: #wi, rhs: 0}
                                  },
                                  rhs: {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #j1,
                                    rhs: 0
                                  }
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 938
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, #dbuf, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 0}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 940
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 942,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 943,
                                args: [#dbuf, #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 944,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 0}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 0}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 0}, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: 8,
                                    rhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #j1,
                                      rhs: 0
                                    }
                                  }, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 1
                                    },
                                    rhs: 8
                                  }],
                                func: #PDJPG_CopyOutBlock8B
                              }, 
                              {
                                tag: #assign,
                                lhs: #k,
                                rhs: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 1
                                    },
                                    rhs: {tag: #loadindex, lhs: #wi, rhs: 0}
                                  },
                                  rhs: {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #j1,
                                    rhs: 1
                                  }
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 947
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, #dbuf, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 0
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 0}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 949
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 951,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 952,
                                args: [#dbuf, #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 953,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 0}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 0}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 0}, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: 8,
                                    rhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #j1,
                                      rhs: 1
                                    }
                                  }, 
                                  {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #i1,
                                      rhs: 1
                                    },
                                    rhs: 8
                                  }],
                                func: #PDJPG_CopyOutBlock8B
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #dbuf,
                                      rhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: 1,
                                        rhs: 64
                                      }
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 1
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 1
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 1}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 956
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 959,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 960,
                                args: [
                                  {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #dbuf,
                                    rhs: {
                                      tag: #binary,
                                      op: #"*",
                                      lhs: 1,
                                      rhs: 64
                                    }
                                  }, 
                                  #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 961,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 1}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 1}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 1}, 
                                  {tag: #binary, op: #"*", lhs: #j, rhs: 8}, 
                                  {tag: #binary, op: #"*", lhs: #i, rhs: 8}],
                                func: #PDJPG_CopyOutBlock8B
                              }, 
                              {
                                tag: #assign,
                                lhs: #rt,
                                rhs: {
                                  tag: #call,
                                  args: [
                                    #ctx, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: #dbuf,
                                      rhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: 2,
                                        rhs: 64
                                      }
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cdt,
                                          rhs: 2
                                        },
                                        rhs: 2
                                      },
                                      rhs: 0
                                    }, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: {
                                          tag: #loadindex,
                                          lhs: #cat,
                                          rhs: 2
                                        },
                                        rhs: 2
                                      },
                                      rhs: 1
                                    }, 
                                    {tag: #loadindex, lhs: #qid, rhs: 2}, 
                                    {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #binary,
                                        op: #"*",
                                        lhs: #i,
                                        rhs: #w
                                      },
                                      rhs: #j
                                    }, 
                                    #n],
                                  func: #PDJHUFF_DecodeBlock
                                },
                                fn: "bstest/bs_decjpg.bs",
                                ln: 963
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 966,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 967,
                                args: [
                                  {
                                    tag: #binary,
                                    op: #"+",
                                    lhs: #dbuf,
                                    rhs: {
                                      tag: #binary,
                                      op: #"*",
                                      lhs: 2,
                                      rhs: 64
                                    }
                                  }, 
                                  #diblk, 128, #rt],
                                func: #PDJPG_TransIDCT
                              }, 
                              {
                                tag: #call,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 968,
                                args: [
                                  #ctx, #diblk, 
                                  {tag: #loadindex, lhs: #sibuf, rhs: 2}, 
                                  {tag: #loadindex, lhs: #xi, rhs: 2}, 
                                  {tag: #loadindex, lhs: #yi, rhs: 2}, 
                                  {tag: #binary, op: #"*", lhs: #j, rhs: 8}, 
                                  {tag: #binary, op: #"*", lhs: #i, rhs: 8}],
                                func: #PDJPG_CopyOutBlock8B
                              }]
                          },
                          init: {tag: #assign, lhs: #j, rhs: 0},
                          step: {tag: #postinc, value: #j}
                        }, 
                        {
                          tag: #if,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 971,
                          cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                          then: {tag: #break, value: 1}
                        }]
                    },
                    init: {tag: #assign, lhs: #i, rhs: 0},
                    step: {tag: #postinc, value: #i}
                  }]
              },
              else: {
                tag: #block,
                value: [
                  {
                    tag: #call,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 975,
                    args: "PDJPG_MarkerSOS: Generic\n",
                    func: #printf
                  }, 
                  {
                    tag: #assign,
                    lhs: #rt,
                    rhs: 0,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 976
                  }, 
                  {
                    tag: #for,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 978,
                    cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #n},
                    then: {
                      tag: #block,
                      value: [
                        {
                          tag: #for,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 980,
                          cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: #ns},
                          then: {
                            tag: #block,
                            value: [
                              {
                                tag: #for,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 982,
                                cond: {
                                  tag: #bincmp,
                                  op: #"<",
                                  lhs: #k,
                                  rhs: {tag: #loadindex, lhs: #cv, rhs: #j}
                                },
                                then: {
                                  tag: #block,
                                  value: [
                                    {
                                      tag: #for,
                                      fn: "bstest/bs_decjpg.bs",
                                      ln: 984,
                                      cond: {
                                        tag: #bincmp,
                                        op: #"<",
                                        lhs: #l,
                                        rhs: {
                                          tag: #loadindex,
                                          lhs: #ch,
                                          rhs: #j
                                        }
                                      },
                                      then: {
                                        tag: #block,
                                        value: [
                                          {
                                            tag: #if,
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 986,
                                            cond: {
                                              tag: #bincmp,
                                              op: #"<",
                                              lhs: #rt,
                                              rhs: 0
                                            },
                                            then: {tag: #break, value: 1}
                                          }, 
                                          {
                                            tag: #assign,
                                            lhs: #i1,
                                            rhs: {
                                              tag: #binary,
                                              op: #"*",
                                              lhs: {
                                                tag: #binary,
                                                op: #"/",
                                                lhs: #i,
                                                rhs: {
                                                  tag: #binary,
                                                  op: #"/",
                                                  lhs: {
                                                    tag: #loadindex,
                                                    lhs: #wi,
                                                    rhs: #j
                                                  },
                                                  rhs: {
                                                    tag: #loadindex,
                                                    lhs: #ch,
                                                    rhs: #j
                                                  }
                                                }
                                              },
                                              rhs: {
                                                tag: #loadindex,
                                                lhs: #ch,
                                                rhs: #j
                                              }
                                            },
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 987
                                          }, 
                                          {
                                            tag: #assign,
                                            lhs: #j1,
                                            rhs: {
                                              tag: #binary,
                                              op: #"*",
                                              lhs: {
                                                tag: #binary,
                                                op: #"%",
                                                lhs: #i,
                                                rhs: {
                                                  tag: #binary,
                                                  op: #"/",
                                                  lhs: {
                                                    tag: #loadindex,
                                                    lhs: #wi,
                                                    rhs: #j
                                                  },
                                                  rhs: {
                                                    tag: #loadindex,
                                                    lhs: #ch,
                                                    rhs: #j
                                                  }
                                                }
                                              },
                                              rhs: {
                                                tag: #loadindex,
                                                lhs: #ch,
                                                rhs: #j
                                              }
                                            },
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 989
                                          }, 
                                          {
                                            tag: #assign,
                                            lhs: #rt,
                                            rhs: {
                                              tag: #call,
                                              args: [
                                                #ctx, 
                                                {
                                                  tag: #binary,
                                                  op: #"+",
                                                  lhs: #dbuf,
                                                  rhs: {
                                                    tag: #binary,
                                                    op: #"*",
                                                    lhs: #j,
                                                    rhs: 64
                                                  }
                                                }, 
                                                {
                                                  tag: #binary,
                                                  op: #"+",
                                                  lhs: {
                                                    tag: #binary,
                                                    op: #"*",
                                                    lhs: {
                                                      tag: #loadindex,
                                                      lhs: #cdt,
                                                      rhs: #j
                                                    },
                                                    rhs: 2
                                                  },
                                                  rhs: 0
                                                }, 
                                                {
                                                  tag: #binary,
                                                  op: #"+",
                                                  lhs: {
                                                    tag: #binary,
                                                    op: #"*",
                                                    lhs: {
                                                      tag: #loadindex,
                                                      lhs: #cat,
                                                      rhs: #j
                                                    },
                                                    rhs: 2
                                                  },
                                                  rhs: 1
                                                }, 
                                                {
                                                  tag: #loadindex,
                                                  lhs: #qid,
                                                  rhs: #j
                                                }, 
                                                #i, #n],
                                              func: #PDJHUFF_DecodeBlock
                                            },
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 990
                                          }, 
                                          {
                                            tag: #if,
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 993,
                                            cond: {
                                              tag: #bincmp,
                                              op: #"<",
                                              lhs: #rt,
                                              rhs: 0
                                            },
                                            then: {tag: #break, value: 1}
                                          }, 
                                          {
                                            tag: #call,
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 994,
                                            args: [
                                              {
                                                tag: #binary,
                                                op: #"+",
                                                lhs: #dbuf,
                                                rhs: {
                                                  tag: #binary,
                                                  op: #"*",
                                                  lhs: #j,
                                                  rhs: 64
                                                }
                                              }, 
                                              #diblk, 128, #rt],
                                            func: #PDJPG_TransIDCT
                                          }, 
                                          {
                                            tag: #call,
                                            fn: "bstest/bs_decjpg.bs",
                                            ln: 996,
                                            args: [
                                              #ctx, #diblk, 
                                              {
                                                tag: #loadindex,
                                                lhs: #sibuf,
                                                rhs: #j
                                              }, 
                                              {
                                                tag: #loadindex,
                                                lhs: #xi,
                                                rhs: #j
                                              }, 
                                              {
                                                tag: #loadindex,
                                                lhs: #yi,
                                                rhs: #j
                                              }, 
                                              {
                                                tag: #binary,
                                                op: #"*",
                                                lhs: 8,
                                                rhs: {
                                                  tag: #binary,
                                                  op: #"+",
                                                  lhs: #j1,
                                                  rhs: #l
                                                }
                                              }, 
                                              {
                                                tag: #binary,
                                                op: #"*",
                                                lhs: {
                                                  tag: #binary,
                                                  op: #"+",
                                                  lhs: #i1,
                                                  rhs: #k
                                                },
                                                rhs: 8
                                              }],
                                            func: #PDJPG_CopyOutBlock8B
                                          }]
                                      },
                                      init: {tag: #assign, lhs: #l, rhs: 0},
                                      step: {tag: #postinc, value: #l}
                                    }, 
                                    {
                                      tag: #if,
                                      fn: "bstest/bs_decjpg.bs",
                                      ln: 1000,
                                      cond: {
                                        tag: #bincmp,
                                        op: #"<",
                                        lhs: #rt,
                                        rhs: 0
                                      },
                                      then: {tag: #break, value: 1}
                                    }]
                                },
                                init: {tag: #assign, lhs: #k, rhs: 0},
                                step: {tag: #postinc, value: #k}
                              }, 
                              {
                                tag: #if,
                                fn: "bstest/bs_decjpg.bs",
                                ln: 1002,
                                cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                                then: {tag: #break, value: 1}
                              }]
                          },
                          init: {tag: #assign, lhs: #j, rhs: 0},
                          step: {tag: #postinc, value: #j}
                        }, 
                        {
                          tag: #if,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 1004,
                          cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
                          then: {tag: #break, value: 1}
                        }]
                    },
                    init: {tag: #assign, lhs: #i, rhs: 0},
                    step: {tag: #postinc, value: #i}
                  }]
              }
            }
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1007,
            args: "PDJPG_MarkerSOS: Img Dec\n",
            func: #printf
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1009,
            cond: {tag: #bincmp, op: #"<", lhs: #rt, rhs: 0},
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1012,
                  args: "PDJPG_MarkerSOS: Bad Image\n",
                  func: #printf
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1013,
                  value: -1
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"-",
              lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_cs},
              rhs: #buf
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1015
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1017, value: #i}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerSOF0,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 295,
      fn: "bstest/bs_decjpg.bs",
      ln: 1019,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1022,
            value: [
              {
                tag: #var,
                name: #cnt,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #s,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1023,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #m, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1024
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 3},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 4}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1026
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 5},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 6}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1028
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #xs},
            rhs: #j,
            fn: "bstest/bs_decjpg.bs",
            ln: 1029
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #ys},
            rhs: #i,
            fn: "bstest/bs_decjpg.bs",
            ln: 1031
          }, 
          {
            tag: #assign,
            lhs: #m,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1032
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1034
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {tag: #loadindex, lhs: #buf, rhs: 7},
            fn: "bstest/bs_decjpg.bs",
            ln: 1034
          }, 
          {
            tag: #assign,
            lhs: #s,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: 8},
            fn: "bstest/bs_decjpg.bs",
            ln: 1036
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1037,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #k},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cid},
                    rhs: #i
                  },
                  rhs: {tag: #loadindex, lhs: #s, rhs: 0},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1039
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #">>",
                    lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                    rhs: 4
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1040
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {tag: #loadindex, lhs: #s, rhs: 1},
                    rhs: 15
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1041
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_qid},
                    rhs: #i
                  },
                  rhs: {tag: #loadindex, lhs: #s, rhs: 2},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1042
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1043,
                  cond: {
                    tag: #bincmp,
                    op: #">",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                      rhs: #i
                    },
                    rhs: #m
                  },
                  then: {
                    tag: #assign,
                    lhs: #m,
                    rhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                      rhs: #i
                    }
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1045,
                  cond: {
                    tag: #bincmp,
                    op: #">",
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                      rhs: #i
                    },
                    rhs: #n
                  },
                  then: {
                    tag: #assign,
                    lhs: #n,
                    rhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                      rhs: #i
                    }
                  }
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #s,
                  rhs: 3,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1046
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chm},
            rhs: #m,
            fn: "bstest/bs_decjpg.bs",
            ln: 1048
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_chn},
            rhs: #n,
            fn: "bstest/bs_decjpg.bs",
            ln: 1050
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1051,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #k},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cxi},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"*",
                      lhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_ch},
                        rhs: #i
                      },
                      rhs: {tag: #loadslot, lhs: #ctx, rhs: #xs}
                    },
                    rhs: #m
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1054
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cyi},
                    rhs: #i
                  },
                  rhs: {
                    tag: #binary,
                    op: #"/",
                    lhs: {
                      tag: #binary,
                      op: #"*",
                      lhs: {
                        tag: #loadindex,
                        lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_cv},
                        rhs: #i
                      },
                      rhs: {tag: #loadslot, lhs: #ctx, rhs: #ys}
                    },
                    rhs: #n
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1055
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_nc},
            rhs: #k,
            fn: "bstest/bs_decjpg.bs",
            ln: 1057
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1058, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerDQT,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 132,
      fn: "bstest/bs_decjpg.bs",
      ln: 1061,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1064,
            value: [
              {
                tag: #var,
                name: #s,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #se,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1065,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1066
          }, 
          {
            tag: #assign,
            lhs: #s,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: 2},
            fn: "bstest/bs_decjpg.bs",
            ln: 1068
          }, 
          {
            tag: #assign,
            lhs: #se,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #l},
            fn: "bstest/bs_decjpg.bs",
            ln: 1070
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1071,
            cond: {tag: #bincmp, op: #"<", lhs: #s, rhs: #se},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {
                      tag: #binary,
                      op: #">>",
                      lhs: {tag: #loadindex, lhs: #s, rhs: 0},
                      rhs: 4
                    },
                    rhs: 15
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1074
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1075,
                  cond: #i,
                  then: {
                    tag: #return,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 1077,
                    value: -1
                  }
                }, 
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: {
                    tag: #binary,
                    op: #"&",
                    lhs: {tag: #loadindex, lhs: #s, rhs: 0},
                    rhs: 15
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1077
                }, 
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1078,
                  cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: 64},
                  then: {
                    tag: #assign,
                    lhs: {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_qt},
                      rhs: {
                        tag: #binary,
                        op: #"+",
                        lhs: {tag: #binary, op: #"*", lhs: #i, rhs: 64},
                        rhs: {tag: #loadindex, lhs: #pdjpg_zigzag2, rhs: #j}
                      }
                    },
                    rhs: {
                      tag: #loadindex,
                      lhs: #s,
                      rhs: {tag: #binary, op: #"+", lhs: #j, rhs: 1}
                    }
                  },
                  init: {tag: #assign, lhs: #j, rhs: 0},
                  step: {tag: #postinc, value: #j}
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #s,
                  rhs: 65,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1080
                }]
            }
          }, 
          {
            tag: #return,
            fn: "bstest/bs_decjpg.bs",
            ln: 1082,
            value: {tag: #binary, op: #"-", lhs: #s, rhs: #buf}
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerDHT,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 471,
      fn: "bstest/bs_decjpg.bs",
      ln: 1085,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1088,
            value: [
              {
                tag: #var,
                name: #cnt,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #s,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1089,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #tn, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"<<",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                rhs: 8
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1090
          }, 
          {
            tag: #assign,
            lhs: #j,
            rhs: {
              tag: #binary,
              op: #"&",
              lhs: {
                tag: #binary,
                op: #">>",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 2},
                rhs: 4
              },
              rhs: 15
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1092
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"&",
              lhs: {tag: #loadindex, lhs: #buf, rhs: 2},
              rhs: 15
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1094
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1095,
            args: ["dest %d, type %d\n", #i, #j],
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #tn,
            rhs: {
              tag: #binary,
              op: #"+",
              lhs: {tag: #binary, op: #"*", lhs: #i, rhs: 2},
              rhs: #j
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1096
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1098,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 256},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_len},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  rhs: 0,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1101
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_next},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  rhs: -1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1102
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  rhs: -1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1103
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #assign,
            lhs: #cnt,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: 3},
            fn: "bstest/bs_decjpg.bs",
            ln: 1105
          }, 
          {
            tag: #assign,
            lhs: #s,
            rhs: {tag: #binary, op: #"+", lhs: #cnt, rhs: 16},
            fn: "bstest/bs_decjpg.bs",
            ln: 1107
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1108
          }, 
          {
            tag: #assign,
            lhs: #l,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1109
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1109,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 16},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assignop,
                  op: #"<<",
                  lhs: #k,
                  rhs: 1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1111
                }, 
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1112,
                  cond: {
                    tag: #bincmp,
                    op: #"<",
                    lhs: #j,
                    rhs: {tag: #loadindex, lhs: #cnt, rhs: #i}
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_code},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: {tag: #unary, op: #"*", value: #s}
                          }
                        },
                        rhs: {tag: #postinc, value: #k},
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1114
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_len},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: {tag: #unary, op: #"*", value: #s}
                          }
                        },
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1},
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1115
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_mask},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: {tag: #unary, op: #"*", value: #s}
                          }
                        },
                        rhs: {
                          tag: #binary,
                          op: #"-",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: 1,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                          },
                          rhs: 1
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1116
                      }, 
                      {
                        tag: #assign,
                        lhs: #l,
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1},
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1117
                      }, 
                      {
                        tag: #postinc,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1118,
                        value: #s
                      }]
                  },
                  init: {tag: #assign, lhs: #j, rhs: 0},
                  step: {tag: #postinc, value: #j}
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1121,
            args: ["%04X %d\n", #k, #l],
            func: #printf
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1122,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 256},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_next},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  rhs: -1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1137
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  rhs: -1,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1138
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1140,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: 256},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #l,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_len},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1143
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1144,
                  cond: {tag: #unary, op: #"!", value: #l},
                  then: {tag: #continue, value: 0}
                }, 
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_code},
                    rhs: {
                      tag: #binary,
                      op: #"+",
                      lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                      rhs: #i
                    }
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1145
                }, 
                {
                  tag: #ifelse,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1146,
                  cond: {tag: #bincmp, op: #"<=", lhs: #l, rhs: 8},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #binary,
                          op: #"<<",
                          lhs: #j,
                          rhs: {tag: #binary, op: #"-", lhs: 8, rhs: #l}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1149
                      }, 
                      {
                        tag: #assign,
                        lhs: #k,
                        rhs: {
                          tag: #binary,
                          op: #"<<",
                          lhs: 1,
                          rhs: {tag: #binary, op: #"-", lhs: 8, rhs: #l}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1150
                      }, 
                      {
                        tag: #while,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1151,
                        cond: {
                          tag: #binary,
                          op: #"&&",
                          lhs: {tag: #postdec, value: #k},
                          rhs: {tag: #bincmp, op: #"<", lhs: #j, rhs: 256}
                        },
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #assign,
                              lhs: {
                                tag: #loadindex,
                                lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
                                rhs: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: {
                                    tag: #binary,
                                    op: #"*",
                                    lhs: #tn,
                                    rhs: 256
                                  },
                                  rhs: #j
                                }
                              },
                              rhs: #i,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1153
                            }, 
                            {
                              tag: #postinc,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1154,
                              value: #j
                            }]
                        }
                      }]
                  },
                  else: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #binary,
                          op: #">>",
                          lhs: #j,
                          rhs: {tag: #binary, op: #"-", lhs: #l, rhs: 8}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1158
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_next},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: #i
                          }
                        },
                        rhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: #j
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1159
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #loadindex,
                          lhs: {tag: #loadslot, lhs: #ctx, rhs: #huff_idx},
                          rhs: {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"*", lhs: #tn, rhs: 256},
                            rhs: #j
                          }
                        },
                        rhs: #i,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1161
                      }]
                  }
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #return,
            fn: "bstest/bs_decjpg.bs",
            ln: 1164,
            value: {tag: #binary, op: #"-", lhs: #s, rhs: #buf}
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPP0,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 7,
      fn: "bstest/bs_decjpg.bs",
      ln: 1167,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1170, value: 0}
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPP9,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 10,
      fn: "bstest/bs_decjpg.bs",
      ln: 1172,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1175
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1176, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPP11,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 20,
      fn: "bstest/bs_decjpg.bs",
      ln: 1179,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1182,
            value: [
              {tag: #var, name: #cr, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cg, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cb, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #ca, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: #buf,
            rhs: 2,
            fn: "bstest/bs_decjpg.bs",
            ln: 1183
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1185, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPP12,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 48,
      fn: "bstest/bs_decjpg.bs",
      ln: 1187,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1190
          }, 
          {
            tag: #assignop,
            op: #"+",
            lhs: #buf,
            rhs: 2,
            fn: "bstest/bs_decjpg.bs",
            ln: 1191
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #binary,
              op: #"|",
              lhs: {
                tag: #binary,
                op: #"|",
                lhs: {
                  tag: #binary,
                  op: #"|",
                  lhs: {
                    tag: #binary,
                    op: #"<<",
                    lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                    rhs: 24
                  },
                  rhs: {
                    tag: #binary,
                    op: #"<<",
                    lhs: {tag: #loadindex, lhs: #buf, rhs: 1},
                    rhs: 16
                  }
                },
                rhs: {
                  tag: #binary,
                  op: #"<<",
                  lhs: {tag: #loadindex, lhs: #buf, rhs: 2},
                  rhs: 8
                }
              },
              rhs: {tag: #loadindex, lhs: #buf, rhs: 3}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1192
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1194, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPP14,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 11,
      fn: "bstest/bs_decjpg.bs",
      ln: 1197,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #assignop,
            op: #"+",
            lhs: #buf,
            rhs: 2,
            fn: "bstest/bs_decjpg.bs",
            ln: 1200
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1201, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_MarkerAPPN,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 7,
      fn: "bstest/bs_decjpg.bs",
      ln: 1204,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1207, value: 0}
    }, 
    {
      tag: #func,
      name: #PDJPG_DecodeCtxInner,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 570,
      fn: "bstest/bs_decjpg.bs",
      ln: 1209,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1213,
            value: [
              {
                tag: #var,
                name: #obuf,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1214,
            value: [
              {tag: #var, name: #y, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #u, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #v, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #r, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #g, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #a, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #u1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #v1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1215,
            value: [
              {tag: #var, name: #y0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #y1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #y2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #y3, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1216,
            value: [
              {tag: #var, name: #r0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #g0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #a0, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1217,
            value: [
              {tag: #var, name: #r1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #g1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #a1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1218,
            value: [
              {tag: #var, name: #r2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #g2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #a2, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1219,
            value: [
              {tag: #var, name: #r3, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #g3, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #b3, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #a3, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1220,
            value: [
              {tag: #var, name: #l0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l3, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1221,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #l, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1222,
            cond: {
              tag: #binary,
              op: #"||",
              lhs: {
                tag: #bincmp,
                op: #"!=",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                rhs: 255
              },
              rhs: {
                tag: #bincmp,
                op: #"!=",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 1},
                rhs: #JPG_SOI
              }
            },
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1225
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_rdct},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1227
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1228,
            args: "PDJPG_DecodeCtxInner: Enter\n",
            func: #printf
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1230,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #sz},
            then: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1233,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {tag: #loadindex, lhs: #buf, rhs: #i},
                    rhs: 255
                  },
                  then: {tag: #continue, value: 0}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1238,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: 0
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #postinc,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1241,
                        value: #i
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1241,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1241,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: 255
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #postinc,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1243,
                        value: #i
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1243,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1243,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_SOI
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #postinc,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1246,
                        value: #i
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1246,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {
                    tag: #binary,
                    op: #"-",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: 192
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1246
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1248,
                  cond: {tag: #bincmp, op: #"<", lhs: #j, rhs: 0},
                  then: {tag: #assign, lhs: #j, rhs: 63}
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1249,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_DQT
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1252,
                        args: "PDJPG_DecodeCtxInner: DQT\n",
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1253,
                        args: [
                          #ctx, 
                          {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                            rhs: 2
                          }],
                        func: #PDJPG_MarkerDQT
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1255,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_DHT
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1257,
                        args: "PDJPG_DecodeCtxInner: DHT\n",
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1258,
                        args: [
                          #ctx, 
                          {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                            rhs: 2
                          }],
                        func: #PDJPG_MarkerDHT
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1260,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_SOF0
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1262,
                        args: "PDJPG_DecodeCtxInner: SOF0\n",
                        func: #printf
                      }, 
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1263,
                        args: [
                          #ctx, 
                          {
                            tag: #binary,
                            op: #"+",
                            lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                            rhs: 2
                          }],
                        func: #PDJPG_MarkerSOF0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1265,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_SOS
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1267,
                        args: "PDJPG_DecodeCtxInner: SOS\n",
                        func: #printf
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #call,
                          args: [
                            #ctx, 
                            {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                              rhs: 2
                            }],
                          func: #PDJPG_MarkerSOS
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1268
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1270,
                        cond: {tag: #bincmp, op: #">", lhs: #j, rhs: 0},
                        then: {
                          tag: #assignop,
                          op: #"+",
                          lhs: #i,
                          rhs: #j,
                          fn: "bstest/bs_decjpg.bs",
                          ln: 1271
                        }
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1271,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1273,
                  cond: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #bincmp,
                      op: #">=",
                      lhs: {
                        tag: #loadindex,
                        lhs: #buf,
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                      },
                      rhs: #JPG_APP0
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"<=",
                      lhs: {
                        tag: #loadindex,
                        lhs: #buf,
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                      },
                      rhs: #JPG_APP15
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #call,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1276,
                        args: [
                          "PDJPG_DecodeCtxInner: APP%d\n", 
                          {
                            tag: #binary,
                            op: #"-",
                            lhs: {
                              tag: #loadindex,
                              lhs: #buf,
                              rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                            },
                            rhs: #JPG_APP0
                          }],
                        func: #printf
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1278,
                        cond: {
                          tag: #bincmp,
                          op: #"==",
                          lhs: {
                            tag: #loadindex,
                            lhs: #buf,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                          },
                          rhs: #JPG_APP0
                        },
                        then: {
                          tag: #call,
                          args: [
                            #ctx, 
                            {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                              rhs: 2
                            }],
                          func: #PDJPG_MarkerAPP0
                        }
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1280,
                        cond: {
                          tag: #bincmp,
                          op: #"==",
                          lhs: {
                            tag: #loadindex,
                            lhs: #buf,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                          },
                          rhs: #JPG_APP11
                        },
                        then: {
                          tag: #call,
                          args: [
                            #ctx, 
                            {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                              rhs: 2
                            }],
                          func: #PDJPG_MarkerAPP11
                        }
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1281,
                        cond: {
                          tag: #bincmp,
                          op: #"==",
                          lhs: {
                            tag: #loadindex,
                            lhs: #buf,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                          },
                          rhs: #JPG_APP12
                        },
                        then: {
                          tag: #call,
                          args: [
                            #ctx, 
                            {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                              rhs: 2
                            }],
                          func: #PDJPG_MarkerAPP12
                        }
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1282,
                        cond: {
                          tag: #bincmp,
                          op: #"==",
                          lhs: {
                            tag: #loadindex,
                            lhs: #buf,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                          },
                          rhs: #JPG_APP14
                        },
                        then: {
                          tag: #call,
                          args: [
                            #ctx, 
                            {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #i},
                              rhs: 2
                            }],
                          func: #PDJPG_MarkerAPP14
                        }
                      }, 
                      {
                        tag: #assign,
                        lhs: #j,
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: {
                              tag: #loadindex,
                              lhs: #buf,
                              rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 2}
                            },
                            rhs: 8
                          },
                          rhs: {
                            tag: #loadindex,
                            lhs: #buf,
                            rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 3}
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1283
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #i,
                        rhs: #j,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1286
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1287,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1289,
                  cond: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {
                      tag: #loadindex,
                      lhs: #buf,
                      rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 1}
                    },
                    rhs: #JPG_EOI
                  },
                  then: {tag: #break, value: 1}
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1292,
            args: "PDJPG_DecodeCtxInner: Exit\n",
            func: #printf
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1294,
            args: [
              "Sz=%d x %d\n", {tag: #loadslot, lhs: #ctx, rhs: #xs}, 
              {tag: #loadslot, lhs: #ctx, rhs: #ys}],
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: {tag: #unary, op: #"*", value: #xs},
            rhs: {tag: #loadslot, lhs: #ctx, rhs: #xs},
            fn: "bstest/bs_decjpg.bs",
            ln: 1295
          }, 
          {
            tag: #assign,
            lhs: {tag: #unary, op: #"*", value: #ys},
            rhs: {tag: #loadslot, lhs: #ctx, rhs: #ys},
            fn: "bstest/bs_decjpg.bs",
            ln: 1297
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1298, value: 0}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_GetImageYUVA420,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 150,
      fn: "bstest/bs_decjpg.bs",
      ln: 1300,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {
          tag: #var,
          name: #ybuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {
          tag: #var,
          name: #ubuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {
          tag: #var,
          name: #vbuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {
          tag: #var,
          name: #abuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1305,
            cond: {
              tag: #binary,
              op: #"||",
              lhs: {
                tag: #bincmp,
                op: #"!=",
                lhs: #xs,
                rhs: {tag: #loadslot, lhs: #ctx, rhs: #xs}
              },
              rhs: {
                tag: #bincmp,
                op: #"!=",
                lhs: #ys,
                rhs: {tag: #loadslot, lhs: #ctx, rhs: #ys}
              }
            },
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1307,
            cond: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1310,
                  args: [
                    #ybuf, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: 0
                    }, 
                    {tag: #binary, op: #"*", lhs: #xs, rhs: #ys}],
                  func: #memcpy
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1311,
                  args: [
                    #ubuf, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: 1
                    }, 
                    {
                      tag: #binary,
                      op: #"*",
                      lhs: {tag: #binary, op: #">>", lhs: #xs, rhs: 1},
                      rhs: {tag: #binary, op: #">>", lhs: #ys, rhs: 1}
                    }],
                  func: #memcpy
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1312,
                  args: [
                    #vbuf, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: 2
                    }, 
                    {
                      tag: #binary,
                      op: #"*",
                      lhs: {tag: #binary, op: #">>", lhs: #xs, rhs: 1},
                      rhs: {tag: #binary, op: #">>", lhs: #ys, rhs: 1}
                    }],
                  func: #memcpy
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1313,
                  cond: #abuf,
                  then: {
                    tag: #ifelse,
                    fn: "bstest/bs_decjpg.bs",
                    ln: 1315,
                    cond: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf},
                    then: {
                      tag: #call,
                      fn: "bstest/bs_decjpg.bs",
                      ln: 1317,
                      args: [
                        #abuf, {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf}, 
                        {tag: #binary, op: #"*", lhs: #xs, rhs: #ys}],
                      func: #memcpy
                    },
                    else: {
                      tag: #call,
                      fn: "bstest/bs_decjpg.bs",
                      ln: 1319,
                      args: [
                        #abuf, 255, 
                        {tag: #binary, op: #"*", lhs: #xs, rhs: #ys}],
                      func: #memset
                    }
                  }
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1320,
                  value: 0
                }]
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1322, value: -1}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_GetImagePlaneYUVA420,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 56,
      fn: "bstest/bs_decjpg.bs",
      ln: 1325,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {
          tag: #var,
          name: #yuva,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1329,
            value: [
              {tag: #var, name: #n0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #n0,
            rhs: {tag: #binary, op: #"*", lhs: #xs, rhs: #ys},
            fn: "bstest/bs_decjpg.bs",
            ln: 1330
          }, 
          {
            tag: #assign,
            lhs: #n1,
            rhs: {
              tag: #binary,
              op: #"*",
              lhs: {tag: #binary, op: #">>", lhs: #xs, rhs: 1},
              rhs: {tag: #binary, op: #">>", lhs: #ys, rhs: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1332
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1333,
            args: [
              #ctx, #yuva, {tag: #binary, op: #"+", lhs: #yuva, rhs: #n0}, 
              {
                tag: #binary,
                op: #"+",
                lhs: {tag: #binary, op: #"+", lhs: #yuva, rhs: #n0},
                rhs: #n1
              }, 
              {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {tag: #binary, op: #"+", lhs: #yuva, rhs: #n0},
                  rhs: #n1
                },
                rhs: #n1
              }, 
              #xs, #ys],
            func: #PDJPG_GetImageYUVA420
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_GetImageRGBA,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 475,
      fn: "bstest/bs_decjpg.bs",
      ln: 1336,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {
          tag: #var,
          name: #rgba,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1340,
            value: [
              {
                tag: #var,
                name: #ybuf,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ubuf,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #vbuf,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1341,
            value: [
              {
                tag: #var,
                name: #csy0,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #csy1,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #csu,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #csv,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1342,
            value: [
              {
                tag: #var,
                name: #ct0,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct1,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1343,
            value: [
              {tag: #var, name: #cy0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cy1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cy2, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cy3, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1344,
            value: [
              {tag: #var, name: #cu, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #cv, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1345,
            value: [
              {tag: #var, name: #lru, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #lrv, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1346,
            value: [
              {tag: #var, name: #x, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #y, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #y1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #xs1, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #ys1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1347,
            value: [
              {tag: #var, name: #n0, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1348,
            cond: {tag: #loadslot, lhs: #ctx, rhs: #jpg_is420},
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1351,
                  args: "PDJPG_GetImageRGBA: Is 420\n",
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: #ybuf,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                    rhs: 0
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1352
                }, 
                {
                  tag: #assign,
                  lhs: #ubuf,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                    rhs: 1
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1354
                }, 
                {
                  tag: #assign,
                  lhs: #vbuf,
                  rhs: {
                    tag: #loadindex,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                    rhs: 2
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1355
                }, 
                {
                  tag: #assign,
                  lhs: #xs1,
                  rhs: {tag: #binary, op: #">>", lhs: #xs, rhs: 1},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1356
                }, 
                {
                  tag: #assign,
                  lhs: #ys1,
                  rhs: {tag: #binary, op: #">>", lhs: #ys, rhs: 1},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1358
                }, 
                {
                  tag: #for,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1358,
                  cond: {tag: #bincmp, op: #"<", lhs: #y, rhs: #ys1},
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #y1,
                        rhs: {
                          tag: #binary,
                          op: #"-",
                          lhs: {tag: #binary, op: #"-", lhs: #ys1, rhs: #y},
                          rhs: 1
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1360
                      }, 
                      {
                        tag: #assign,
                        lhs: #csy1,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #ybuf,
                          rhs: {
                            tag: #binary,
                            op: #"*",
                            lhs: {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"*", lhs: #y1, rhs: 2},
                              rhs: 0
                            },
                            rhs: #xs
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1361
                      }, 
                      {
                        tag: #assign,
                        lhs: #csy0,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #ybuf,
                          rhs: {
                            tag: #binary,
                            op: #"*",
                            lhs: {
                              tag: #binary,
                              op: #"+",
                              lhs: {tag: #binary, op: #"*", lhs: #y1, rhs: 2},
                              rhs: 1
                            },
                            rhs: #xs
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1362
                      }, 
                      {
                        tag: #assign,
                        lhs: #csu,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #ubuf,
                          rhs: {tag: #binary, op: #"*", lhs: #y1, rhs: #xs1}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1363
                      }, 
                      {
                        tag: #assign,
                        lhs: #csv,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #vbuf,
                          rhs: {tag: #binary, op: #"*", lhs: #y1, rhs: #xs1}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1364
                      }, 
                      {
                        tag: #assign,
                        lhs: #ct0,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #rgba,
                          rhs: {
                            tag: #binary,
                            op: #"*",
                            lhs: {
                              tag: #binary,
                              op: #"*",
                              lhs: {
                                tag: #binary,
                                op: #"+",
                                lhs: {tag: #binary, op: #"*", lhs: #y, rhs: 2},
                                rhs: 0
                              },
                              rhs: #xs
                            },
                            rhs: 4
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1365
                      }, 
                      {
                        tag: #assign,
                        lhs: #ct1,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: #rgba,
                          rhs: {
                            tag: #binary,
                            op: #"*",
                            lhs: {
                              tag: #binary,
                              op: #"*",
                              lhs: {
                                tag: #binary,
                                op: #"+",
                                lhs: {tag: #binary, op: #"*", lhs: #y, rhs: 2},
                                rhs: 1
                              },
                              rhs: #xs
                            },
                            rhs: 4
                          }
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1367
                      }, 
                      {
                        tag: #for,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1368,
                        cond: {tag: #bincmp, op: #"<", lhs: #x, rhs: #xs1},
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #assign,
                              lhs: #cy0,
                              rhs: {tag: #loadindex, lhs: #csy0, rhs: 0},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1371
                            }, 
                            {
                              tag: #assign,
                              lhs: #cy1,
                              rhs: {tag: #loadindex, lhs: #csy0, rhs: 1},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1372
                            }, 
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #csy0,
                              rhs: 2,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1372
                            }, 
                            {
                              tag: #assign,
                              lhs: #cy2,
                              rhs: {tag: #loadindex, lhs: #csy1, rhs: 0},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1372
                            }, 
                            {
                              tag: #assign,
                              lhs: #cy3,
                              rhs: {tag: #loadindex, lhs: #csy1, rhs: 1},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1373
                            }, 
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #csy1,
                              rhs: 2,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1373
                            }, 
                            {
                              tag: #assign,
                              lhs: #cu,
                              rhs: {
                                tag: #unary,
                                op: #"*",
                                value: {tag: #postinc, value: #csu}
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1373
                            }, 
                            {
                              tag: #assign,
                              lhs: #cv,
                              rhs: {
                                tag: #unary,
                                op: #"*",
                                value: {tag: #postinc, value: #csv}
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1374
                            }, 
                            {
                              tag: #assign,
                              lhs: #lru,
                              rhs: {tag: #binary, op: #"-", lhs: #cu, rhs: 128},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1374
                            }, 
                            {
                              tag: #assign,
                              lhs: #lrv,
                              rhs: {tag: #binary, op: #"-", lhs: #cv, rhs: 128},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1375
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 0},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy0,
                                  rhs: #lrv
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1375
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 1},
                              rhs: {tag: #call, args: #cy0, func: #clamp255},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1377
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 2},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy0,
                                  rhs: #lru
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1377
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 3},
                              rhs: 255,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1378
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 4},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy1,
                                  rhs: #lrv
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1378
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 5},
                              rhs: {tag: #call, args: #cy1, func: #clamp255},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1379
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 6},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy1,
                                  rhs: #lru
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1379
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct0, rhs: 7},
                              rhs: 255,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1380
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 0},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy2,
                                  rhs: #lrv
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1380
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 1},
                              rhs: {tag: #call, args: #cy2, func: #clamp255},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1382
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 2},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy2,
                                  rhs: #lru
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1382
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 3},
                              rhs: 255,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1383
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 4},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy3,
                                  rhs: #lrv
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1383
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 5},
                              rhs: {tag: #call, args: #cy3, func: #clamp255},
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1384
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 6},
                              rhs: {
                                tag: #call,
                                args: {
                                  tag: #binary,
                                  op: #"+",
                                  lhs: #cy3,
                                  rhs: #lru
                                },
                                func: #clamp255
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1384
                            }, 
                            {
                              tag: #assign,
                              lhs: {tag: #loadindex, lhs: #ct1, rhs: 7},
                              rhs: 255,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1385
                            }, 
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #ct0,
                              rhs: 8,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1385
                            }, 
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #ct1,
                              rhs: 8,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1387
                            }]
                        },
                        init: {tag: #assign, lhs: #x, rhs: 0},
                        step: {tag: #postinc, value: #x}
                      }]
                  },
                  init: {tag: #assign, lhs: #y, rhs: 0},
                  step: {tag: #postinc, value: #y}
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1390,
                  value: 0
                }]
            }
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1393,
            args: "PDJPG_GetImageRGBA: Not 420\n",
            func: #printf
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1395, value: -1}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_Free,
      type: {tag: #type, name: #void},
      modi: 1,
      tokcnt: 2,
      fn: "bstest/bs_decjpg.bs",
      ln: 1397,
      args: [{tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}],
      body: {tag: #empty_block}
    }, 
    {
      tag: #func,
      name: #PDJPG_DecodeScanForComponentLayer,
      type: {tag: #type, name: #byte, ptrlvl: 1},
      modi: 1,
      tokcnt: 279,
      fn: "bstest/bs_decjpg.bs",
      ln: 1404,
      args: [
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #name, type: {tag: #type, name: #string}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1408,
            value: [
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cs2,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cse,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #var,
            name: #i,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1409
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1410,
            args: "PDJPG_DecodeScanForComponentLayer: Enter\n",
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1412
          }, 
          {
            tag: #assign,
            lhs: #cse,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1414
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1414,
            cond: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
            then: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1416,
                  cond: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {tag: #unary, op: #"*", value: #cs},
                    rhs: 255
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #while,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1420,
                        cond: {
                          tag: #binary,
                          op: #"&&",
                          lhs: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
                          rhs: {
                            tag: #bincmp,
                            op: #"!=",
                            lhs: {tag: #unary, op: #"*", value: #cs},
                            rhs: 255
                          }
                        },
                        then: {tag: #postinc, value: #cs}
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1422,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1424,
                  cond: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                      rhs: 255
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                      rhs: #JPG_APP11
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: {tag: #loadindex, lhs: #cs, rhs: 2},
                            rhs: 8
                          },
                          rhs: {tag: #loadindex, lhs: #cs, rhs: 3}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1429
                      }, 
                      {
                        tag: #assign,
                        lhs: #cs2,
                        rhs: {
                          tag: #binary,
                          op: #"+",
                          lhs: {tag: #binary, op: #"+", lhs: #cs, rhs: #i},
                          rhs: 2
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1430
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #cs,
                        rhs: 4,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1431
                      }, 
                      {
                        tag: #if,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1433,
                        cond: {
                          tag: #unary,
                          op: #"!",
                          value: {
                            tag: #call,
                            args: [
                              {
                                tag: #prefix_cast,
                                lhs: #cs,
                                rhs: {tag: #type, name: #char8, ptrlvl: 1}
                              }, 
                              "CompLayer"],
                            func: #strcmp
                          }
                        },
                        then: {
                          tag: #block,
                          value: [
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #cs,
                              rhs: {
                                tag: #binary,
                                op: #"+",
                                lhs: {
                                  tag: #call,
                                  args: {
                                    tag: #prefix_cast,
                                    lhs: #cs,
                                    rhs: {tag: #type, name: #char8, ptrlvl: 1}
                                  },
                                  func: #strlen
                                },
                                rhs: 1
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1435
                            }, 
                            {
                              tag: #if,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1436,
                              cond: {
                                tag: #unary,
                                op: #"!",
                                value: {
                                  tag: #call,
                                  args: [
                                    {
                                      tag: #prefix_cast,
                                      lhs: #cs,
                                      rhs: {tag: #type, name: #char8, ptrlvl: 1}
                                    }, 
                                    #name],
                                  func: #strcmp
                                }
                              },
                              then: {
                                tag: #block,
                                value: [
                                  {
                                    tag: #call,
                                    fn: "bstest/bs_decjpg.bs",
                                    ln: 1438,
                                    args: [
                                      "PDJPG_DecodeScanForComponentLayer: Found %s\n", 
                                      #name],
                                    func: #printf
                                  }, 
                                  {
                                    tag: #assignop,
                                    op: #"+",
                                    lhs: #cs,
                                    rhs: {
                                      tag: #binary,
                                      op: #"+",
                                      lhs: {
                                        tag: #call,
                                        args: {
                                          tag: #prefix_cast,
                                          lhs: #cs,
                                          rhs: {
                                            tag: #type,
                                            name: #char8,
                                            ptrlvl: 1
                                          }
                                        },
                                        func: #strlen
                                      },
                                      rhs: 1
                                    },
                                    fn: "bstest/bs_decjpg.bs",
                                    ln: 1440
                                  }, 
                                  {
                                    tag: #return,
                                    fn: "bstest/bs_decjpg.bs",
                                    ln: 1441,
                                    value: #cs2
                                  }]
                              }
                            }, 
                            {
                              tag: #assignop,
                              op: #"+",
                              lhs: #cs,
                              rhs: {
                                tag: #binary,
                                op: #"+",
                                lhs: {
                                  tag: #call,
                                  args: {
                                    tag: #prefix_cast,
                                    lhs: #cs,
                                    rhs: {tag: #type, name: #char8, ptrlvl: 1}
                                  },
                                  func: #strlen
                                },
                                rhs: 1
                              },
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1443
                            }, 
                            {
                              tag: #continue,
                              fn: "bstest/bs_decjpg.bs",
                              ln: 1445,
                              value: 0
                            }]
                        }
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #cs,
                        rhs: {tag: #binary, op: #"-", lhs: #i, rhs: 2},
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1447
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1448,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1450,
                  cond: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #binary,
                      op: #"&&",
                      lhs: {
                        tag: #bincmp,
                        op: #"==",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                        rhs: 255
                      },
                      rhs: {
                        tag: #bincmp,
                        op: #">=",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                        rhs: #JPG_APP0
                      }
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"<=",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                      rhs: #JPG_APP15
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assign,
                        lhs: #i,
                        rhs: {
                          tag: #binary,
                          op: #"|",
                          lhs: {
                            tag: #binary,
                            op: #"<<",
                            lhs: {tag: #loadindex, lhs: #cs, rhs: 2},
                            rhs: 8
                          },
                          rhs: {tag: #loadindex, lhs: #cs, rhs: 3}
                        },
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1455
                      }, 
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #cs,
                        rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 2},
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1456
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1457,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #postinc,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1459,
                  value: #cs
                }]
            }
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1464,
            args: "PDJPG_DecodeScanForComponentLayer: Exit, No\n",
            func: #printf
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1466, value: #null}]
      }
    }, 
    {
      tag: #func,
      name: #pdjpg_hashBuffer,
      type: {tag: #type, name: #int},
      tokcnt: 52,
      fn: "bstest/bs_decjpg.bs",
      ln: 1468,
      args: [
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1471,
            value: [
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cse,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #var,
            name: #h,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1472
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1473
          }, 
          {
            tag: #assign,
            lhs: #cse,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1475
          }, 
          {
            tag: #assign,
            lhs: #h,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1475
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1475,
            cond: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
            then: {
              tag: #assign,
              lhs: #h,
              rhs: {
                tag: #binary,
                op: #"+",
                lhs: {
                  tag: #binary,
                  op: #"+",
                  lhs: {tag: #binary, op: #"*", lhs: #h, rhs: 65521},
                  rhs: {
                    tag: #unary,
                    op: #"*",
                    value: {tag: #postinc, value: #cs}
                  }
                },
                rhs: 1
              },
              fn: "bstest/bs_decjpg.bs",
              ln: 1477
            }
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1479, value: #h}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_DecodeBasic,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 217,
      fn: "bstest/bs_decjpg.bs",
      ln: 1481,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #rxs, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #rys, type: {tag: #type, name: #int, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #obuf,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 1485
          }, 
          {
            tag: #var,
            name: #otbuf,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 1486
          }, 
          {
            tag: #var,
            name: #csl,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 1487
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1488,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #sz1, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1489,
            value: [
              {tag: #var, name: #h0, type: {tag: #type, name: #uint}}, 
              {tag: #var, name: #h1, type: {tag: #type, name: #uint}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1490,
            cond: {tag: #unary, op: #"!", value: #ctx},
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #assign,
            lhs: #csl,
            rhs: {
              tag: #call,
              args: [#buf, #sz, "Alpha"],
              func: #PDJPG_DecodeScanForComponentLayer
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1493
          }, 
          {
            tag: #ifelse,
            fn: "bstest/bs_decjpg.bs",
            ln: 1495,
            cond: #csl,
            then: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1497,
                  args: "PDJPG_DecodeBasic: Found Alpha\n",
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: #sz1,
                  rhs: {
                    tag: #binary,
                    op: #"-",
                    lhs: #sz,
                    rhs: {tag: #binary, op: #"-", lhs: #csl, rhs: #buf}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1498
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1499,
                  args: [#ctx, #csl, #sz1, #rxs, #rys],
                  func: #PDJPG_DecodeLDatCtx
                }, 
                {
                  tag: #assign,
                  lhs: #n,
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #xs},
                    rhs: {tag: #loadslot, lhs: #ctx, rhs: #ys}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1500
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1502,
                  cond: {
                    tag: #unary,
                    op: #"!",
                    value: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf}
                  },
                  then: {
                    tag: #assign,
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf},
                    rhs: {
                      tag: #new,
                      type: {
                        tag: #type,
                        name: #byte,
                        arrays: {tag: #arrdef, value: #n}
                      }
                    }
                  }
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1505,
                  args: [
                    {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf}, 
                    {
                      tag: #loadindex,
                      lhs: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sibuf},
                      rhs: 0
                    }, 
                    #n],
                  func: #memcpy
                }]
            },
            else: {
              tag: #block,
              value: [
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1508,
                  args: "PDJPG_DecodeBasic: No Alpha\n",
                  func: #printf
                }, 
                {
                  tag: #assign,
                  lhs: #n,
                  rhs: {
                    tag: #binary,
                    op: #"*",
                    lhs: {tag: #loadslot, lhs: #ctx, rhs: #xs},
                    rhs: {tag: #loadslot, lhs: #ctx, rhs: #ys}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1509
                }, 
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1511,
                  cond: {tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf},
                  then: {
                    tag: #call,
                    args: [{tag: #loadslot, lhs: #ctx, rhs: #jpg_sabuf}, 255, #n],
                    func: #memset
                  }
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #h0,
            rhs: {tag: #call, args: [#buf, #sz], func: #pdjpg_hashBuffer},
            fn: "bstest/bs_decjpg.bs",
            ln: 1514
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1516,
            args: "PDJPG_DecodeBasic: Base\n",
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #call,
              args: [#ctx, #buf, #sz, #rxs, #rys],
              func: #PDJPG_DecodeCtxInner
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1518
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1519,
            args: "PDJPG_DecodeBasic: Base OK\n",
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #h1,
            rhs: {tag: #call, args: [#buf, #sz], func: #pdjpg_hashBuffer},
            fn: "bstest/bs_decjpg.bs",
            ln: 1520
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1522,
            args: ["Hash %08X %08X\n", #h0, #h1],
            func: #printf
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1524, value: #i}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_EscapeDecodeBuffer,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 109,
      fn: "bstest/bs_decjpg.bs",
      ln: 1527,
      args: [
        {
          tag: #var,
          name: #ibuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #isz, type: {tag: #type, name: #int}}, 
        {
          tag: #var,
          name: #obuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #osz, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1532,
            value: [
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cse,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cte,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #ibuf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1533
          }, 
          {
            tag: #assign,
            lhs: #cse,
            rhs: {tag: #binary, op: #"+", lhs: #ibuf, rhs: #isz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1535
          }, 
          {
            tag: #assign,
            lhs: #ct,
            rhs: #obuf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1535
          }, 
          {
            tag: #assign,
            lhs: #cte,
            rhs: {tag: #binary, op: #"+", lhs: #obuf, rhs: #osz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1536
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1536,
            cond: {
              tag: #binary,
              op: #"&&",
              lhs: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
              rhs: {tag: #bincmp, op: #"<", lhs: #ct, rhs: #cte}
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1539,
                  cond: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                      rhs: 255
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                      rhs: 0
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #cs,
                        rhs: 2,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1541
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #unary,
                          op: #"*",
                          value: {tag: #postinc, value: #ct}
                        },
                        rhs: 255,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1541
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1541,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #unary,
                    op: #"*",
                    value: {tag: #postinc, value: #ct}
                  },
                  rhs: {
                    tag: #unary,
                    op: #"*",
                    value: {tag: #postinc, value: #cs}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1541
                }]
            }
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1543,
            cond: {tag: #bincmp, op: #">=", lhs: #ct, rhs: #cte},
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #return,
            fn: "bstest/bs_decjpg.bs",
            ln: 1544,
            value: {tag: #binary, op: #"-", lhs: #ct, rhs: #obuf}
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_EscapeDecodeSingleBuffer,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 109,
      fn: "bstest/bs_decjpg.bs",
      ln: 1546,
      args: [
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1549,
            value: [
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cse,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cte,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1550
          }, 
          {
            tag: #assign,
            lhs: #cse,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1552
          }, 
          {
            tag: #assign,
            lhs: #ct,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1552
          }, 
          {
            tag: #assign,
            lhs: #cte,
            rhs: {tag: #binary, op: #"+", lhs: #buf, rhs: #sz},
            fn: "bstest/bs_decjpg.bs",
            ln: 1553
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1553,
            cond: {
              tag: #binary,
              op: #"&&",
              lhs: {tag: #bincmp, op: #"<", lhs: #cs, rhs: #cse},
              rhs: {tag: #bincmp, op: #"<", lhs: #ct, rhs: #cte}
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #if,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1556,
                  cond: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                      rhs: 255
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                      rhs: 0
                    }
                  },
                  then: {
                    tag: #block,
                    value: [
                      {
                        tag: #assignop,
                        op: #"+",
                        lhs: #cs,
                        rhs: 2,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1558
                      }, 
                      {
                        tag: #assign,
                        lhs: {
                          tag: #unary,
                          op: #"*",
                          value: {tag: #postinc, value: #ct}
                        },
                        rhs: 255,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1558
                      }, 
                      {
                        tag: #continue,
                        fn: "bstest/bs_decjpg.bs",
                        ln: 1558,
                        value: 0
                      }]
                  }
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #unary,
                    op: #"*",
                    value: {tag: #postinc, value: #ct}
                  },
                  rhs: {
                    tag: #unary,
                    op: #"*",
                    value: {tag: #postinc, value: #cs}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1558
                }]
            }
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1560,
            cond: {tag: #bincmp, op: #">=", lhs: #ct, rhs: #cte},
            then: {tag: #return, value: -1}
          }, 
          {
            tag: #return,
            fn: "bstest/bs_decjpg.bs",
            ln: 1561,
            value: {tag: #binary, op: #"-", lhs: #ct, rhs: #buf}
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_DecodeLDatCtx,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 360,
      fn: "bstest/bs_decjpg.bs",
      ln: 1563,
      args: [
        {tag: #var, name: #ctx, type: {tag: #type, name: #PDJPG_Context}}, 
        {tag: #var, name: #buf, type: {tag: #type, name: #byte, ptrlvl: 1}}, 
        {tag: #var, name: #sz, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int, ptrlvl: 1}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int, ptrlvl: 1}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #tbufa,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            fn: "bstest/bs_decjpg.bs",
            ln: 1567
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1568,
            value: [
              {
                tag: #var,
                name: #tbuf,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #tbuf2,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #cs,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }, 
              {
                tag: #var,
                name: #ct,
                type: {tag: #type, name: #byte, ptrlvl: 1}
              }]
          }, 
          {
            tag: #var,
            name: #tsz,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1569
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1570,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #if,
            fn: "bstest/bs_decjpg.bs",
            ln: 1571,
            cond: {
              tag: #binary,
              op: #"||",
              lhs: {
                tag: #binary,
                op: #"||",
                lhs: {
                  tag: #binary,
                  op: #"||",
                  lhs: {
                    tag: #binary,
                    op: #"||",
                    lhs: {
                      tag: #binary,
                      op: #"||",
                      lhs: {
                        tag: #bincmp,
                        op: #"!=",
                        lhs: {tag: #loadindex, lhs: #buf, rhs: 0},
                        rhs: 255
                      },
                      rhs: {
                        tag: #bincmp,
                        op: #"!=",
                        lhs: {tag: #loadindex, lhs: #buf, rhs: 1},
                        rhs: #JPG_APP12
                      }
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"!=",
                      lhs: {tag: #loadindex, lhs: #buf, rhs: 4},
                      rhs: 'L'
                    }
                  },
                  rhs: {
                    tag: #bincmp,
                    op: #"!=",
                    lhs: {tag: #loadindex, lhs: #buf, rhs: 5},
                    rhs: 'D'
                  }
                },
                rhs: {
                  tag: #bincmp,
                  op: #"!=",
                  lhs: {tag: #loadindex, lhs: #buf, rhs: 6},
                  rhs: 'A'
                }
              },
              rhs: {
                tag: #bincmp,
                op: #"!=",
                lhs: {tag: #loadindex, lhs: #buf, rhs: 7},
                rhs: 'T'
              }
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #k,
                  rhs: {
                    tag: #call,
                    args: [#ctx, #buf, #sz, #xs, #ys],
                    func: #PDJPG_DecodeCtxInner
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1576
                }, 
                {
                  tag: #return,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1577,
                  value: #k
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1579
          }, 
          {
            tag: #assign,
            lhs: #tsz,
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1581
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1581,
            cond: {
              tag: #binary,
              op: #"&&",
              lhs: {
                tag: #binary,
                op: #"&&",
                lhs: {
                  tag: #binary,
                  op: #"&&",
                  lhs: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #binary,
                      op: #"&&",
                      lhs: {
                        tag: #bincmp,
                        op: #"==",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                        rhs: 255
                      },
                      rhs: {
                        tag: #bincmp,
                        op: #"==",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                        rhs: #JPG_APP12
                      }
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 4},
                      rhs: 'L'
                    }
                  },
                  rhs: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {tag: #loadindex, lhs: #cs, rhs: 5},
                    rhs: 'D'
                  }
                },
                rhs: {
                  tag: #bincmp,
                  op: #"==",
                  lhs: {tag: #loadindex, lhs: #cs, rhs: 6},
                  rhs: 'A'
                }
              },
              rhs: {
                tag: #bincmp,
                op: #"==",
                lhs: {tag: #loadindex, lhs: #cs, rhs: 7},
                rhs: 'T'
              }
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: {
                    tag: #binary,
                    op: #"|",
                    lhs: {
                      tag: #binary,
                      op: #"<<",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 2},
                      rhs: 8
                    },
                    rhs: {tag: #loadindex, lhs: #cs, rhs: 3}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1585
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #tsz,
                  rhs: #i,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1586
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #cs,
                  rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 2},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1587
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #tbufa,
            rhs: {
              tag: #new,
              type: {
                tag: #type,
                name: #byte,
                arrays: {tag: #arrdef, value: #tsz}
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1589
          }, 
          {
            tag: #assign,
            lhs: #tbuf,
            rhs: {
              tag: #prefix_cast,
              lhs: #tbufa,
              rhs: {tag: #type, name: #byte, ptrlvl: 1}
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1591
          }, 
          {
            tag: #assign,
            lhs: #cs,
            rhs: #buf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1592
          }, 
          {
            tag: #assign,
            lhs: #ct,
            rhs: #tbuf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1594
          }, 
          {
            tag: #while,
            fn: "bstest/bs_decjpg.bs",
            ln: 1594,
            cond: {
              tag: #binary,
              op: #"&&",
              lhs: {
                tag: #binary,
                op: #"&&",
                lhs: {
                  tag: #binary,
                  op: #"&&",
                  lhs: {
                    tag: #binary,
                    op: #"&&",
                    lhs: {
                      tag: #binary,
                      op: #"&&",
                      lhs: {
                        tag: #bincmp,
                        op: #"==",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 0},
                        rhs: 255
                      },
                      rhs: {
                        tag: #bincmp,
                        op: #"==",
                        lhs: {tag: #loadindex, lhs: #cs, rhs: 1},
                        rhs: #JPG_APP12
                      }
                    },
                    rhs: {
                      tag: #bincmp,
                      op: #"==",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 4},
                      rhs: 'L'
                    }
                  },
                  rhs: {
                    tag: #bincmp,
                    op: #"==",
                    lhs: {tag: #loadindex, lhs: #cs, rhs: 5},
                    rhs: 'D'
                  }
                },
                rhs: {
                  tag: #bincmp,
                  op: #"==",
                  lhs: {tag: #loadindex, lhs: #cs, rhs: 6},
                  rhs: 'A'
                }
              },
              rhs: {
                tag: #bincmp,
                op: #"==",
                lhs: {tag: #loadindex, lhs: #cs, rhs: 7},
                rhs: 'T'
              }
            },
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #i,
                  rhs: {
                    tag: #binary,
                    op: #"|",
                    lhs: {
                      tag: #binary,
                      op: #"<<",
                      lhs: {tag: #loadindex, lhs: #cs, rhs: 2},
                      rhs: 8
                    },
                    rhs: {tag: #loadindex, lhs: #cs, rhs: 3}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1599
                }, 
                {
                  tag: #call,
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1600,
                  args: [
                    #ct, {tag: #binary, op: #"+", lhs: #cs, rhs: 8}, 
                    {tag: #binary, op: #"-", lhs: #i, rhs: 6}],
                  func: #memcpy
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #cs,
                  rhs: {tag: #binary, op: #"+", lhs: #i, rhs: 2},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1601
                }, 
                {
                  tag: #assignop,
                  op: #"+",
                  lhs: #ct,
                  rhs: {tag: #binary, op: #"-", lhs: #i, rhs: 6},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1602
                }]
            }
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {tag: #binary, op: #"-", lhs: #ct, rhs: #tbuf},
            fn: "bstest/bs_decjpg.bs",
            ln: 1603
          }, 
          {
            tag: #assign,
            lhs: #i,
            rhs: {
              tag: #call,
              args: [#tbuf, #i],
              func: #PDJPG_EscapeDecodeSingleBuffer
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1605
          }, 
          {
            tag: #assign,
            lhs: #k,
            rhs: {
              tag: #call,
              args: [#ctx, #tbuf, #i, #xs, #ys],
              func: #PDJPG_DecodeCtxInner
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1606
          }, 
          {
            tag: #delete,
            fn: "bstest/bs_decjpg.bs",
            ln: 1608,
            value: #tbufa
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1609, value: #k}]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_FlattenTGA,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 244,
      fn: "bstest/bs_decjpg.bs",
      ln: 1611,
      args: [
        {
          tag: #var,
          name: #obuf,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {
          tag: #var,
          name: #rgba,
          type: {tag: #type, name: #byte, ptrlvl: 1}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #head,
            type: {tag: #type, name: #byte, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 1614
          }, 
          {
            tag: #vars,
            fn: "bstest/bs_decjpg.bs",
            ln: 1616,
            value: [
              {tag: #var, name: #i, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #j, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #k, type: {tag: #type, name: #int}}, 
              {tag: #var, name: #n, type: {tag: #type, name: #int}}]
          }, 
          {
            tag: #assign,
            lhs: #head,
            rhs: #obuf,
            fn: "bstest/bs_decjpg.bs",
            ln: 1617
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 0},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1619
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 1},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1621
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 2},
            rhs: 2,
            fn: "bstest/bs_decjpg.bs",
            ln: 1622
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 3},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1623
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 4},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1625
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 5},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1625
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 6},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1626
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 7},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1626
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 8},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1628
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 9},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1630
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 10},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1630
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 11},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1631
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 12},
            rhs: #xs,
            fn: "bstest/bs_decjpg.bs",
            ln: 1631
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 13},
            rhs: {tag: #binary, op: #">>", lhs: #xs, rhs: 8},
            fn: "bstest/bs_decjpg.bs",
            ln: 1633
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 14},
            rhs: #ys,
            fn: "bstest/bs_decjpg.bs",
            ln: 1633
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 15},
            rhs: {tag: #binary, op: #">>", lhs: #ys, rhs: 8},
            fn: "bstest/bs_decjpg.bs",
            ln: 1634
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 16},
            rhs: 24,
            fn: "bstest/bs_decjpg.bs",
            ln: 1634
          }, 
          {
            tag: #assign,
            lhs: {tag: #loadindex, lhs: #head, rhs: 17},
            rhs: 0,
            fn: "bstest/bs_decjpg.bs",
            ln: 1635
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1636,
            args: ["PDJPG_FlattenTGA: %d x %d\n", #xs, #ys],
            func: #printf
          }, 
          {
            tag: #assign,
            lhs: #n,
            rhs: {tag: #binary, op: #"*", lhs: #xs, rhs: #ys},
            fn: "bstest/bs_decjpg.bs",
            ln: 1638
          }, 
          {
            tag: #for,
            fn: "bstest/bs_decjpg.bs",
            ln: 1642,
            cond: {tag: #bincmp, op: #"<", lhs: #i, rhs: #n},
            then: {
              tag: #block,
              value: [
                {
                  tag: #assign,
                  lhs: #j,
                  rhs: {tag: #binary, op: #"*", lhs: #i, rhs: 4},
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1644
                }, 
                {
                  tag: #assign,
                  lhs: #k,
                  rhs: {
                    tag: #binary,
                    op: #"+",
                    lhs: 18,
                    rhs: {tag: #binary, op: #"*", lhs: #i, rhs: 3}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1645
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: #obuf,
                    rhs: {tag: #binary, op: #"+", lhs: #k, rhs: 0}
                  },
                  rhs: {
                    tag: #loadindex,
                    lhs: #rgba,
                    rhs: {tag: #binary, op: #"+", lhs: #j, rhs: 2}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1646
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: #obuf,
                    rhs: {tag: #binary, op: #"+", lhs: #k, rhs: 1}
                  },
                  rhs: {
                    tag: #loadindex,
                    lhs: #rgba,
                    rhs: {tag: #binary, op: #"+", lhs: #j, rhs: 1}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1647
                }, 
                {
                  tag: #assign,
                  lhs: {
                    tag: #loadindex,
                    lhs: #obuf,
                    rhs: {tag: #binary, op: #"+", lhs: #k, rhs: 2}
                  },
                  rhs: {
                    tag: #loadindex,
                    lhs: #rgba,
                    rhs: {tag: #binary, op: #"+", lhs: #j, rhs: 0}
                  },
                  fn: "bstest/bs_decjpg.bs",
                  ln: 1648
                }]
            },
            init: {tag: #assign, lhs: #i, rhs: 0},
            step: {tag: #postinc, value: #i}
          }, 
          {
            tag: #return,
            fn: "bstest/bs_decjpg.bs",
            ln: 1650,
            value: {
              tag: #binary,
              op: #"+",
              lhs: 18,
              rhs: {tag: #binary, op: #"*", lhs: #n, rhs: 3}
            }
          }]
      }
    }, 
    {
      tag: #func,
      name: #PDJPG_StoreTGA,
      type: {tag: #type, name: #int},
      modi: 1,
      tokcnt: 71,
      fn: "bstest/bs_decjpg.bs",
      ln: 1652,
      args: [
        {tag: #var, name: #name, type: {tag: #type, name: #string}}, 
        {
          tag: #var,
          name: #rgba,
          type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}}
        }, 
        {tag: #var, name: #xs, type: {tag: #type, name: #int}}, 
        {tag: #var, name: #ys, type: {tag: #type, name: #int}}],
      body: {
        tag: #block,
        value: [
          {
            tag: #var,
            name: #fd,
            type: {tag: #type, name: #void, ptrlvl: 1},
            fn: "bstest/bs_decjpg.bs",
            ln: 1655
          }, 
          {
            tag: #var,
            name: #tbuf,
            type: {tag: #type, name: #byte, arrays: {tag: #arrdef0}},
            fn: "bstest/bs_decjpg.bs",
            ln: 1656
          }, 
          {
            tag: #var,
            name: #sz,
            type: {tag: #type, name: #int},
            fn: "bstest/bs_decjpg.bs",
            ln: 1657
          }, 
          {
            tag: #assign,
            lhs: #tbuf,
            rhs: {
              tag: #new,
              type: {
                tag: #type,
                name: #byte,
                arrays: {
                  tag: #arrdef,
                  value: {
                    tag: #binary,
                    op: #"+",
                    lhs: {
                      tag: #binary,
                      op: #"*",
                      lhs: {tag: #binary, op: #"*", lhs: #xs, rhs: #ys},
                      rhs: 4
                    },
                    rhs: 64
                  }
                }
              }
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1658
          }, 
          {
            tag: #assign,
            lhs: #sz,
            rhs: {
              tag: #call,
              args: [#tbuf, #rgba, #xs, #ys],
              func: #PDJPG_FlattenTGA
            },
            fn: "bstest/bs_decjpg.bs",
            ln: 1660
          }, 
          {
            tag: #assign,
            lhs: #fd,
            rhs: {tag: #call, args: [#name, "wb"], func: #fopen},
            fn: "bstest/bs_decjpg.bs",
            ln: 1661
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1663,
            args: [#tbuf, 1, #sz, #fd],
            func: #fwrite
          }, 
          {
            tag: #call,
            fn: "bstest/bs_decjpg.bs",
            ln: 1664,
            args: #fd,
            func: #fclose
          }, 
          {tag: #return, fn: "bstest/bs_decjpg.bs", ln: 1665, value: 0}]
      }
    }]
}1: (null) ?
2: clock ?
3: rand ?
4: bsvm2_natfib ?
5: bsvm2_natsorttst ?
6: bsvm2_vm_printf ?
7: printf(CsCz)v:
0007:0000 2800            LDA       L0
0007:0002 2801            LDA       L1
0007:0004 7000            CALLG     G0(bsvm2_vm_printf)
0007:0006 E161            DROPAA    
0007:0008 79              RETV      
	Avg B/tk=0.999999
8: fn_noArgReturnsInt ?
9: Exception {
10: Exception/dummy:00000000(i)
11: Exception/$CTOR$:0000010B(L11)
}
10: Exception/dummy ?
11: Exception/$CTOR$()v:
000B:0000 79              RETV      
	Avg B/tk=0.499998
12: bstest ?
13: bstest/Foo {
14: bstest/Foo/x:00000000(i)
15: bstest/Foo/y:00000000(i)
16: bstest/Foo/z:00000003(d)
}
14: bstest/Foo/x ?
15: bstest/Foo/y ?
16: bstest/Foo/z ?
17: bstest/Foo2 {
18: bstest/Foo2/x:00000000(i)
19: bstest/Foo2/y:00000000(i)
20: bstest/Foo2/z:00000003(d)
21: bstest/Foo2/$CTOR$:00000115(L21)
22: bstest/Foo2/method0:00000003(d)
}
18: bstest/Foo2/x ?
19: bstest/Foo2/y ?
20: bstest/Foo2/z ?
21: bstest/Foo2/$CTOR$(i)v:
0015:0000 2A14            LDC       Str:2="Foo2 Ctor %d\n"
0015:0002 8914            NEWARR    a:1
0015:0004 E10F45          LDCA      4u
0015:0007 E1AC00          DSTIXAC   0
0015:000A 7000            CALLG     G0(printf)
0015:000C 79              RETV      
	Avg B/tk=1.444443
22: bstest/Foo2/method0()d:
0016:0000 E12000          LDTHIS    G0(bstest/Foo2/x)
0016:0003 E12001          LDTHIS    G1(bstest/Foo2/y)
0016:0006 00              ADDI      
0016:0007 92              CVTI2D    
0016:0008 E12002          LDTHIS    G2(bstest/Foo2/z)
0016:000B 14              ADDD      
0016:000C 77              RETD      
	Avg B/tk=1.181817
23: bstest/i:00000000(i)
24: bstest/j:00000000(i)
25: bstest/arr:00010000(Qi)
26: bstest/arr2:08000006(A256h)
27: bstest/fib(i)i:
001B:0000 6A04            CMPILC    L0, 2
001B:0002 3504            JGE       0x0006
001B:0004 6415            RETC      1u
001B:0006 E1C101          SUBISLC   L0, 1
001B:0009 7000            CALLG     G0(bstest/fib)
001B:000B E1C102          SUBISLC   L0, 2
001B:000E 7000            CALLG     G0(bstest/fib)
001B:0010 00              ADDI      
001B:0011 74              RETI      
	Avg B/tk=0.600000
28: bstest/selsort(Qii)i:
001C:0000 2804            LDA       L4
001C:0002 E1B0            CVTA2PTR  
001C:0004 2900            STA       L0
001C:0006 E11C10          MVIC      L1, 0
001C:0009 7B              LABEL     
001C:000A 6B15            CMPILL    L1, L5
001C:000C 358082          JGE       0x0050
001C:000F E1E02101        ADDILLC   L2, L1, 1
001C:0013 7B              LABEL     
001C:0014 6B25            CMPILL    L2, L5
001C:0016 358064          JGE       0x004B
001C:0019 2800            LDA       L0
001C:001B 2002            LDI       L2
001C:001D 8C40            LDIXI.P   
001C:001F 2800            LDA       L0
001C:0021 2001            LDI       L1
001C:0023 8C40            LDIXI.P   
001C:0025 38              CMPI      
001C:0026 35803A          JGE       0x0046
001C:0029 2800            LDA       L0
001C:002B 2001            LDI       L1
001C:002D 8C40            LDIXI.P   
001C:002F 2403            STI       L3
001C:0031 2800            LDA       L0
001C:0033 2002            LDI       L2
001C:0035 8C40            LDIXI.P   
001C:0037 2800            LDA       L0
001C:0039 2001            LDI       L1
001C:003B 8C44            STIXI.P   
001C:003D 2003            LDI       L3
001C:003F 2800            LDA       L0
001C:0041 2002            LDI       L2
001C:0043 8C44            STIXI.P   
001C:0045 7B              LABEL     
001C:0046 6E02            INCIL     L2
001C:0048 37806D          JMP       0x0014
001C:004B 6E01            INCIL     L1
001C:004D 37808B          JMP       0x000A
001C:0050 6400            RETC      0i
	Avg B/tk=0.921348
29: bstest/sorttst(i)v:
001D:0000 2002            LDI       L2
001D:0002 8900            NEWARR    i:0
001D:0004 2900            STA       L0
001D:0006 E11C10          MVIC      L1, 0
001D:0009 7B              LABEL     
001D:000A 6B12            CMPILL    L1, L2
001D:000C 358018          JGE       0x001B
001D:000F 7000            CALLG     G0(rand)
001D:0011 E1870001        STIXZLL   L0i, L1
001D:0015 7B              LABEL     
001D:0016 6E01            INCIL     L1
001D:0018 378021          JMP       0x000A
001D:001B 2800            LDA       L0
001D:001D 2002            LDI       L2
001D:001F 7001            CALLG     G1(bstest/selsort)
001D:0021 A0              POPI      
001D:0022 79              RETV      
	Avg B/tk=0.744681
30: bstest/Fib {
31: bstest/Fib/foo:0000010D(X13)
32: bstest/Fib/$CTOR$:00000120(L32)
33: bstest/Fib/tst_switch:00000000(i)
34: bstest/Fib/tst_ref:00000000(i)
35: bstest/Fib/tst_func:0000000B(v)
36: bstest/Fib/tst_func2:0000000B(v)
37: bstest/Fib/tst_tryex2:0000000B(v)
38: bstest/Fib/tst_tryex:0000000B(v)
39: bstest/Fib/tst_letlec:0000000B(v)
40: bstest/Fib/tst_decjpg:0000000B(v)
41: bstest/Fib/main:0000000B(v)
}
31: bstest/Fib/foo ?
32: bstest/Fib/$CTOR$(ii)v:
0020:0000 2000            LDI       L0
0020:0002 E12001          LDTHIS    G1(bstest/Fib/foo)
0020:0005 7D00            STOS      G0(bstest/Foo/x)
0020:0007 2001            LDI       L1
0020:0009 E12001          LDTHIS    G1(bstest/Fib/foo)
0020:000C 7D02            STOS      G2(bstest/Foo/y)
0020:000E E12001          LDTHIS    G1(bstest/Fib/foo)
0020:0011 7C00            LDOS      G0(bstest/Foo/x)
0020:0013 E12001          LDTHIS    G1(bstest/Fib/foo)
0020:0016 7C02            LDOS      G2(bstest/Foo/y)
0020:0018 00              ADDI      
0020:0019 92              CVTI2D    
0020:001A E12001          LDTHIS    G1(bstest/Fib/foo)
0020:001D 7D03            STOS      G3(bstest/Foo/z)
0020:001F 79              RETV      
	Avg B/tk=1.230769
33: bstest/Fib/tst_switch(i)i:
0021:0000 2001            LDI       L1
0021:0002 E1290C804A      DCJGEIC   6, 0x002C
0021:0007 E129068020      DCJGEIC   3, 0x001C
0021:000C E129028006      DCJGEIC   1, 0x0014
0021:0011 378084          JMP       0x0056
0021:0014 E12402808C      DCJEQIC   1, 0x005F
0021:0019 378098          JMP       0x0068
0021:001C E129088006      DCJGEIC   4, 0x0024
0021:0021 37809C          JMP       0x0072
0021:0024 E1240880A6      DCJEQIC   4, 0x007C
0021:0029 3780B4          JMP       0x0086
0021:002C E129128020      DCJGEIC   9, 0x0041
0021:0031 E1290E8006      DCJGEIC   7, 0x0039
0021:0036 3780AE          JMP       0x0090
0021:0039 E1240E80B8      DCJEQIC   7, 0x009A
0021:003E 3780C6          JMP       0x00A4
0021:0041 E129148006      DCJGEIC   10, 0x0049
0021:0046 3780CA          JMP       0x00AE
0021:0049 E1241480D4      DCJEQIC   10, 0x00B8
0021:004E E1241680DE      DCJEQIC   11, 0x00C2
0021:0053 3780EC          JMP       0x00CC
0021:0056 A0              POPI      
0021:0057 E11C02          MVIC      L0, 1
0021:005A 3780EC          JMP       0x00D3
0021:005D 61AC            NX.PUSHI  
0021:005F A0              POPI      
0021:0060 E11C08          MVIC      L0, 4
0021:0063 3780DA          JMP       0x00D3
0021:0066 61AC            NX.PUSHI  
0021:0068 A0              POPI      
0021:0069 E11C8012        MVIC      L0, 9
0021:006D 3780C6          JMP       0x00D3
0021:0070 61AC            NX.PUSHI  
0021:0072 A0              POPI      
0021:0073 E11C8020        MVIC      L0, 16
0021:0077 3780B2          JMP       0x00D3
0021:007A 61AC            NX.PUSHI  
0021:007C A0              POPI      
0021:007D E11C8032        MVIC      L0, 25
0021:0081 37809E          JMP       0x00D3
0021:0084 61AC            NX.PUSHI  
0021:0086 A0              POPI      
0021:0087 E11C8048        MVIC      L0, 36
0021:008B 37808A          JMP       0x00D3
0021:008E 61AC            NX.PUSHI  
0021:0090 A0              POPI      
0021:0091 E11C8062        MVIC      L0, 49
0021:0095 378076          JMP       0x00D3
0021:0098 61AC            NX.PUSHI  
0021:009A A0              POPI      
0021:009B E11C8080        MVIC      L0, 64
0021:009F 378062          JMP       0x00D3
0021:00A2 61AC            NX.PUSHI  
0021:00A4 A0              POPI      
0021:00A5 E11C80A2        MVIC      L0, 81
0021:00A9 37804E          JMP       0x00D3
0021:00AC 61AC            NX.PUSHI  
0021:00AE A0              POPI      
0021:00AF E11C80C8        MVIC      L0, 100
0021:00B3 37803A          JMP       0x00D3
0021:00B6 61AC            NX.PUSHI  
0021:00B8 A0              POPI      
0021:00B9 E11C80F2        MVIC      L0, 121
0021:00BD 378026          JMP       0x00D3
0021:00C0 61AC            NX.PUSHI  
0021:00C2 A0              POPI      
0021:00C3 E11C8120        MVIC      L0, 144
0021:00C7 378012          JMP       0x00D3
0021:00CA 61AC            NX.PUSHI  
0021:00CC A0              POPI      
0021:00CD E11C01          MVIC      L0, -1
0021:00D0 378000          JMP       0x00D3
0021:00D3 7A00            RET2      L0i
	Avg B/tk=1.601504
34: bstest/Fib/tst_ref(RiRi)i:
0022:0000 E14D00          LDDRVL    L0i
0022:0003 E14D10          LDDRVL    L1i
0022:0006 00              ADDI      
0022:0007 E14F00          STDRVL    L0i
0022:000A E14D10          LDDRVL    L1i
0022:000D 74              RETI      
	Avg B/tk=1.076922
35: bstest/Fib/tst_func()v:
0023:0000 E11C14          MVIC      L1, 2
0023:0003 E11C26          MVIC      L2, 3
0023:0006 E1BC00          MKLFCN    G0($GS$3AF758F2_0001)
0023:0009 E1BE0001        DSTIXUZL  i:0, L1
0023:000D E1BE1002        DSTIXUZL  i:1, L2
0023:0011 2900            STA       L0
0023:0013 7301            CALLL     L0, G1(fn_noArgReturnsInt)
0023:0015 2403            STI       L3
0023:0017 2A34            LDC       Str:10="tst_func: %d %d %d\n"
0023:0019 8934            NEWARR    a:3
0023:001B 2001            LDI       L1
0023:001D E110            CVTI2AA   
0023:001F E1AC00          DSTIXAC   0
0023:0022 2002            LDI       L2
0023:0024 E110            CVTI2AA   
0023:0026 E1AC02          DSTIXAC   1
0023:0029 2003            LDI       L3
0023:002B E110            CVTI2AA   
0023:002D E1AC04          DSTIXAC   2
0023:0030 7002            CALLG     G2(printf)
0023:0032 79              RETV      
	Avg B/tk=1.040816
36: bstest/Fib/tst_func2()v:
0024:0000 E1BA40          IFXLFCN   L4, G0($GS$3AF758F2_0002)
0024:0003 2804            LDA       L4
0024:0005 E1BF0401        DSTIXUZRL a:0, L1
0024:0009 E1BF1402        DSTIXUZRL a:1, L2
0024:000D A8              POPA      
0024:000E E11C16          MVIC      L1, 3
0024:0011 E11C28          MVIC      L2, 4
0024:0014 2804            LDA       L4
0024:0016 2900            STA       L0
0024:0018 7301            CALLL     L0, G1(fn_noArgReturnsInt)
0024:001A 2403            STI       L3
0024:001C 2A34            LDC       Str:24="tst_func2: %d %d %d\n"
0024:001E 8934            NEWARR    a:3
0024:0020 2001            LDI       L1
0024:0022 E110            CVTI2AA   
0024:0024 E1AC00          DSTIXAC   0
0024:0027 2002            LDI       L2
0024:0029 E110            CVTI2AA   
0024:002B E1AC02          DSTIXAC   1
0024:002E 2003            LDI       L3
0024:0030 E110            CVTI2AA   
0024:0032 E1AC04          DSTIXAC   2
0024:0035 7002            CALLG     G2(printf)
0024:0037 E144            LBLCLNP   
0024:0039 E1BB40          DFXLFCN   L4, G0($GS$3AF758F2_0002)
0024:003C 79              RETV      
	Avg B/tk=1.220000
37: bstest/Fib/tst_tryex2()v:
0025:0000 8800            NEWOBJ    G0(Exception)
0025:0002 A9              DUPA      
0025:0003 7201            CALLV     G1(Exception/$CTOR$)
0025:0005 E1F3            THROW     
0025:0007 79              RETV      
	Avg B/tk=0.999999
38: bstest/Fib/tst_tryex()v:
0026:0000 E1F08018        BEGTRY    0x0010
0026:0004 2A24            LDC       Str:39="try 1\n"
0026:0006 AB              PUSHA     
0026:0007 7001            CALLG     G1(printf)
0026:0009 7003            CALLG     G3(bstest/Fib/tst_tryex2)
0026:000B 2A44            LDC       Str:40="try 2\n"
0026:000D AB              PUSHA     
0026:000E 7001            CALLG     G1(printf)
0026:0010 E1F18020        ENDTRY    0x0024
0026:0014 E1F2008016      CATCH     G0(Exception), 0x0024
0026:0019 2900            STA       L0
0026:001B 2A54            LDC       Str:47="catch\n"
0026:001D AB              PUSHA     
0026:001E 7001            CALLG     G1(printf)
0026:0020 AB              PUSHA     
0026:0021 378000          JMP       0x0024
0026:0024 2A64            LDC       Str:4E="finally\n"
0026:0026 AB              PUSHA     
0026:0027 7001            CALLG     G1(printf)
0026:0029 E1F7            RETHROW   
0026:002B 79              RETV      
	Avg B/tk=1.128205
39: bstest/Fib/tst_letlec()v:
0027:0000 2A14            LDC       Str:57="letlec A\n"
0027:0002 AB              PUSHA     
0027:0003 7000            CALLG     G0(printf)
0027:0005 E1F400801C      BEGLEC    L0, 0x0018
0027:000A 2A24            LDC       Str:61="letlec B\n"
0027:000C AB              PUSHA     
0027:000D 7000            CALLG     G0(printf)
0027:000F 2800            LDA       L0
0027:0011 E1F3            THROW     
0027:0013 2A34            LDC       Str:6B="letlec C\n"
0027:0015 AB              PUSHA     
0027:0016 7000            CALLG     G0(printf)
0027:0018 E1F500          ENDLEC    L0
0027:001B 2A44            LDC       Str:75="letlec D\n"
0027:001D AB              PUSHA     
0027:001E 7000            CALLG     G0(printf)
0027:0020 79              RETV      
	Avg B/tk=1.031250
40: bstest/Fib/tst_decjpg()v:
0028:0000 2A14            LDC       Str:7F="ATst %d\n"
0028:0002 8914            NEWARR    a:1
0028:0004 7E02            LDGS      G2(pdjpg_zigzag2)
0028:0006 502E            LDIXIC    23
0028:0008 E110            CVTI2AA   
0028:000A E1AC00          DSTIXAC   0
0028:000D 7000            CALLG     G0(printf)
0028:000F 2A44            LDC       Str:88="NanoITX_4_1.jpg"
0028:0011 8070            LDRL      L7i
0028:0013 7003            CALLG     G3(readfile)
0028:0015 2902            STA       L2
0028:0017 2A54            LDC       Str:98="JP: %02X %02X sz=%d\n"
0028:0019 8934            NEWARR    a:3
0028:001B 2802            LDA       L2
0028:001D E159            LDDRUB    
0028:001F E110            CVTI2AA   
0028:0021 E1AC00          DSTIXAC   0
0028:0024 E17F2602        LDIXZLC   L2b, 1
0028:0028 E110            CVTI2AA   
0028:002A E1AC02          DSTIXAC   1
0028:002D 2007            LDI       L7
0028:002F E110            CVTI2AA   
0028:0031 E1AC04          DSTIXAC   2
0028:0034 7000            CALLG     G0(printf)
0028:0036 7006            CALLG     G6(PDJPG_AllocContext)
0028:0038 2900            STA       L0
0028:003A 2802            LDA       L2
0028:003C E1B0            CVTA2PTR  
0028:003E 2903            STA       L3
0028:0040 2803            LDA       L3
0028:0042 8CE13D02        LEARBC.P  1
0028:0046 2903            STA       L3
0028:0048 7007            CALLG     G7(clock)
0028:004A 2404            STI       L4
0028:004C 2800            LDA       L0
0028:004E 2802            LDA       L2
0028:0050 E1B0            CVTA2PTR  
0028:0052 2007            LDI       L7
0028:0054 808080          LDRL      L8i
0028:0057 808090          LDRL      L9i
0028:005A 7008            CALLG     G8(PDJPG_DecodeBasic)
0028:005C A0              POPI      
0028:005D 7007            CALLG     G7(clock)
0028:005F 2405            STI       L5
0028:0061 E1E98C54        SUBILLL   L6, L5, L4
0028:0065 2A8094          LDC       Str:AD="DecJPG %d\n"
0028:0068 8914            NEWARR    a:1
0028:006A 2006            LDI       L6
0028:006C E110            CVTI2AA   
0028:006E E1AC00          DSTIXAC   0
0028:0071 7000            CALLG     G0(printf)
0028:0073 2A80A4          LDC       Str:B8="Image Dec %d x %d\n"
0028:0076 8924            NEWARR    a:2
0028:0078 2008            LDI       L8
0028:007A E110            CVTI2AA   
0028:007C E1AC00          DSTIXAC   0
0028:007F 2009            LDI       L9
0028:0081 E110            CVTI2AA   
0028:0083 E1AC02          DSTIXAC   1
0028:0086 7000            CALLG     G0(printf)
0028:0088 E1CA8409        MULISLL   L8, L9
0028:008C B604            SHLIC     2
0028:008E 8906            NEWARR    b:0
0028:0090 2901            STA       L1
0028:0092 2800            LDA       L0
0028:0094 2801            LDA       L1
0028:0096 E1B0            CVTA2PTR  
0028:0098 2008            LDI       L8
0028:009A 2009            LDI       L9
0028:009C 700B            CALLG     G11(PDJPG_GetImageRGBA)
0028:009E A0              POPI      
0028:009F 2A80D4          LDC       Str:CB="fibtst0.tga"
0028:00A2 2801            LDA       L1
0028:00A4 2008            LDI       L8
0028:00A6 2009            LDI       L9
0028:00A8 700C            CALLG     G12(PDJPG_StoreTGA)
0028:00AA A0              POPI      
0028:00AB 79              RETV      
	Avg B/tk=0.988506
41: bstest/Fib/main(QCs)v:
0029:0000 E14000          IFXOBJ    L0, G0(bstest/Foo)
0029:0003 E40806          IFXX      L6
0029:0006 E40807          IFXX      L7
0029:0009 E40808          IFXX      L8
0029:000C 2A24            LDC       Str:D7="%f\n"
0029:000E 8914            NEWARR    a:1
0029:0010 E10F8233D921FA  LDCA      3.141590d
0029:0017 E1AC00          DSTIXAC   0
0029:001A 7001            CALLG     G1(printf)
0029:001C E11CA010        MVIC      L16, 8
0029:0020 2AF80DECAF000A  LDC       -20254720m
0029:0027 93              CVTL2I    
0029:0028 2409            STI       L9
0029:002A 2009            LDI       L9
0029:002C 2A8085          LDC       8u
0029:002F E174            SHRI      
0029:0031 240A            STI       L10
0029:0033 E1CE8490        SHLISLL   L9, L16
0029:0037 BC0A            ORIL      L10
0029:0039 240B            STI       L11
0029:003B 200B            LDI       L11
0029:003D 2A8085          LDC       8u
0029:0040 E174            SHRI      
0029:0042 B31E            ANDIC     15
0029:0044 2411            STI       L17
0029:0046 2A34            LDC       Str:DB="%08X %08X %08X %d\n"
0029:0048 8944            NEWARR    a:4
0029:004A 2009            LDI       L9
0029:004C E178            CVTUI2L   
0029:004E E111            CVTL2AA   
0029:0050 E1AC00          DSTIXAC   0
0029:0053 200A            LDI       L10
0029:0055 E178            CVTUI2L   
0029:0057 E111            CVTL2AA   
0029:0059 E1AC02          DSTIXAC   1
0029:005C 200B            LDI       L11
0029:005E E178            CVTUI2L   
0029:0060 E111            CVTL2AA   
0029:0062 E1AC04          DSTIXAC   2
0029:0065 2011            LDI       L17
0029:0067 E110            CVTI2AA   
0029:0069 E1AC06          DSTIXAC   3
0029:006C 7001            CALLG     G1(printf)
0029:006E E11CA201        MVIC      L17, -1
0029:0072 6AA200          CMPILC    L17, 0
0029:0075 338010          JGT       0x0080
0029:0078 2A44            LDC       Str:EE="T\n"
0029:007A AB              PUSHA     
0029:007B 7001            CALLG     G1(printf)
0029:007D 37800A          JMP       0x0085
0029:0080 2A54            LDC       Str:F1="F\n"
0029:0082 AB              PUSHA     
0029:0083 7001            CALLG     G1(printf)
0029:0085 7006            CALLG     G6(clock)
0029:0087 2412            STI       L18
0029:0089 2A74            LDC       Str:F4="BS Fib %d\n"
0029:008B 8914            NEWARR    a:1
0029:008D 2A8265          LDC       38u
0029:0090 7008            CALLG     G8(bstest/fib)
0029:0092 E110            CVTI2AA   
0029:0094 E1AC00          DSTIXAC   0
0029:0097 7001            CALLG     G1(printf)
0029:0099 7006            CALLG     G6(clock)
0029:009B 2413            STI       L19
0029:009D 2A8094          LDC       Str:FF="BS Dt %d\n"
0029:00A0 8914            NEWARR    a:1
0029:00A2 E1C98992        SUBISLL   L19, L18
0029:00A6 E110            CVTI2AA   
0029:00A8 E1AC00          DSTIXAC   0
0029:00AB 7001            CALLG     G1(printf)
0029:00AD 7006            CALLG     G6(clock)
0029:00AF 2412            STI       L18
0029:00B1 2A80A4          LDC       Str:109="Na Fib %d\n"
0029:00B4 8914            NEWARR    a:1
0029:00B6 2A8265          LDC       38u
0029:00B9 700B            CALLG     G11(bsvm2_natfib)
0029:00BB E110            CVTI2AA   
0029:00BD E1AC00          DSTIXAC   0
0029:00C0 7001            CALLG     G1(printf)
0029:00C2 7006            CALLG     G6(clock)
0029:00C4 2413            STI       L19
0029:00C6 2A80C4          LDC       Str:114="Na Dt %d\n"
0029:00C9 8914            NEWARR    a:1
0029:00CB E1C98992        SUBISLL   L19, L18
0029:00CF E110            CVTI2AA   
0029:00D1 E1AC00          DSTIXAC   0
0029:00D4 7001            CALLG     G1(printf)
0029:00D6 7006            CALLG     G6(clock)
0029:00D8 2412            STI       L18
0029:00DA 2AC20005        LDC       8192u
0029:00DE 700D            CALLG     G13(bstest/sorttst)
0029:00E0 7006            CALLG     G6(clock)
0029:00E2 2413            STI       L19
0029:00E4 2A80E4          LDC       Str:11E="Bs SortTst Dt %d\n"
0029:00E7 8914            NEWARR    a:1
0029:00E9 E1C98992        SUBISLL   L19, L18
0029:00ED E110            CVTI2AA   
0029:00EF E1AC00          DSTIXAC   0
0029:00F2 7001            CALLG     G1(printf)
0029:00F4 7006            CALLG     G6(clock)
0029:00F6 2412            STI       L18
0029:00F8 2AC20005        LDC       8192u
0029:00FC 700F            CALLG     G15(bsvm2_natsorttst)
0029:00FE 7006            CALLG     G6(clock)
0029:0100 2413            STI       L19
0029:0102 2A8104          LDC       Str:130="Na SortTst Dt %d\n"
0029:0105 8914            NEWARR    a:1
0029:0107 E1C98992        SUBISLL   L19, L18
0029:010B E110            CVTI2AA   
0029:010D E1AC00          DSTIXAC   0
0029:0110 7001            CALLG     G1(printf)
0029:0112 8811            NEWOBJ    G17(bstest/Foo2)
0029:0114 A9              DUPA      
0029:0115 2A15            LDC       1u
0029:0117 7212            CALLV     G18(bstest/Foo2/$CTOR$)
0029:0119 2902            STA       L2
0029:011B 2A35            LDC       3u
0029:011D E16D8113        STOSL     L2, G19(bstest/Foo2/x)
0029:0121 2A45            LDC       4u
0029:0123 E16D8114        STOSL     L2, G20(bstest/Foo2/y)
0029:0127 2A80AD          LDC       5d
0029:012A E16D8115        STOSL     L2, G21(bstest/Foo2/z)
0029:012E 2A8164          LDC       Str:142="FObj "
0029:0131 AB              PUSHA     
0029:0132 7001            CALLG     G1(printf)
0029:0134 2A8174          LDC       Str:148="%d "
0029:0137 8914            NEWARR    a:1
0029:0139 E16C8113        LDOSL     L2, G19(bstest/Foo2/x)
0029:013D E110            CVTI2AA   
0029:013F E1AC00          DSTIXAC   0
0029:0142 7001            CALLG     G1(printf)
0029:0144 2A8174          LDC       Str:148="%d "
0029:0147 8914            NEWARR    a:1
0029:0149 E16C8114        LDOSL     L2, G20(bstest/Foo2/y)
0029:014D E110            CVTI2AA   
0029:014F E1AC00          DSTIXAC   0
0029:0152 7001            CALLG     G1(printf)
0029:0154 2A24            LDC       Str:D7="%f\n"
0029:0156 8914            NEWARR    a:1
0029:0158 E16C8115        LDOSL     L2, G21(bstest/Foo2/z)
0029:015C E113            CVTD2AA   
0029:015E E1AC00          DSTIXAC   0
0029:0161 7001            CALLG     G1(printf)
0029:0163 2A8184          LDC       Str:14C="FObj Method %f\n"
0029:0166 8914            NEWARR    a:1
0029:0168 2802            LDA       L2
0029:016A 7219            CALLV     G25(bstest/Foo2/method0)
0029:016C E113            CVTD2AA   
0029:016E E1AC00          DSTIXAC   0
0029:0171 7001            CALLG     G1(printf)
0029:0173 2802            LDA       L2
0029:0175 8A              DELOBJ    
0029:0176 2A4C            LDC       2f
0029:0178 2A6C            LDC       3f
0029:017A E431            MKV2F     
0029:017C 2903            STA       L3
0029:017E 2A808C          LDC       4f
0029:0181 2A80AC          LDC       5f
0029:0184 E431            MKV2F     
0029:0186 2904            STA       L4
0029:0188 2803            LDA       L3
0029:018A 2804            LDA       L4
0029:018C E40E05          BINOPX    add.v2f
0029:018F 2905            STA       L5
0029:0191 2A2C            LDC       1f
0029:0193 AE              PUSHF     
0029:0194 AE              PUSHF     
0029:0195 AE              PUSHF     
0029:0196 E402            MKX4F     
0029:0198 E40706          STXL      L6
0029:019B AE              PUSHF     
0029:019C 2A2C            LDC       1f
0029:019E AE              PUSHF     
0029:019F AE              PUSHF     
0029:01A0 E402            MKX4F     
0029:01A2 E40707          STXL      L7
0029:01A5 E40606          LDXL      L6
0029:01A8 E40607          LDXL      L7
0029:01AB E40E57          BINOPX    cross.v3f
0029:01AE E40708          STXL      L8
0029:01B1 2A81A4          LDC       Str:15C="w2=(%f %f %f)\n"
0029:01B4 8934            NEWARR    a:3
0029:01B6 E40608          LDXL      L8
0029:01B9 E44C            LDX4FA    
0029:01BB E112            CVTF2AA   
0029:01BD E1AC00          DSTIXAC   0
0029:01C0 E40608          LDXL      L8
0029:01C3 E44D            LDX4FB    
0029:01C5 E112            CVTF2AA   
0029:01C7 E1AC02          DSTIXAC   1
0029:01CA E40608          LDXL      L8
0029:01CD E44E            LDX4FC    
0029:01CF E112            CVTF2AA   
0029:01D1 E1AC04          DSTIXAC   2
0029:01D4 7001            CALLG     G1(printf)
0029:01D6 2010            LDI       L16
0029:01D8 308014          JEQ       0x01E5
0029:01DB 2011            LDI       L17
0029:01DD 30800A          JEQ       0x01E5
0029:01E0 2A44            LDC       Str:EE="T\n"
0029:01E2 AB              PUSHA     
0029:01E3 7001            CALLG     G1(printf)
0029:01E5 898400          NEWARR    i:64
0029:01E8 290C            STA       L12
0029:01EA 280C            LDA       L12
0029:01EC E13840          LEARIC    32
0029:01EF 290D            STA       L13
0029:01F1 2A8455          LDC       69u
0029:01F4 280D            LDA       L13
0029:01F6 E154            STDRI     
0029:01F8 2A81B4          LDC       Str:16B="Oat %d\n"
0029:01FB 8914            NEWARR    a:1
0029:01FD E17F80C040      LDIXZLC   L12i, 32
0029:0202 E110            CVTI2AA   
0029:0204 E1AC00          DSTIXAC   0
0029:0207 7001            CALLG     G1(printf)
0029:0209 280C            LDA       L12
0029:020B E1B0            CVTA2PTR  
0029:020D 290E            STA       L14
0029:020F 280E            LDA       L14
0029:0211 8CE13840        LEARIC.P  32
0029:0215 290F            STA       L15
0029:0217 2A81C4          LDC       Str:173="Opt %d\n"
0029:021A 8914            NEWARR    a:1
0029:021C E1B280F0        LDDRPL    L15i
0029:0220 E1AC00          DSTIXAC   0
0029:0223 7001            CALLG     G1(printf)
0029:0225 280F            LDA       L15
0029:0227 280E            LDA       L14
0029:0229 E1B400          DIFFPTR   i:0
0029:022C 2410            STI       L16
0029:022E 2A81D4          LDC       Str:17B="Dptr %d\n"
0029:0231 8914            NEWARR    a:1
0029:0233 2010            LDI       L16
0029:0235 E110            CVTI2AA   
0029:0237 E1AC00          DSTIXAC   0
0029:023A 7001            CALLG     G1(printf)
0029:023C E11CA006        MVIC      L16, 3
0029:0240 E11CA208        MVIC      L17, 4
0029:0244 2A81E4          LDC       Str:184="RtA i=%d, j=%d\n"
0029:0247 8924            NEWARR    a:2
0029:0249 2010            LDI       L16
0029:024B E110            CVTI2AA   
0029:024D E1AC00          DSTIXAC   0
0029:0250 2011            LDI       L17
0029:0252 E110            CVTI2AA   
0029:0254 E1AC02          DSTIXAC   1
0029:0257 7001            CALLG     G1(printf)
0029:0259 808100          LDRL      L16i
0029:025C 808110          LDRL      L17i
0029:025F 701F            CALLG     G31(bstest/Fib/tst_ref)
0029:0261 A0              POPI      
0029:0262 2A8204          LDC       Str:194="RtB i=%d, j=%d\n"
0029:0265 8924            NEWARR    a:2
0029:0267 2010            LDI       L16
0029:0269 E110            CVTI2AA   
0029:026B E1AC00          DSTIXAC   0
0029:026E 2011            LDI       L17
0029:0270 E110            CVTI2AA   
0029:0272 E1AC02          DSTIXAC   1
0029:0275 7001            CALLG     G1(printf)
0029:0277 2010            LDI       L16
0029:0279 7021            CALLG     G33(bstest/Fib/tst_switch)
0029:027B 2411            STI       L17
0029:027D 2A8224          LDC       Str:1A4="St i=%d, j=%d\n"
0029:0280 8924            NEWARR    a:2
0029:0282 2010            LDI       L16
0029:0284 E110            CVTI2AA   
0029:0286 E1AC00          DSTIXAC   0
0029:0289 2011            LDI       L17
0029:028B E110            CVTI2AA   
0029:028D E1AC02          DSTIXAC   1
0029:0290 7001            CALLG     G1(printf)
0029:0292 E1E0881002      ADDILLC   L16, L16, 2
0029:0297 E1EAC44811      MULILLL   L17, L16, L17
0029:029C 2A8234          LDC       Str:1B3="St2 i=%d, j=%d\n"
0029:029F 8924            NEWARR    a:2
0029:02A1 2010            LDI       L16
0029:02A3 E110            CVTI2AA   
0029:02A5 E1AC00          DSTIXAC   0
0029:02A8 2011            LDI       L17
0029:02AA E110            CVTI2AA   
0029:02AC E1AC02          DSTIXAC   1
0029:02AF 7001            CALLG     G1(printf)
0029:02B1 7024            CALLG     G36(bstest/Fib/tst_func)
0029:02B3 7025            CALLG     G37(bstest/Fib/tst_func2)
0029:02B5 7026            CALLG     G38(bstest/Fib/tst_letlec)
0029:02B7 7027            CALLG     G39(bstest/Fib/tst_tryex)
0029:02B9 7028            CALLG     G40(bstest/Fib/tst_decjpg)
0029:02BB E144            LBLCLNP   
0029:02BD E14200          DFXOBJ    L0, G0(bstest/Foo)
0029:02C0 E40906          DFXX      L6
0029:02C3 E40907          DFXX      L7
0029:02C6 E40908          DFXX      L8
0029:02C9 79              RETV      
	Avg B/tk=1.281867
42: fopen ?
43: fclose ?
44: fread ?
45: fwrite ?
46: fseek ?
47: ftell ?
48: readfile(CsRi)Qh:
0030:0000 2803            LDA       L3
0030:0002 2A14            LDC       Str:1C3="rb"
0030:0004 7000            CALLG     G0(fopen)
0030:0006 2901            STA       L1
0030:0008 E19F018004      JNENULLL  L1, 0x000F
0030:000D AB              PUSHA     
0030:000E 78              RETA      
0030:000F 2801            LDA       L1
0030:0011 AC              PUSHI     
0030:0012 2A25            LDC       2u
0030:0014 7002            CALLG     G2(fseek)
0030:0016 A0              POPI      
0030:0017 2801            LDA       L1
0030:0019 7003            CALLG     G3(ftell)
0030:001B 2402            STI       L2
0030:001D 2801            LDA       L1
0030:001F AC              PUSHI     
0030:0020 AC              PUSHI     
0030:0021 7002            CALLG     G2(fseek)
0030:0023 A0              POPI      
0030:0024 2002            LDI       L2
0030:0026 8906            NEWARR    b:0
0030:0028 2900            STA       L0
0030:002A 2800            LDA       L0
0030:002C E1B0            CVTA2PTR  
0030:002E 2A15            LDC       1u
0030:0030 2002            LDI       L2
0030:0032 2801            LDA       L1
0030:0034 7004            CALLG     G4(fread)
0030:0036 A0              POPI      
0030:0037 2801            LDA       L1
0030:0039 7005            CALLG     G5(fclose)
0030:003B A0              POPI      
0030:003C 2002            LDI       L2
0030:003E E14F40          STDRVL    L4i
0030:0041 7A04            RET2      L0a
	Avg B/tk=0.736264
49: DCTSZ:00000000(i)
50: DCTSZ2:00000000(i)
51: JPG_SOF0:00000000(i)
52: JPG_SOF1:00000000(i)
53: JPG_SOF2:00000000(i)
54: JPG_SOF3:00000000(i)
55: JPG_DHT:00000000(i)
56: JPG_SOF5:00000000(i)
57: JPG_SOF6:00000000(i)
58: JPG_SOF7:00000000(i)
59: JPG_JPG:00000000(i)
60: JPG_SOF9:00000000(i)
61: JPG_SOF10:00000000(i)
62: JPG_SOF11:00000000(i)
63: JPG_DAC:00000000(i)
64: JPG_SOF13:00000000(i)
65: JPG_SOF14:00000000(i)
66: JPG_SOF15:00000000(i)
67: JPG_RST0:00000000(i)
68: JPG_RST1:00000000(i)
69: JPG_RST2:00000000(i)
70: JPG_RST3:00000000(i)
71: JPG_RST4:00000000(i)
72: JPG_RST5:00000000(i)
73: JPG_RST6:00000000(i)
74: JPG_RST7:00000000(i)
75: JPG_SOI:00000000(i)
76: JPG_EOI:00000000(i)
77: JPG_SOS:00000000(i)
78: JPG_DQT:00000000(i)
79: JPG_DNL:00000000(i)
80: JPG_DRI:00000000(i)
81: JPG_DHP:00000000(i)
82: JPG_EXP:00000000(i)
83: JPG_APP0:00000000(i)
84: JPG_APP1:00000000(i)
85: JPG_APP2:00000000(i)
86: JPG_APP3:00000000(i)
87: JPG_APP4:00000000(i)
88: JPG_APP5:00000000(i)
89: JPG_APP6:00000000(i)
90: JPG_APP7:00000000(i)
91: JPG_APP8:00000000(i)
92: JPG_APP9:00000000(i)
93: JPG_APP10:00000000(i)
94: JPG_APP11:00000000(i)
95: JPG_APP12:00000000(i)
96: JPG_APP13:00000000(i)
97: JPG_APP14:00000000(i)
98: JPG_APP15:00000000(i)
99: JPG_JPG0:00000000(i)
100: JPG_JPG1:00000000(i)
101: JPG_JPG2:00000000(i)
102: JPG_JPG3:00000000(i)
103: JPG_JPG4:00000000(i)
104: JPG_JPG5:00000000(i)
105: JPG_JPG6:00000000(i)
106: JPG_JPG7:00000000(i)
107: JPG_JPG8:00000000(i)
108: JPG_JPG9:00000000(i)
109: JPG_JPG10:00000000(i)
110: JPG_JPG11:00000000(i)
111: JPG_JPG12:00000000(i)
112: JPG_JPG13:00000000(i)
113: JPG_COM:00000000(i)
114: pdjpg_marker:00010011(QCs)
115: pdjpg_zigzag:00010000(Qi)
116: pdjpg_zigzag2:02000000(A64i)
117: u16:00000009(t)
118: s16:00000007(s)
119: u32:00000005(j)
120: s32:00000000(i)
121: u64:0000000A(y)
122: u64:00000001(x)
123: PDJPG_Context {
124: PDJPG_Context/$CTOR$:0000017C(L124)
125: PDJPG_Context/huff_css:00050006(Ph)
126: PDJPG_Context/huff_cs:00050006(Ph)
127: PDJPG_Context/huff_ct:00050006(Ph)
128: PDJPG_Context/huff_win:00000005(j)
129: PDJPG_Context/huff_pos:00000000(i)
130: PDJPG_Context/huff_isend:00000000(i)
131: PDJPG_Context/huff_code:00050009(Pt)
132: PDJPG_Context/huff_mask:00050009(Pt)
133: PDJPG_Context/huff_next:00050007(Ps)
134: PDJPG_Context/huff_len:00050006(Ph)
135: PDJPG_Context/huff_idx:00050007(Ps)
136: PDJPG_Context/jpg_qt:00010006(Qh)
137: PDJPG_Context/xs:00000000(i)
138: PDJPG_Context/ys:00000000(i)
139: PDJPG_Context/lxs:00000000(i)
140: PDJPG_Context/lys:00000000(i)
141: PDJPG_Context/jpg_cid:00010006(Qh)
142: PDJPG_Context/jpg_ch:00010006(Qh)
143: PDJPG_Context/jpg_cv:00010006(Qh)
144: PDJPG_Context/jpg_qid:00010006(Qh)
145: PDJPG_Context/jpg_cxi:00010000(Qi)
146: PDJPG_Context/jpg_cyi:00010000(Qi)
147: PDJPG_Context/jpg_nc:00000000(i)
148: PDJPG_Context/jpg_chm:00000000(i)
149: PDJPG_Context/jpg_chn:00000000(i)
150: PDJPG_Context/jpg_scid:00010000(Qi)
151: PDJPG_Context/jpg_scn:00010000(Qi)
152: PDJPG_Context/jpg_sibuf:00020006(QQh)
153: PDJPG_Context/jpg_sabuf:00010006(Qh)
154: PDJPG_Context/jpg_schs:00010000(Qi)
155: PDJPG_Context/jpg_scvs:00010000(Qi)
156: PDJPG_Context/jpg_schsci:00010000(Qi)
157: PDJPG_Context/jpg_scvsci:00010000(Qi)
158: PDJPG_Context/jpg_is420:00000006(h)
159: PDJPG_Context/jpg_is444:00000006(h)
160: PDJPG_Context/jpg_rdct:00000006(h)
}
124: PDJPG_Context/$CTOR$()v:
007C:0000 89C08009        NEWARR    t:2048
007C:0004 E1B0            CVTA2PTR  
007C:0006 E12100          STTHIS    G0(PDJPG_Context/huff_code)
007C:0009 89C08009        NEWARR    t:2048
007C:000D E1B0            CVTA2PTR  
007C:000F E12101          STTHIS    G1(PDJPG_Context/huff_mask)
007C:0012 89C08007        NEWARR    s:2048
007C:0016 E1B0            CVTA2PTR  
007C:0018 E12102          STTHIS    G2(PDJPG_Context/huff_next)
007C:001B 89C08006        NEWARR    b:2048
007C:001F E1B0            CVTA2PTR  
007C:0021 E12103          STTHIS    G3(PDJPG_Context/huff_len)
007C:0024 89C08007        NEWARR    s:2048
007C:0028 E1B0            CVTA2PTR  
007C:002A E12104          STTHIS    G4(PDJPG_Context/huff_idx)
007C:002D 899006          NEWARR    b:256
007C:0030 E12105          STTHIS    G5(PDJPG_Context/jpg_qt)
007C:0033 898106          NEWARR    b:16
007C:0036 E12106          STTHIS    G6(PDJPG_Context/jpg_cid)
007C:0039 898106          NEWARR    b:16
007C:003C E12107          STTHIS    G7(PDJPG_Context/jpg_ch)
007C:003F 898106          NEWARR    b:16
007C:0042 E12108          STTHIS    G8(PDJPG_Context/jpg_cv)
007C:0045 898106          NEWARR    b:16
007C:0048 E12109          STTHIS    G9(PDJPG_Context/jpg_qid)
007C:004B 898100          NEWARR    i:16
007C:004E E1210A          STTHIS    G10(PDJPG_Context/jpg_cxi)
007C:0051 898100          NEWARR    i:16
007C:0054 E1210B          STTHIS    G11(PDJPG_Context/jpg_cyi)
007C:0057 8940            NEWARR    i:4
007C:0059 E1210C          STTHIS    G12(PDJPG_Context/jpg_scid)
007C:005C 8940            NEWARR    i:4
007C:005E E1210D          STTHIS    G13(PDJPG_Context/jpg_scn)
007C:0061 8944            NEWARR    a:4
007C:0063 E1210E          STTHIS    G14(PDJPG_Context/jpg_sibuf)
007C:0066 8940            NEWARR    i:4
007C:0068 E1210F          STTHIS    G15(PDJPG_Context/jpg_schs)
007C:006B 8940            NEWARR    i:4
007C:006D E12110          STTHIS    G16(PDJPG_Context/jpg_scvs)
007C:0070 8940            NEWARR    i:4
007C:0072 E12111          STTHIS    G17(PDJPG_Context/jpg_schsci)
007C:0075 8940            NEWARR    i:4
007C:0077 E12112          STTHIS    G18(PDJPG_Context/jpg_scvsci)
007C:007A 79              RETV      
	Avg B/tk=0.702857
125: PDJPG_Context/huff_css ?
126: PDJPG_Context/huff_cs ?
127: PDJPG_Context/huff_ct ?
128: PDJPG_Context/huff_win ?
129: PDJPG_Context/huff_pos ?
130: PDJPG_Context/huff_isend ?
131: PDJPG_Context/huff_code ?
132: PDJPG_Context/huff_mask ?
133: PDJPG_Context/huff_next ?
134: PDJPG_Context/huff_len ?
135: PDJPG_Context/huff_idx ?
136: PDJPG_Context/jpg_qt ?
137: PDJPG_Context/xs ?
138: PDJPG_Context/ys ?
139: PDJPG_Context/lxs ?
140: PDJPG_Context/lys ?
141: PDJPG_Context/jpg_cid ?
142: PDJPG_Context/jpg_ch ?
143: PDJPG_Context/jpg_cv ?
144: PDJPG_Context/jpg_qid ?
145: PDJPG_Context/jpg_cxi ?
146: PDJPG_Context/jpg_cyi ?
147: PDJPG_Context/jpg_nc ?
148: PDJPG_Context/jpg_chm ?
149: PDJPG_Context/jpg_chn ?
150: PDJPG_Context/jpg_scid ?
151: PDJPG_Context/jpg_scn ?
152: PDJPG_Context/jpg_sibuf ?
153: PDJPG_Context/jpg_sabuf ?
154: PDJPG_Context/jpg_schs ?
155: PDJPG_Context/jpg_scvs ?
156: PDJPG_Context/jpg_schsci ?
157: PDJPG_Context/jpg_scvsci ?
158: PDJPG_Context/jpg_is420 ?
159: PDJPG_Context/jpg_is444 ?
160: PDJPG_Context/jpg_rdct ?
161: clamp255(i)i:
00A1:0000 6A00            CMPILC    L0, 0
00A1:0002 3504            JGE       0x0006
00A1:0004 6400            RETC      0i
00A1:0006 6A81FE          CMPILC    L0, 255
00A1:0009 3406            JLE       0x000E
00A1:000B 648FF5          RETC      255u
00A1:000E 7A00            RET2      L0i
	Avg B/tk=0.551724
162: memcpy(PhPhi)v:
00A2:0000 2B04            MVA       L0, L4
00A2:0002 2800            LDA       L0
00A2:0004 2005            LDI       L5
00A2:0006 8CE135          LEARB.P   
00A2:0009 2902            STA       L2
00A2:000B 2B13            MVA       L1, L3
00A2:000D 7B              LABEL     
00A2:000E 2800            LDA       L0
00A2:0010 2802            LDA       L2
00A2:0012 8C3C            CMPA.P    
00A2:0014 358036          JGE       0x0032
00A2:0017 2800            LDA       L0
00A2:0019 A9              DUPA      
00A2:001A 8CE13D02        LEARBC.P  1
00A2:001E 2900            STA       L0
00A2:0020 8CE159          LDDRUB.P  
00A2:0023 2801            LDA       L1
00A2:0025 A9              DUPA      
00A2:0026 8CE13D02        LEARBC.P  1
00A2:002A 2901            STA       L1
00A2:002C 8CE15E          STDRB.P   
00A2:002F 378047          JMP       0x000E
00A2:0032 79              RETV      
	Avg B/tk=1.275000
163: memset(Phhi)v:
00A3:0000 2B02            MVA       L0, L2
00A3:0002 2800            LDA       L0
00A3:0004 2004            LDI       L4
00A3:0006 8CE135          LEARB.P   
00A3:0009 2901            STA       L1
00A3:000B 7B              LABEL     
00A3:000C 2800            LDA       L0
00A3:000E 2801            LDA       L1
00A3:0010 8C3C            CMPA.P    
00A3:0012 358022          JGE       0x0026
00A3:0015 2003            LDI       L3
00A3:0017 2800            LDA       L0
00A3:0019 A9              DUPA      
00A3:001A 8CE13D02        LEARBC.P  1
00A3:001E 2900            STA       L0
00A3:0020 8CE15E          STDRB.P   
00A3:0023 378033          JMP       0x000C
00A3:0026 79              RETV      
	Avg B/tk=1.218750
164: strcmp(PcPc)i:
00A4:0000 7B              LABEL     
00A4:0001 E1B206          LDDRPL    L0b
00A4:0004 308046          JEQ       0x002A
00A4:0007 E1B216          LDDRPL    L1b
00A4:000A 30803A          JEQ       0x002A
00A4:000D E1B206          LDDRPL    L0b
00A4:0010 E1B216          LDDRPL    L1b
00A4:0013 38              CMPI      
00A4:0014 318026          JNE       0x002A
00A4:0017 2800            LDA       L0
00A4:0019 8CE13D02        LEARBC.P  1
00A4:001D 2900            STA       L0
00A4:001F 2801            LDA       L1
00A4:0021 8CE13D02        LEARBC.P  1
00A4:0025 2901            STA       L1
00A4:0027 378051          JMP       0x0001
00A4:002A E1B206          LDDRPL    L0b
00A4:002D 318014          JNE       0x003A
00A4:0030 E1B216          LDDRPL    L1b
00A4:0033 318004          JNE       0x0038
00A4:0036 6400            RETC      0i
00A4:0038 6415            RETC      1u
00A4:003A E1B216          LDDRPL    L1b
00A4:003D 318004          JNE       0x0042
00A4:0040 6410            RETC      -1i
00A4:0042 E1B206          LDDRPL    L0b
00A4:0045 E1B216          LDDRPL    L1b
00A4:0048 38              CMPI      
00A4:0049 348004          JLE       0x004E
00A4:004C 6410            RETC      -1i
00A4:004E E1B206          LDDRPL    L0b
00A4:0051 E1B216          LDDRPL    L1b
00A4:0054 38              CMPI      
00A4:0055 358004          JGE       0x005A
00A4:0058 6415            RETC      1u
00A4:005A 6400            RETC      0i
	Avg B/tk=0.938775
165: strlen(Pc)i:
00A5:0000 E11C00          MVIC      L0, 0
00A5:0003 7B              LABEL     
00A5:0004 E1B216          LDDRPL    L1b
00A5:0007 3018            JEQ       0x0015
00A5:0009 2801            LDA       L1
00A5:000B 8CE13D02        LEARBC.P  1
00A5:000F 2901            STA       L1
00A5:0011 6E00            INCIL     L0
00A5:0013 3721            JMP       0x0004
00A5:0015 7A00            RET2      L0i
	Avg B/tk=0.851852
166: PDJPG_AllocContext()L123:
00A6:0000 8800            NEWOBJ    G0(PDJPG_Context)
00A6:0002 A9              DUPA      
00A6:0003 7201            CALLV     G1(PDJPG_Context/$CTOR$)
00A6:0005 2900            STA       L0
00A6:0007 7A04            RET2      L0a
	Avg B/tk=0.529411
167: PDJPG_FreeContext(L123)v:
00A7:0000 E11C00          MVIC      L0, 0
00A7:0003 7B              LABEL     
00A7:0004 6A08            CMPILC    L0, 4
00A7:0006 35802E          JGE       0x0020
00A7:0009 E16C10          LDOSL     L1, G0(PDJPG_Context/jpg_sibuf)
00A7:000C 2000            LDI       L0
00A7:000E 4C              LDIXA     
00A7:000F E19C8010        JEQNULL   0x001B
00A7:0013 E16C10          LDOSL     L1, G0(PDJPG_Context/jpg_sibuf)
00A7:0016 2000            LDI       L0
00A7:0018 4C              LDIXA     
00A7:0019 8A              DELOBJ    
00A7:001A 7B              LABEL     
00A7:001B 6E00            INCIL     L0
00A7:001D 378037          JMP       0x0004
00A7:0020 2801            LDA       L1
00A7:0022 8A              DELOBJ    
00A7:0023 79              RETV      
	Avg B/tk=0.947368
168: PDJPG_Init()v:
00A8:0000 7E00            LDGS      G0(PDJPG_Init/init)
00A8:0002 3002            JEQ       0x0005
00A8:0004 79              RETV      
00A8:0005 2A15            LDC       1u
00A8:0007 7F00            STGS      G0(PDJPG_Init/init)
00A8:0009 79              RETV      
	Avg B/tk=0.357143
169: PDJPG_TransIDCT_Horiz(PiPi)v:
00A9:0000 280E            LDA       L14
00A9:0002 8CE150          LDDRI.P   
00A9:0005 B280B6          MULIC     91
00A9:0008 2400            STI       L0
00A9:000A 280E            LDA       L14
00A9:000C 8C5008          LDIXIC.P  4
00A9:000F B280B6          MULIC     91
00A9:0012 2401            STI       L1
00A9:0014 280E            LDA       L14
00A9:0016 8C5004          LDIXIC.P  2
00A9:0019 B280EC          MULIC     118
00A9:001C 2402            STI       L2
00A9:001E 280E            LDA       L14
00A9:0020 8C5004          LDIXIC.P  2
00A9:0023 B262            MULIC     49
00A9:0025 2403            STI       L3
00A9:0027 280E            LDA       L14
00A9:0029 8C500C          LDIXIC.P  6
00A9:002C B280EC          MULIC     118
00A9:002F 2404            STI       L4
00A9:0031 280E            LDA       L14
00A9:0033 8C500C          LDIXIC.P  6
00A9:0036 B262            MULIC     49
00A9:0038 2405            STI       L5
00A9:003A E1C802          ADDISLL   L0, L2
00A9:003D B801            ADDIL     L1
00A9:003F B805            ADDIL     L5
00A9:0041 2406            STI       L6
00A9:0043 E1C803          ADDISLL   L0, L3
00A9:0046 B901            SUBIL     L1
00A9:0048 B904            SUBIL     L4
00A9:004A 2407            STI       L7
00A9:004C E1C903          SUBISLL   L0, L3
00A9:004F B901            SUBIL     L1
00A9:0051 B804            ADDIL     L4
00A9:0053 2408            STI       L8
00A9:0055 E1C902          SUBISLL   L0, L2
00A9:0058 B801            ADDIL     L1
00A9:005A B905            SUBIL     L5
00A9:005C 2409            STI       L9
00A9:005E 280E            LDA       L14
00A9:0060 8C5002          LDIXIC.P  1
00A9:0063 B280FC          MULIC     126
00A9:0066 280E            LDA       L14
00A9:0068 8C5006          LDIXIC.P  3
00A9:006B B280D4          MULIC     106
00A9:006E 00              ADDI      
00A9:006F 280E            LDA       L14
00A9:0071 8C500A          LDIXIC.P  5
00A9:0074 B2808E          MULIC     71
00A9:0077 00              ADDI      
00A9:0078 280E            LDA       L14
00A9:007A 8C500E          LDIXIC.P  7
00A9:007D B232            MULIC     25
00A9:007F 00              ADDI      
00A9:0080 240A            STI       L10
00A9:0082 280E            LDA       L14
00A9:0084 8C5002          LDIXIC.P  1
00A9:0087 B280D4          MULIC     106
00A9:008A 280E            LDA       L14
00A9:008C 8C5006          LDIXIC.P  3
00A9:008F B232            MULIC     25
00A9:0091 01              SUBI      
00A9:0092 280E            LDA       L14
00A9:0094 8C500A          LDIXIC.P  5
00A9:0097 B280FC          MULIC     126
00A9:009A 01              SUBI      
00A9:009B 280E            LDA       L14
00A9:009D 8C500E          LDIXIC.P  7
00A9:00A0 B2808E          MULIC     71
00A9:00A3 01              SUBI      
00A9:00A4 240B            STI       L11
00A9:00A6 280E            LDA       L14
00A9:00A8 8C5002          LDIXIC.P  1
00A9:00AB B2808E          MULIC     71
00A9:00AE 280E            LDA       L14
00A9:00B0 8C5006          LDIXIC.P  3
00A9:00B3 B280FC          MULIC     126
00A9:00B6 01              SUBI      
00A9:00B7 280E            LDA       L14
00A9:00B9 8C500A          LDIXIC.P  5
00A9:00BC B232            MULIC     25
00A9:00BE 00              ADDI      
00A9:00BF 280E            LDA       L14
00A9:00C1 8C500E          LDIXIC.P  7
00A9:00C4 B280D4          MULIC     106
00A9:00C7 00              ADDI      
00A9:00C8 240C            STI       L12
00A9:00CA 280E            LDA       L14
00A9:00CC 8C5002          LDIXIC.P  1
00A9:00CF B232            MULIC     25
00A9:00D1 280E            LDA       L14
00A9:00D3 8C5006          LDIXIC.P  3
00A9:00D6 B2808E          MULIC     71
00A9:00D9 01              SUBI      
00A9:00DA 280E            LDA       L14
00A9:00DC 8C500A          LDIXIC.P  5
00A9:00DF B280D4          MULIC     106
00A9:00E2 00              ADDI      
00A9:00E3 280E            LDA       L14
00A9:00E5 8C500E          LDIXIC.P  7
00A9:00E8 B280FC          MULIC     126
00A9:00EB 01              SUBI      
00A9:00EC 240D            STI       L13
00A9:00EE E1C86A          ADDISLL   L6, L10
00A9:00F1 280F            LDA       L15
00A9:00F3 8CE154          STDRI.P   
00A9:00F6 E1C87B          ADDISLL   L7, L11
00A9:00F9 280F            LDA       L15
00A9:00FB 8C5402          STIXIC.P  1
00A9:00FE E1C8840C        ADDISLL   L8, L12
00A9:0102 280F            LDA       L15
00A9:0104 8C5404          STIXIC.P  2
00A9:0107 E1C8848D        ADDISLL   L9, L13
00A9:010B 280F            LDA       L15
00A9:010D 8C5406          STIXIC.P  3
00A9:0110 E1C9848D        SUBISLL   L9, L13
00A9:0114 280F            LDA       L15
00A9:0116 8C5408          STIXIC.P  4
00A9:0119 E1C9840C        SUBISLL   L8, L12
00A9:011D 280F            LDA       L15
00A9:011F 8C540A          STIXIC.P  5
00A9:0122 E1C97B          SUBISLL   L7, L11
00A9:0125 280F            LDA       L15
00A9:0127 8C540C          STIXIC.P  6
00A9:012A E1C96A          SUBISLL   L6, L10
00A9:012D 280F            LDA       L15
00A9:012F 8C540E          STIXIC.P  7
00A9:0132 79              RETV      
	Avg B/tk=0.962382
170: PDJPG_TransIDCT_Vert(PiPi)v:
00AA:0000 280E            LDA       L14
00AA:0002 8CE150          LDDRI.P   
00AA:0005 B280B6          MULIC     91
00AA:0008 2400            STI       L0
00AA:000A 280E            LDA       L14
00AA:000C 8C5040          LDIXIC.P  32
00AA:000F B280B6          MULIC     91
00AA:0012 2401            STI       L1
00AA:0014 280E            LDA       L14
00AA:0016 8C5020          LDIXIC.P  16
00AA:0019 B280EC          MULIC     118
00AA:001C 2402            STI       L2
00AA:001E 280E            LDA       L14
00AA:0020 8C5020          LDIXIC.P  16
00AA:0023 B262            MULIC     49
00AA:0025 2403            STI       L3
00AA:0027 280E            LDA       L14
00AA:0029 8C5060          LDIXIC.P  48
00AA:002C B280EC          MULIC     118
00AA:002F 2404            STI       L4
00AA:0031 280E            LDA       L14
00AA:0033 8C5060          LDIXIC.P  48
00AA:0036 B262            MULIC     49
00AA:0038 2405            STI       L5
00AA:003A E1C802          ADDISLL   L0, L2
00AA:003D B801            ADDIL     L1
00AA:003F B805            ADDIL     L5
00AA:0041 2406            STI       L6
00AA:0043 E1C803          ADDISLL   L0, L3
00AA:0046 B901            SUBIL     L1
00AA:0048 B904            SUBIL     L4
00AA:004A 2407            STI       L7
00AA:004C E1C903          SUBISLL   L0, L3
00AA:004F B901            SUBIL     L1
00AA:0051 B804            ADDIL     L4
00AA:0053 2408            STI       L8
00AA:0055 E1C902          SUBISLL   L0, L2
00AA:0058 B801            ADDIL     L1
00AA:005A B905            SUBIL     L5
00AA:005C 2409            STI       L9
00AA:005E 280E            LDA       L14
00AA:0060 8C5010          LDIXIC.P  8
00AA:0063 B280FC          MULIC     126
00AA:0066 280E            LDA       L14
00AA:0068 8C5030          LDIXIC.P  24
00AA:006B B280D4          MULIC     106
00AA:006E 00              ADDI      
00AA:006F 280E            LDA       L14
00AA:0071 8C5050          LDIXIC.P  40
00AA:0074 B2808E          MULIC     71
00AA:0077 00              ADDI      
00AA:0078 280E            LDA       L14
00AA:007A 8C5070          LDIXIC.P  56
00AA:007D B232            MULIC     25
00AA:007F 00              ADDI      
00AA:0080 240A            STI       L10
00AA:0082 280E            LDA       L14
00AA:0084 8C5010          LDIXIC.P  8
00AA:0087 B280D4          MULIC     106
00AA:008A 280E            LDA       L14
00AA:008C 8C5030          LDIXIC.P  24
00AA:008F B232            MULIC     25
00AA:0091 01              SUBI      
00AA:0092 280E            LDA       L14
00AA:0094 8C5050          LDIXIC.P  40
00AA:0097 B280FC          MULIC     126
00AA:009A 01              SUBI      
00AA:009B 280E            LDA       L14
00AA:009D 8C5070          LDIXIC.P  56
00AA:00A0 B2808E          MULIC     71
00AA:00A3 01              SUBI      
00AA:00A4 240B            STI       L11
00AA:00A6 280E            LDA       L14
00AA:00A8 8C5010          LDIXIC.P  8
00AA:00AB B2808E          MULIC     71
00AA:00AE 280E            LDA       L14
00AA:00B0 8C5030          LDIXIC.P  24
00AA:00B3 B280FC          MULIC     126
00AA:00B6 01              SUBI      
00AA:00B7 280E            LDA       L14
00AA:00B9 8C5050          LDIXIC.P  40
00AA:00BC B232            MULIC     25
00AA:00BE 00              ADDI      
00AA:00BF 280E            LDA       L14
00AA:00C1 8C5070          LDIXIC.P  56
00AA:00C4 B280D4          MULIC     106
00AA:00C7 00              ADDI      
00AA:00C8 240C            STI       L12
00AA:00CA 280E            LDA       L14
00AA:00CC 8C5010          LDIXIC.P  8
00AA:00CF B232            MULIC     25
00AA:00D1 280E            LDA       L14
00AA:00D3 8C5030          LDIXIC.P  24
00AA:00D6 B2808E          MULIC     71
00AA:00D9 01              SUBI      
00AA:00DA 280E            LDA       L14
00AA:00DC 8C5050          LDIXIC.P  40
00AA:00DF B280D4          MULIC     106
00AA:00E2 00              ADDI      
00AA:00E3 280E            LDA       L14
00AA:00E5 8C5070          LDIXIC.P  56
00AA:00E8 B280FC          MULIC     126
00AA:00EB 01              SUBI      
00AA:00EC 240D            STI       L13
00AA:00EE E1C86A          ADDISLL   L6, L10
00AA:00F1 280F            LDA       L15
00AA:00F3 8CE154          STDRI.P   
00AA:00F6 E1C87B          ADDISLL   L7, L11
00AA:00F9 280F            LDA       L15
00AA:00FB 8C5410          STIXIC.P  8
00AA:00FE E1C8840C        ADDISLL   L8, L12
00AA:0102 280F            LDA       L15
00AA:0104 8C5420          STIXIC.P  16
00AA:0107 E1C8848D        ADDISLL   L9, L13
00AA:010B 280F            LDA       L15
00AA:010D 8C5430          STIXIC.P  24
00AA:0110 E1C9848D        SUBISLL   L9, L13
00AA:0114 280F            LDA       L15
00AA:0116 8C5440          STIXIC.P  32
00AA:0119 E1C9840C        SUBISLL   L8, L12
00AA:011D 280F            LDA       L15
00AA:011F 8C5450          STIXIC.P  40
00AA:0122 E1C97B          SUBISLL   L7, L11
00AA:0125 280F            LDA       L15
00AA:0127 8C5460          STIXIC.P  48
00AA:012A E1C96A          SUBISLL   L6, L10
00AA:012D 280F            LDA       L15
00AA:012F 8C5470          STIXIC.P  56
00AA:0132 79              RETV      
	Avg B/tk=0.962382
171: BGBBTJ_JPG_TransIDCT_Vert2(PiPii)v:
00AB:0000 280E            LDA       L14
00AB:0002 8CE150          LDDRI.P   
00AB:0005 B280B6          MULIC     91
00AB:0008 2400            STI       L0
00AB:000A 280E            LDA       L14
00AB:000C 8C5040          LDIXIC.P  32
00AB:000F B280B6          MULIC     91
00AB:0012 2401            STI       L1
00AB:0014 280E            LDA       L14
00AB:0016 8C5020          LDIXIC.P  16
00AB:0019 B280EC          MULIC     118
00AB:001C 2402            STI       L2
00AB:001E 280E            LDA       L14
00AB:0020 8C5020          LDIXIC.P  16
00AB:0023 B262            MULIC     49
00AB:0025 2403            STI       L3
00AB:0027 280E            LDA       L14
00AB:0029 8C5060          LDIXIC.P  48
00AB:002C B280EC          MULIC     118
00AB:002F 2404            STI       L4
00AB:0031 280E            LDA       L14
00AB:0033 8C5060          LDIXIC.P  48
00AB:0036 B262            MULIC     49
00AB:0038 2405            STI       L5
00AB:003A E1C802          ADDISLL   L0, L2
00AB:003D B801            ADDIL     L1
00AB:003F B805            ADDIL     L5
00AB:0041 2406            STI       L6
00AB:0043 E1C803          ADDISLL   L0, L3
00AB:0046 B901            SUBIL     L1
00AB:0048 B904            SUBIL     L4
00AB:004A 2407            STI       L7
00AB:004C E1C903          SUBISLL   L0, L3
00AB:004F B901            SUBIL     L1
00AB:0051 B804            ADDIL     L4
00AB:0053 2408            STI       L8
00AB:0055 E1C902          SUBISLL   L0, L2
00AB:0058 B801            ADDIL     L1
00AB:005A B905            SUBIL     L5
00AB:005C 2409            STI       L9
00AB:005E 280E            LDA       L14
00AB:0060 8C5010          LDIXIC.P  8
00AB:0063 B280FC          MULIC     126
00AB:0066 280E            LDA       L14
00AB:0068 8C5030          LDIXIC.P  24
00AB:006B B280D4          MULIC     106
00AB:006E 00              ADDI      
00AB:006F 280E            LDA       L14
00AB:0071 8C5050          LDIXIC.P  40
00AB:0074 B2808E          MULIC     71
00AB:0077 00              ADDI      
00AB:0078 280E            LDA       L14
00AB:007A 8C5070          LDIXIC.P  56
00AB:007D B232            MULIC     25
00AB:007F 00              ADDI      
00AB:0080 240A            STI       L10
00AB:0082 280E            LDA       L14
00AB:0084 8C5010          LDIXIC.P  8
00AB:0087 B280D4          MULIC     106
00AB:008A 280E            LDA       L14
00AB:008C 8C5030          LDIXIC.P  24
00AB:008F B232            MULIC     25
00AB:0091 01              SUBI      
00AB:0092 280E            LDA       L14
00AB:0094 8C5050          LDIXIC.P  40
00AB:0097 B280FC          MULIC     126
00AB:009A 01              SUBI      
00AB:009B 280E            LDA       L14
00AB:009D 8C5070          LDIXIC.P  56
00AB:00A0 B2808E          MULIC     71
00AB:00A3 01              SUBI      
00AB:00A4 240B            STI       L11
00AB:00A6 280E            LDA       L14
00AB:00A8 8C5010          LDIXIC.P  8
00AB:00AB B2808E          MULIC     71
00AB:00AE 280E            LDA       L14
00AB:00B0 8C5030          LDIXIC.P  24
00AB:00B3 B280FC          MULIC     126
00AB:00B6 01              SUBI      
00AB:00B7 280E            LDA       L14
00AB:00B9 8C5050          LDIXIC.P  40
00AB:00BC B232            MULIC     25
00AB:00BE 00              ADDI      
00AB:00BF 280E            LDA       L14
00AB:00C1 8C5070          LDIXIC.P  56
00AB:00C4 B280D4          MULIC     106
00AB:00C7 00              ADDI      
00AB:00C8 240C            STI       L12
00AB:00CA 280E            LDA       L14
00AB:00CC 8C5010          LDIXIC.P  8
00AB:00CF B232            MULIC     25
00AB:00D1 280E            LDA       L14
00AB:00D3 8C5030          LDIXIC.P  24
00AB:00D6 B2808E          MULIC     71
00AB:00D9 01              SUBI      
00AB:00DA 280E            LDA       L14
00AB:00DC 8C5050          LDIXIC.P  40
00AB:00DF B280D4          MULIC     106
00AB:00E2 00              ADDI      
00AB:00E3 280E            LDA       L14
00AB:00E5 8C5070          LDIXIC.P  56
00AB:00E8 B280FC          MULIC     126
00AB:00EB 01              SUBI      
00AB:00EC 240D            STI       L13
00AB:00EE E1C86A          ADDISLL   L6, L10
00AB:00F1 B720            SARIC     16
00AB:00F3 B810            ADDIL     L16
00AB:00F5 280F            LDA       L15
00AB:00F7 8CE154          STDRI.P   
00AB:00FA E1C87B          ADDISLL   L7, L11
00AB:00FD B720            SARIC     16
00AB:00FF B810            ADDIL     L16
00AB:0101 280F            LDA       L15
00AB:0103 8C5410          STIXIC.P  8
00AB:0106 E1C8840C        ADDISLL   L8, L12
00AB:010A B720            SARIC     16
00AB:010C B810            ADDIL     L16
00AB:010E 280F            LDA       L15
00AB:0110 8C5420          STIXIC.P  16
00AB:0113 E1C8848D        ADDISLL   L9, L13
00AB:0117 B720            SARIC     16
00AB:0119 B810            ADDIL     L16
00AB:011B 280F            LDA       L15
00AB:011D 8C5430          STIXIC.P  24
00AB:0120 E1C9848D        SUBISLL   L9, L13
00AB:0124 B720            SARIC     16
00AB:0126 B810            ADDIL     L16
00AB:0128 280F            LDA       L15
00AB:012A 8C5440          STIXIC.P  32
00AB:012D E1C9840C        SUBISLL   L8, L12
00AB:0131 B720            SARIC     16
00AB:0133 B810            ADDIL     L16
00AB:0135 280F            LDA       L15
00AB:0137 8C5450          STIXIC.P  40
00AB:013A E1C97B          SUBISLL   L7, L11
00AB:013D B720            SARIC     16
00AB:013F B810            ADDIL     L16
00AB:0141 280F            LDA       L15
00AB:0143 8C5460          STIXIC.P  48
00AB:0146 E1C96A          SUBISLL   L6, L10
00AB:0149 B720            SARIC     16
00AB:014B B810            ADDIL     L16
00AB:014D 280F            LDA       L15
00AB:014F 8C5470          STIXIC.P  56
00AB:0152 79              RETV      
	Avg B/tk=0.885117
172: PDJPG_TransIDCT(PiPiii)v:
00AC:0000 E141840000      IFXARR    i:64, L0
00AC:0005 E141840001      IFXARR    i:64, L1
00AC:000A 6A9404          CMPILC    L10, 2
00AC:000D 31814C          JNE       0x00B6
00AC:0010 2807            LDA       L7
00AC:0012 8CE150          LDDRI.P   
00AC:0015 B2C040B2        MULIC     8281
00AC:0019 B0C08000        ADDIC     32768
00AC:001D B720            SARIC     16
00AC:001F B809            ADDIL     L9
00AC:0021 2406            STI       L6
00AC:0023 2B28            MVA       L2, L8
00AC:0025 2802            LDA       L2
00AC:0027 8CE1388080      LEARIC.P  64
00AC:002C 2903            STA       L3
00AC:002E 7B              LABEL     
00AC:002F 2802            LDA       L2
00AC:0031 2803            LDA       L3
00AC:0033 8C3C            CMPA.P    
00AC:0035 3580F6          JGE       0x00B3
00AC:0038 2006            LDI       L6
00AC:003A 2802            LDA       L2
00AC:003C 8CE154          STDRI.P   
00AC:003F 2006            LDI       L6
00AC:0041 2802            LDA       L2
00AC:0043 8C5402          STIXIC.P  1
00AC:0046 2006            LDI       L6
00AC:0048 2802            LDA       L2
00AC:004A 8C5404          STIXIC.P  2
00AC:004D 2006            LDI       L6
00AC:004F 2802            LDA       L2
00AC:0051 8C5406          STIXIC.P  3
00AC:0054 2006            LDI       L6
00AC:0056 2802            LDA       L2
00AC:0058 8C5408          STIXIC.P  4
00AC:005B 2006            LDI       L6
00AC:005D 2802            LDA       L2
00AC:005F 8C540A          STIXIC.P  5
00AC:0062 2006            LDI       L6
00AC:0064 2802            LDA       L2
00AC:0066 8C540C          STIXIC.P  6
00AC:0069 2006            LDI       L6
00AC:006B 2802            LDA       L2
00AC:006D 8C540E          STIXIC.P  7
00AC:0070 2006            LDI       L6
00AC:0072 2802            LDA       L2
00AC:0074 8C5410          STIXIC.P  8
00AC:0077 2006            LDI       L6
00AC:0079 2802            LDA       L2
00AC:007B 8C5412          STIXIC.P  9
00AC:007E 2006            LDI       L6
00AC:0080 2802            LDA       L2
00AC:0082 8C5414          STIXIC.P  10
00AC:0085 2006            LDI       L6
00AC:0087 2802            LDA       L2
00AC:0089 8C5416          STIXIC.P  11
00AC:008C 2006            LDI       L6
00AC:008E 2802            LDA       L2
00AC:0090 8C5418          STIXIC.P  12
00AC:0093 2006            LDI       L6
00AC:0095 2802            LDA       L2
00AC:0097 8C541A          STIXIC.P  13
00AC:009A 2006            LDI       L6
00AC:009C 2802            LDA       L2
00AC:009E 8C541C          STIXIC.P  14
00AC:00A1 2006            LDI       L6
00AC:00A3 2802            LDA       L2
00AC:00A5 8C541E          STIXIC.P  15
00AC:00A8 2802            LDA       L2
00AC:00AA 8CE13820        LEARIC.P  16
00AC:00AE 2902            STA       L2
00AC:00B0 378107          JMP       0x002F
00AC:00B3 378204          JMP       0x01B8
00AC:00B6 2807            LDA       L7
00AC:00B8 8CE13800        LEARIC.P  0
00AC:00BC 2800            LDA       L0
00AC:00BE E13800          LEARIC    0
00AC:00C1 E1B0            CVTA2PTR  
00AC:00C3 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:00C5 2807            LDA       L7
00AC:00C7 8CE13810        LEARIC.P  8
00AC:00CB 2800            LDA       L0
00AC:00CD E13810          LEARIC    8
00AC:00D0 E1B0            CVTA2PTR  
00AC:00D2 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:00D4 2807            LDA       L7
00AC:00D6 8CE13820        LEARIC.P  16
00AC:00DA 2800            LDA       L0
00AC:00DC E13820          LEARIC    16
00AC:00DF E1B0            CVTA2PTR  
00AC:00E1 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:00E3 2807            LDA       L7
00AC:00E5 8CE13830        LEARIC.P  24
00AC:00E9 2800            LDA       L0
00AC:00EB E13830          LEARIC    24
00AC:00EE E1B0            CVTA2PTR  
00AC:00F0 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:00F2 2807            LDA       L7
00AC:00F4 8CE13840        LEARIC.P  32
00AC:00F8 2800            LDA       L0
00AC:00FA E13840          LEARIC    32
00AC:00FD E1B0            CVTA2PTR  
00AC:00FF 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:0101 2807            LDA       L7
00AC:0103 8CE13850        LEARIC.P  40
00AC:0107 2800            LDA       L0
00AC:0109 E13850          LEARIC    40
00AC:010C E1B0            CVTA2PTR  
00AC:010E 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:0110 2807            LDA       L7
00AC:0112 8CE13860        LEARIC.P  48
00AC:0116 2800            LDA       L0
00AC:0118 E13860          LEARIC    48
00AC:011B E1B0            CVTA2PTR  
00AC:011D 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:011F 2807            LDA       L7
00AC:0121 8CE13870        LEARIC.P  56
00AC:0125 2800            LDA       L0
00AC:0127 E13870          LEARIC    56
00AC:012A E1B0            CVTA2PTR  
00AC:012C 7001            CALLG     G1(PDJPG_TransIDCT_Horiz)
00AC:012E 2800            LDA       L0
00AC:0130 E13800          LEARIC    0
00AC:0133 E1B0            CVTA2PTR  
00AC:0135 2808            LDA       L8
00AC:0137 8CE13800        LEARIC.P  0
00AC:013B 2009            LDI       L9
00AC:013D 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:013F 2800            LDA       L0
00AC:0141 E13802          LEARIC    1
00AC:0144 E1B0            CVTA2PTR  
00AC:0146 2808            LDA       L8
00AC:0148 8CE13802        LEARIC.P  1
00AC:014C 2009            LDI       L9
00AC:014E 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:0150 2800            LDA       L0
00AC:0152 E13804          LEARIC    2
00AC:0155 E1B0            CVTA2PTR  
00AC:0157 2808            LDA       L8
00AC:0159 8CE13804        LEARIC.P  2
00AC:015D 2009            LDI       L9
00AC:015F 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:0161 2800            LDA       L0
00AC:0163 E13806          LEARIC    3
00AC:0166 E1B0            CVTA2PTR  
00AC:0168 2808            LDA       L8
00AC:016A 8CE13806        LEARIC.P  3
00AC:016E 2009            LDI       L9
00AC:0170 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:0172 2800            LDA       L0
00AC:0174 E13808          LEARIC    4
00AC:0177 E1B0            CVTA2PTR  
00AC:0179 2808            LDA       L8
00AC:017B 8CE13808        LEARIC.P  4
00AC:017F 2009            LDI       L9
00AC:0181 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:0183 2800            LDA       L0
00AC:0185 E1380A          LEARIC    5
00AC:0188 E1B0            CVTA2PTR  
00AC:018A 2808            LDA       L8
00AC:018C 8CE1380A        LEARIC.P  5
00AC:0190 2009            LDI       L9
00AC:0192 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:0194 2800            LDA       L0
00AC:0196 E1380C          LEARIC    6
00AC:0199 E1B0            CVTA2PTR  
00AC:019B 2808            LDA       L8
00AC:019D 8CE1380C        LEARIC.P  6
00AC:01A1 2009            LDI       L9
00AC:01A3 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:01A5 2800            LDA       L0
00AC:01A7 E1380E          LEARIC    7
00AC:01AA E1B0            CVTA2PTR  
00AC:01AC 2808            LDA       L8
00AC:01AE 8CE1380E        LEARIC.P  7
00AC:01B2 2009            LDI       L9
00AC:01B4 7002            CALLG     G2(BGBBTJ_JPG_TransIDCT_Vert2)
00AC:01B6 E144            LBLCLNP   
00AC:01B8 E143840000      DFXARR    i:64, L0
00AC:01BD E143840001      DFXARR    i:64, L1
00AC:01C2 79              RETV      
	Avg B/tk=1.180628
173: PDJHUFF_NextByte(L123)i:
00AD:0000 E16C20          LDOSL     L2, G0(PDJPG_Context/huff_cs)
00AD:0003 A9              DUPA      
00AD:0004 8CE13D02        LEARBC.P  1
00AD:0008 E16D20          STOSL     L2, G0(PDJPG_Context/huff_cs)
00AD:000B 8CE159          LDDRUB.P  
00AD:000E 2400            STI       L0
00AD:0010 6A81FE          CMPILC    L0, 255
00AD:0013 318042          JNE       0x0037
00AD:0016 E16C20          LDOSL     L2, G0(PDJPG_Context/huff_cs)
00AD:0019 A9              DUPA      
00AD:001A 8CE13D02        LEARBC.P  1
00AD:001E E16D20          STOSL     L2, G0(PDJPG_Context/huff_cs)
00AD:0021 8CE159          LDDRUB.P  
00AD:0024 2401            STI       L1
00AD:0026 2001            LDI       L1
00AD:0028 308018          JEQ       0x0037
00AD:002B 2A24            LDC       Str:1C6="IsEnd\n"
00AD:002D AB              PUSHA     
00AD:002E 7001            CALLG     G1(printf)
00AD:0030 2A15            LDC       1u
00AD:0032 E16D23          STOSL     L2, G3(PDJPG_Context/huff_isend)
00AD:0035 6400            RETC      0i
00AD:0037 7A00            RET2      L0i
	Avg B/tk=0.982758
174: PDJHUFF_InitStream(L123Ph)i:
00AE:0000 AC              PUSHI     
00AE:0001 E16D00          STOSL     L0, G0(PDJPG_Context/huff_pos)
00AE:0004 AC              PUSHI     
00AE:0005 E16D01          STOSL     L0, G1(PDJPG_Context/huff_isend)
00AE:0008 2801            LDA       L1
00AE:000A E16D02          STOSL     L0, G2(PDJPG_Context/huff_css)
00AE:000D 2801            LDA       L1
00AE:000F E16D03          STOSL     L0, G3(PDJPG_Context/huff_cs)
00AE:0012 2800            LDA       L0
00AE:0014 7004            CALLG     G4(PDJHUFF_NextByte)
00AE:0016 E16D05          STOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0019 E16C05          LDOSL     L0, G5(PDJPG_Context/huff_win)
00AE:001C B610            SHLIC     8
00AE:001E 2800            LDA       L0
00AE:0020 7004            CALLG     G4(PDJHUFF_NextByte)
00AE:0022 04              ORI       
00AE:0023 E16D05          STOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0026 E16C05          LDOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0029 B610            SHLIC     8
00AE:002B 2800            LDA       L0
00AE:002D 7004            CALLG     G4(PDJHUFF_NextByte)
00AE:002F 04              ORI       
00AE:0030 E16D05          STOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0033 E16C05          LDOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0036 B610            SHLIC     8
00AE:0038 2800            LDA       L0
00AE:003A 7004            CALLG     G4(PDJHUFF_NextByte)
00AE:003C 04              ORI       
00AE:003D E16D05          STOSL     L0, G5(PDJPG_Context/huff_win)
00AE:0040 6400            RETC      0i
	Avg B/tk=0.725275
175: PDJHUFF_ReadNBits(L123i)i:
00AF:0000 6A20            CMPILC    L2, 0
00AF:0002 338004          JGT       0x0007
00AF:0005 6400            RETC      0i
00AF:0007 E16C10          LDOSL     L1, G0(PDJPG_Context/huff_win)
00AF:000A 2A8205          LDC       32u
00AF:000D B902            SUBIL     L2
00AF:000F E16C11          LDOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:0012 01              SUBI      
00AF:0013 E174            SHRI      
00AF:0015 2A15            LDC       1u
00AF:0017 BE02            SHLIL     L2
00AF:0019 6D              DECI      
00AF:001A 03              ANDI      
00AF:001B 2400            STI       L0
00AF:001D E16C11          LDOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:0020 B802            ADDIL     L2
00AF:0022 E16D11          STOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:0025 7B              LABEL     
00AF:0026 E16C11          LDOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:0029 6810            CMPIC     8
00AF:002B 328030          JLT       0x0046
00AF:002E E16C10          LDOSL     L1, G0(PDJPG_Context/huff_win)
00AF:0031 B610            SHLIC     8
00AF:0033 2801            LDA       L1
00AF:0035 7002            CALLG     G2(PDJHUFF_NextByte)
00AF:0037 04              ORI       
00AF:0038 E16D10          STOSL     L1, G0(PDJPG_Context/huff_win)
00AF:003B E16C11          LDOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:003E B108            SUBIC     8
00AF:0040 E16D11          STOSL     L1, G1(PDJPG_Context/huff_pos)
00AF:0043 37803F          JMP       0x0026
00AF:0046 7A00            RET2      L0i
	Avg B/tk=0.818182
176: PDJHUFF_SkipNBits(L123i)v:
00B0:0000 E16C00          LDOSL     L0, G0(PDJPG_Context/huff_pos)
00B0:0003 B801            ADDIL     L1
00B0:0005 E16D00          STOSL     L0, G0(PDJPG_Context/huff_pos)
00B0:0008 7B              LABEL     
00B0:0009 E16C00          LDOSL     L0, G0(PDJPG_Context/huff_pos)
00B0:000C 6810            CMPIC     8
00B0:000E 328030          JLT       0x0029
00B0:0011 E16C02          LDOSL     L0, G2(PDJPG_Context/huff_win)
00B0:0014 B610            SHLIC     8
00B0:0016 2800            LDA       L0
00B0:0018 7001            CALLG     G1(PDJHUFF_NextByte)
00B0:001A 04              ORI       
00B0:001B E16D02          STOSL     L0, G2(PDJPG_Context/huff_win)
00B0:001E E16C00          LDOSL     L0, G0(PDJPG_Context/huff_pos)
00B0:0021 B108            SUBIC     8
00B0:0023 E16D00          STOSL     L0, G0(PDJPG_Context/huff_pos)
00B0:0026 37803F          JMP       0x0009
00B0:0029 79              RETV      
	Avg B/tk=1.024390
177: PDJHUFF_PeekWord(L123)i:
00B1:0000 E16C10          LDOSL     L1, G0(PDJPG_Context/huff_win)
00B1:0003 2A8105          LDC       16u
00B1:0006 E16C11          LDOSL     L1, G1(PDJPG_Context/huff_pos)
00B1:0009 01              SUBI      
00B1:000A E174            SHRI      
00B1:000C B3C1FFFE        ANDIC     65535
00B1:0010 2400            STI       L0
00B1:0012 7A00            RET2      L0i
	Avg B/tk=0.714285
178: PDJHUFF_DecodeSymbol(L123i)i:
00B2:0000 E16C40          LDOSL     L4, G0(PDJPG_Context/huff_win)
00B2:0003 2A8185          LDC       24u
00B2:0006 E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:0009 01              SUBI      
00B2:000A E174            SHRI      
00B2:000C 9D              CVTUB2I   
00B2:000D 2400            STI       L0
00B2:000F E1E65510        SHLILLC   L5, L5, 8
00B2:0013 E16C42          LDOSL     L4, G2(PDJPG_Context/huff_idx)
00B2:0016 E1CC50          ORISLL    L5, L0
00B2:0019 8C4A            LDIXSS.P  
00B2:001B 2401            STI       L1
00B2:001D E16C43          LDOSL     L4, G3(PDJPG_Context/huff_len)
00B2:0020 E1CC51          ORISLL    L5, L1
00B2:0023 8C49            LDIXUB.P  
00B2:0025 2402            STI       L2
00B2:0027 6A8410          CMPILC    L2, 8
00B2:002A 338050          JGT       0x0055
00B2:002D E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:0030 B802            ADDIL     L2
00B2:0032 E16D41          STOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:0035 E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:0038 6810            CMPIC     8
00B2:003A 32802C          JLT       0x0053
00B2:003D E16C40          LDOSL     L4, G0(PDJPG_Context/huff_win)
00B2:0040 B610            SHLIC     8
00B2:0042 2804            LDA       L4
00B2:0044 7004            CALLG     G4(PDJHUFF_NextByte)
00B2:0046 04              ORI       
00B2:0047 E16D40          STOSL     L4, G0(PDJPG_Context/huff_win)
00B2:004A E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:004D B108            SUBIC     8
00B2:004F E16D41          STOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:0052 7B              LABEL     
00B2:0053 7A10            RET2      L1i
00B2:0055 E16C40          LDOSL     L4, G0(PDJPG_Context/huff_win)
00B2:0058 2A8105          LDC       16u
00B2:005B E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:005E 01              SUBI      
00B2:005F E174            SHRI      
00B2:0061 9F              CVTUS2I   
00B2:0062 2400            STI       L0
00B2:0064 7B              LABEL     
00B2:0065 E1EC8651        ORILLL    L3, L5, L1
00B2:0069 E16C43          LDOSL     L4, G3(PDJPG_Context/huff_len)
00B2:006C 2003            LDI       L3
00B2:006E 8C49            LDIXUB.P  
00B2:0070 2402            STI       L2
00B2:0072 2002            LDI       L2
00B2:0074 318006          JNE       0x007A
00B2:0077 3780AA          JMP       0x00CF
00B2:007A 2000            LDI       L0
00B2:007C 2A8105          LDC       16u
00B2:007F B902            SUBIL     L2
00B2:0081 07              SARI      
00B2:0082 E16C45          LDOSL     L4, G5(PDJPG_Context/huff_code)
00B2:0085 2003            LDI       L3
00B2:0087 8C4B            LDIXUS.P  
00B2:0089 38              CMPI      
00B2:008A 308028          JEQ       0x00A1
00B2:008D E16C46          LDOSL     L4, G6(PDJPG_Context/huff_next)
00B2:0090 2003            LDI       L3
00B2:0092 8C4A            LDIXSS.P  
00B2:0094 2401            STI       L1
00B2:0096 6A10            CMPILC    L1, 0
00B2:0098 358006          JGE       0x009E
00B2:009B 378062          JMP       0x00CF
00B2:009E 378077          JMP       0x0065
00B2:00A1 E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:00A4 B802            ADDIL     L2
00B2:00A6 E16D41          STOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:00A9 7B              LABEL     
00B2:00AA E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:00AD 6810            CMPIC     8
00B2:00AF 328030          JLT       0x00CA
00B2:00B2 E16C40          LDOSL     L4, G0(PDJPG_Context/huff_win)
00B2:00B5 B610            SHLIC     8
00B2:00B7 2804            LDA       L4
00B2:00B9 7004            CALLG     G4(PDJHUFF_NextByte)
00B2:00BB 04              ORI       
00B2:00BC E16D40          STOSL     L4, G0(PDJPG_Context/huff_win)
00B2:00BF E16C41          LDOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:00C2 B108            SUBIC     8
00B2:00C4 E16D41          STOSL     L4, G1(PDJPG_Context/huff_pos)
00B2:00C7 37803F          JMP       0x00AA
00B2:00CA 7A10            RET2      L1i
00B2:00CC 3780D3          JMP       0x0065
00B2:00CF 6410            RETC      -1i
	Avg B/tk=0.839357
179: PDJHUFF_DecodeDiffDC(L123i)i:
00B3:0000 2802            LDA       L2
00B3:0002 2003            LDI       L3
00B3:0004 7000            CALLG     G0(PDJHUFF_DecodeSymbol)
00B3:0006 2400            STI       L0
00B3:0008 2802            LDA       L2
00B3:000A 2000            LDI       L0
00B3:000C 7001            CALLG     G1(PDJHUFF_ReadNBits)
00B3:000E 2401            STI       L1
00B3:0010 2001            LDI       L1
00B3:0012 2A8205          LDC       32u
00B3:0015 B900            SUBIL     L0
00B3:0017 06              SHLI      
00B3:0018 B73E            SARIC     31
00B3:001A 1C              NOTI      
00B3:001B 2A10            LDC       -1i
00B3:001D BE00            SHLIL     L0
00B3:001F 6C              INCI      
00B3:0020 03              ANDI      
00B3:0021 E1D811          ADDILSL   L1, L1
00B3:0024 7A10            RET2      L1i
	Avg B/tk=0.633333
180: PDJHUFF_DecodeBlock(L123Piiiiii)i:
00B4:0000 E11C12          MVIC      L1, 1
00B4:0003 7B              LABEL     
00B4:0004 6A8280          CMPILC    L1, 64
00B4:0007 35801A          JGE       0x0017
00B4:000A AC              PUSHI     
00B4:000B 2805            LDA       L5
00B4:000D 2001            LDI       L1
00B4:000F 8C44            STIXI.P   
00B4:0011 7B              LABEL     
00B4:0012 6E01            INCIL     L1
00B4:0014 378025          JMP       0x0004
00B4:0017 E16C40          LDOSL     L4, G0(PDJPG_Context/jpg_qt)
00B4:001A E1C6900C        SHLISLC   L8, 6
00B4:001E E135            LEARB     
00B4:0020 E1B0            CVTA2PTR  
00B4:0022 2900            STA       L0
00B4:0024 2805            LDA       L5
00B4:0026 8CE150          LDDRI.P   
00B4:0029 2804            LDA       L4
00B4:002B 2006            LDI       L6
00B4:002D 7001            CALLG     G1(PDJHUFF_DecodeDiffDC)
00B4:002F 2800            LDA       L0
00B4:0031 8CE159          LDDRUB.P  
00B4:0034 02              MULI      
00B4:0035 00              ADDI      
00B4:0036 2805            LDA       L5
00B4:0038 8CE154          STDRI.P   
00B4:003B E11C12          MVIC      L1, 1
00B4:003E 7B              LABEL     
00B4:003F 6A8280          CMPILC    L1, 64
00B4:0042 35811E          JGE       0x00D4
00B4:0045 2804            LDA       L4
00B4:0047 2007            LDI       L7
00B4:0049 7002            CALLG     G2(PDJHUFF_DecodeSymbol)
00B4:004B 2402            STI       L2
00B4:004D 6A20            CMPILC    L2, 0
00B4:004F 338058          JGT       0x007E
00B4:0052 6A20            CMPILC    L2, 0
00B4:0054 358048          JGE       0x007B
00B4:0057 2A44            LDC       Str:1CD="bad dct block1 %02X(%d) %d/%d\n"
00B4:0059 8944            NEWARR    a:4
00B4:005B 2002            LDI       L2
00B4:005D E110            CVTI2AA   
00B4:005F E1AC00          DSTIXAC   0
00B4:0062 2002            LDI       L2
00B4:0064 E110            CVTI2AA   
00B4:0066 E1AC02          DSTIXAC   1
00B4:0069 2009            LDI       L9
00B4:006B E110            CVTI2AA   
00B4:006D E1AC04          DSTIXAC   2
00B4:0070 200A            LDI       L10
00B4:0072 E110            CVTI2AA   
00B4:0074 E1AC06          DSTIXAC   3
00B4:0077 7003            CALLG     G3(printf)
00B4:0079 6410            RETC      -1i
00B4:007B 3780AC          JMP       0x00D4
00B4:007E E1C728          SARISLC   L2, 4
00B4:0081 B31E            ANDIC     15
00B4:0083 E1D811          ADDILSL   L1, L1
00B4:0086 E1C3841E        ANDISLC   L2, 15
00B4:008A 318006          JNE       0x0090
00B4:008D 37807E          JMP       0x00CF
00B4:0090 6A8280          CMPILC    L1, 64
00B4:0093 328006          JLT       0x0099
00B4:0096 378076          JMP       0x00D4
00B4:0099 E1E3221E        ANDILLC   L2, L2, 15
00B4:009D 2804            LDA       L4
00B4:009F 2002            LDI       L2
00B4:00A1 7005            CALLG     G5(PDJHUFF_ReadNBits)
00B4:00A3 2403            STI       L3
00B4:00A5 2003            LDI       L3
00B4:00A7 2A8205          LDC       32u
00B4:00AA B902            SUBIL     L2
00B4:00AC 06              SHLI      
00B4:00AD B73E            SARIC     31
00B4:00AF 1C              NOTI      
00B4:00B0 2A10            LDC       -1i
00B4:00B2 BE02            SHLIL     L2
00B4:00B4 6C              INCI      
00B4:00B5 03              ANDI      
00B4:00B6 E1D833          ADDILSL   L3, L3
00B4:00B9 7E06            LDGS      G6(pdjpg_zigzag2)
00B4:00BB 2001            LDI       L1
00B4:00BD 40              LDIXI     
00B4:00BE 2402            STI       L2
00B4:00C0 2800            LDA       L0
00B4:00C2 2002            LDI       L2
00B4:00C4 8C49            LDIXUB.P  
00B4:00C6 BA03            MULIL     L3
00B4:00C8 2805            LDA       L5
00B4:00CA 2002            LDI       L2
00B4:00CC 8C44            STIXI.P   
00B4:00CE 7B              LABEL     
00B4:00CF 6E01            INCIL     L1
00B4:00D1 378129          JMP       0x003F
00B4:00D4 6A8280          CMPILC    L1, 64
00B4:00D7 348080          JLE       0x011A
00B4:00DA 2A74            LDC       Str:1EC="bad dct block2 %02X(%d) len=%d %d/%d\n"
00B4:00DC 8954            NEWARR    a:5
00B4:00DE 2002            LDI       L2
00B4:00E0 E110            CVTI2AA   
00B4:00E2 E1AC00          DSTIXAC   0
00B4:00E5 2002            LDI       L2
00B4:00E7 E110            CVTI2AA   
00B4:00E9 E1AC02          DSTIXAC   1
00B4:00EC 2001            LDI       L1
00B4:00EE E110            CVTI2AA   
00B4:00F0 E1AC04          DSTIXAC   2
00B4:00F3 2009            LDI       L9
00B4:00F5 E110            CVTI2AA   
00B4:00F7 E1AC06          DSTIXAC   3
00B4:00FA 200A            LDI       L10
00B4:00FC E110            CVTI2AA   
00B4:00FE E1AC08          DSTIXAC   4
00B4:0101 7003            CALLG     G3(printf)
00B4:0103 2A8084          LDC       Str:212="Error @ %06X\n"
00B4:0106 8914            NEWARR    a:1
00B4:0108 E16C49          LDOSL     L4, G9(PDJPG_Context/huff_cs)
00B4:010B E16C4A          LDOSL     L4, G10(PDJPG_Context/huff_css)
00B4:010E E1B446          DIFFPTR   b:4
00B4:0111 E111            CVTL2AA   
00B4:0113 E1AC00          DSTIXAC   0
00B4:0116 7003            CALLG     G3(printf)
00B4:0118 6410            RETC      -1i
00B4:011A 6A12            CMPILC    L1, 1
00B4:011C 318004          JNE       0x0121
00B4:011F 6425            RETC      2u
00B4:0121 6400            RETC      0i
	Avg B/tk=1.062044
181: PDJPG_CopyOutBlock8B(L123PiPhiiii)v:
00B5:0000 E1C0A408        ADDISLC   L18, 8
00B5:0004 2010            LDI       L16
00B5:0006 38              CMPI      
00B5:0007 338014          JGT       0x0014
00B5:000A E1C0A608        ADDISLC   L19, 8
00B5:000E 2011            LDI       L17
00B5:0010 38              CMPI      
00B5:0011 348116          JLE       0x009F
00B5:0014 E11C9400        MVIC      L10, 0
00B5:0018 7B              LABEL     
00B5:0019 6A9410          CMPILC    L10, 8
00B5:001C 3580FE          JGE       0x009E
00B5:001F E1C8898A        ADDISLL   L19, L10
00B5:0023 2011            LDI       L17
00B5:0025 38              CMPI      
00B5:0026 328006          JLT       0x002C
00B5:0029 3780DA          JMP       0x0099
00B5:002C 280E            LDA       L14
00B5:002E E1C69406        SHLISLC   L10, 3
00B5:0032 8CE130          LEARI.P   
00B5:0035 2900            STA       L0
00B5:0037 280F            LDA       L15
00B5:0039 E1C8898A        ADDISLL   L19, L10
00B5:003D BA10            MULIL     L16
00B5:003F 8CE135          LEARB.P   
00B5:0042 2012            LDI       L18
00B5:0044 8CE135          LEARB.P   
00B5:0047 2901            STA       L1
00B5:0049 E11C9600        MVIC      L11, 0
00B5:004D 7B              LABEL     
00B5:004E 6A9610          CMPILC    L11, 8
00B5:0051 35808A          JGE       0x0099
00B5:0054 E1C8890B        ADDISLL   L18, L11
00B5:0058 2010            LDI       L16
00B5:005A 38              CMPI      
00B5:005B 328006          JLT       0x0061
00B5:005E 378066          JMP       0x0094
00B5:0061 2800            LDA       L0
00B5:0063 A9              DUPA      
00B5:0064 8CE13802        LEARIC.P  1
00B5:0068 2900            STA       L0
00B5:006A 8CE150          LDDRI.P   
00B5:006D 240C            STI       L12
00B5:006F 6A9800          CMPILC    L12, 0
00B5:0072 35800A          JGE       0x007A
00B5:0075 E11C9800        MVIC      L12, 0
00B5:0079 7B              LABEL     
00B5:007A 6A99FE          CMPILC    L12, 255
00B5:007D 34800A          JLE       0x0085
00B5:0080 E11C99FE        MVIC      L12, 255
00B5:0084 7B              LABEL     
00B5:0085 200C            LDI       L12
00B5:0087 9D              CVTUB2I   
00B5:0088 E1B316          STDRPL    L1b
00B5:008B 2801            LDA       L1
00B5:008D 8CE13D02        LEARBC.P  1
00B5:0091 2901            STA       L1
00B5:0093 7B              LABEL     
00B5:0094 6E0B            INCIL     L11
00B5:0096 378095          JMP       0x004E
00B5:0099 6E0A            INCIL     L10
00B5:009B 378109          JMP       0x0019
00B5:009E 79              RETV      
00B5:009F E11C9400        MVIC      L10, 0
00B5:00A3 7B              LABEL     
00B5:00A4 6A9410          CMPILC    L10, 8
00B5:00A7 358116          JGE       0x0135
00B5:00AA 280E            LDA       L14
00B5:00AC E1C69406        SHLISLC   L10, 3
00B5:00B0 8CE130          LEARI.P   
00B5:00B3 2900            STA       L0
00B5:00B5 280F            LDA       L15
00B5:00B7 E1C8898A        ADDISLL   L19, L10
00B5:00BB BA10            MULIL     L16
00B5:00BD 8CE135          LEARB.P   
00B5:00C0 2012            LDI       L18
00B5:00C2 8CE135          LEARB.P   
00B5:00C5 2901            STA       L1
00B5:00C7 2800            LDA       L0
00B5:00C9 8CE150          LDDRI.P   
00B5:00CC 7000            CALLG     G0(clamp255)
00B5:00CE 9D              CVTUB2I   
00B5:00CF 2801            LDA       L1
00B5:00D1 8CE15E          STDRB.P   
00B5:00D4 2800            LDA       L0
00B5:00D6 8C5002          LDIXIC.P  1
00B5:00D9 7000            CALLG     G0(clamp255)
00B5:00DB 9D              CVTUB2I   
00B5:00DC 2801            LDA       L1
00B5:00DE 8C5E02          STIXBC.P  1
00B5:00E1 2800            LDA       L0
00B5:00E3 8C5004          LDIXIC.P  2
00B5:00E6 7000            CALLG     G0(clamp255)
00B5:00E8 9D              CVTUB2I   
00B5:00E9 2801            LDA       L1
00B5:00EB 8C5E04          STIXBC.P  2
00B5:00EE 2800            LDA       L0
00B5:00F0 8C5006          LDIXIC.P  3
00B5:00F3 7000            CALLG     G0(clamp255)
00B5:00F5 9D              CVTUB2I   
00B5:00F6 2801            LDA       L1
00B5:00F8 8C5E06          STIXBC.P  3
00B5:00FB 2800            LDA       L0
00B5:00FD 8C5008          LDIXIC.P  4
00B5:0100 7000            CALLG     G0(clamp255)
00B5:0102 9D              CVTUB2I   
00B5:0103 2801            LDA       L1
00B5:0105 8C5E08          STIXBC.P  4
00B5:0108 2800            LDA       L0
00B5:010A 8C500A          LDIXIC.P  5
00B5:010D 7000            CALLG     G0(clamp255)
00B5:010F 9D              CVTUB2I   
00B5:0110 2801            LDA       L1
00B5:0112 8C5E0A          STIXBC.P  5
00B5:0115 2800            LDA       L0
00B5:0117 8C500C          LDIXIC.P  6
00B5:011A 7000            CALLG     G0(clamp255)
00B5:011C 9D              CVTUB2I   
00B5:011D 2801            LDA       L1
00B5:011F 8C5E0C          STIXBC.P  6
00B5:0122 2800            LDA       L0
00B5:0124 8C500E          LDIXIC.P  7
00B5:0127 7000            CALLG     G0(clamp255)
00B5:0129 9D              CVTUB2I   
00B5:012A 2801            LDA       L1
00B5:012C 8C5E0E          STIXBC.P  7
00B5:012F 7B              LABEL     
00B5:0130 6E0A            INCIL     L10
00B5:0132 378121          JMP       0x00A4
00B5:0135 79              RETV      
	Avg B/tk=0.996785
182: PDJPG_MarkerSOS(L123Ph)i:
00B6:0000 E141900000      IFXARR    i:256, L0
00B6:0005 E141840001      IFXARR    i:64, L1
00B6:000A E141840002      IFXARR    i:64, L2
00B6:000F E1414603        IFXARR    b:4, L3
00B6:0013 E1414604        IFXARR    b:4, L4
00B6:0017 E1414605        IFXARR    b:4, L5
00B6:001B E1414606        IFXARR    b:4, L6
00B6:001F E1414007        IFXARR    i:4, L7
00B6:0023 E1414008        IFXARR    i:4, L8
00B6:0027 E1414009        IFXARR    i:4, L9
00B6:002B E141400A        IFXARR    i:4, L10
00B6:002F E141460B        IFXARR    b:4, L11
00B6:0033 E141460C        IFXARR    b:4, L12
00B6:0037 E141400D        IFXARR    i:4, L13
00B6:003B E141440E        IFXARR    a:4, L14
00B6:003F E141400F        IFXARR    i:4, L15
00B6:0043 2A14            LDC       Str:220="PDJPG_MarkerSOS: A\n"
00B6:0045 AB              PUSHA     
00B6:0046 7000            CALLG     G0(printf)
00B6:0048 281F            LDA       L31
00B6:004A 8CE159          LDDRUB.P  
00B6:004D B610            SHLIC     8
00B6:004F 281F            LDA       L31
00B6:0051 8C5902          LDIXUBC.P 1
00B6:0054 04              ORI       
00B6:0055 2414            STI       L20
00B6:0057 2A24            LDC       Str:234="ns %d\n"
00B6:0059 8914            NEWARR    a:1
00B6:005B 281F            LDA       L31
00B6:005D 8C5904          LDIXUBC.P 2
00B6:0060 E110            CVTI2AA   
00B6:0062 E1AC00          DSTIXAC   0
00B6:0065 7000            CALLG     G0(printf)
00B6:0067 281F            LDA       L31
00B6:0069 8C5904          LDIXUBC.P 2
00B6:006C 241C            STI       L28
00B6:006E E11CBA00        MVIC      L29, 0
00B6:0072 281F            LDA       L31
00B6:0074 8CE13D06        LEARBC.P  3
00B6:0078 2910            STA       L16
00B6:007A E11CA200        MVIC      L17, 0
00B6:007E 7B              LABEL     
00B6:007F 2011            LDI       L17
00B6:0081 281F            LDA       L31
00B6:0083 8C5904          LDIXUBC.P 2
00B6:0086 38              CMPI      
00B6:0087 35825A          JGE       0x01B7
00B6:008A 2A34            LDC       Str:23B="%d %d %d\n"
00B6:008C 8934            NEWARR    a:3
00B6:008E 2810            LDA       L16
00B6:0090 8CE159          LDDRUB.P  
00B6:0093 E110            CVTI2AA   
00B6:0095 E1AC00          DSTIXAC   0
00B6:0098 2810            LDA       L16
00B6:009A 8C5902          LDIXUBC.P 1
00B6:009D B708            SARIC     4
00B6:009F E110            CVTI2AA   
00B6:00A1 E1AC02          DSTIXAC   1
00B6:00A4 2810            LDA       L16
00B6:00A6 8C5902          LDIXUBC.P 1
00B6:00A9 B31E            ANDIC     15
00B6:00AB E110            CVTI2AA   
00B6:00AD E1AC04          DSTIXAC   2
00B6:00B0 7000            CALLG     G0(printf)
00B6:00B2 2810            LDA       L16
00B6:00B4 8C5902          LDIXUBC.P 1
00B6:00B7 B708            SARIC     4
00B6:00B9 E18780B611      STIXZLL   L11b, L17
00B6:00BE 2810            LDA       L16
00B6:00C0 8C5902          LDIXUBC.P 1
00B6:00C3 B31E            ANDIC     15
00B6:00C5 9D              CVTUB2I   
00B6:00C6 E18780C611      STIXZLL   L12b, L17
00B6:00CB E11CA400        MVIC      L18, 0
00B6:00CF 7B              LABEL     
00B6:00D0 2012            LDI       L18
00B6:00D2 E16C8F04        LDOSL     L30, G4(PDJPG_Context/jpg_nc)
00B6:00D6 38              CMPI      
00B6:00D7 3580BE          JGE       0x0139
00B6:00DA E16C8F05        LDOSL     L30, G5(PDJPG_Context/jpg_cid)
00B6:00DE 2012            LDI       L18
00B6:00E0 49              LDIXUB    
00B6:00E1 2810            LDA       L16
00B6:00E3 8CE159          LDDRUB.P  
00B6:00E6 38              CMPI      
00B6:00E7 318094          JNE       0x0134
00B6:00EA E16C8F06        LDOSL     L30, G6(PDJPG_Context/jpg_ch)
00B6:00EE 2012            LDI       L18
00B6:00F0 49              LDIXUB    
00B6:00F1 E1873611        STIXZLL   L3b, L17
00B6:00F5 E16C8F07        LDOSL     L30, G7(PDJPG_Context/jpg_cv)
00B6:00F9 2012            LDI       L18
00B6:00FB 49              LDIXUB    
00B6:00FC E1874611        STIXZLL   L4b, L17
00B6:0100 E16C8F08        LDOSL     L30, G8(PDJPG_Context/jpg_qid)
00B6:0104 2012            LDI       L18
00B6:0106 49              LDIXUB    
00B6:0107 E1875611        STIXZLL   L5b, L17
00B6:010B E16C8F09        LDOSL     L30, G9(PDJPG_Context/jpg_cxi)
00B6:010F 2012            LDI       L18
00B6:0111 40              LDIXI     
00B6:0112 E1877011        STIXZLL   L7i, L17
00B6:0116 E16C8F0A        LDOSL     L30, G10(PDJPG_Context/jpg_cyi)
00B6:011A 2012            LDI       L18
00B6:011C 40              LDIXI     
00B6:011D E187808011      STIXZLL   L8i, L17
00B6:0122 E17E3611        LDIXZLL   L3b, L17
00B6:0126 E17E4611        LDIXZLL   L4b, L17
00B6:012A 02              MULI      
00B6:012B E1876611        STIXZLL   L6b, L17
00B6:012F 6E17            INCIL     L23
00B6:0131 37800A          JMP       0x0139
00B6:0134 6E12            INCIL     L18
00B6:0136 3780D1          JMP       0x00D0
00B6:0139 E17E7011        LDIXZLL   L7i, L17
00B6:013D B007            ADDIC     7
00B6:013F B706            SARIC     3
00B6:0141 2419            STI       L25
00B6:0143 E17E808011      LDIXZLL   L8i, L17
00B6:0148 B007            ADDIC     7
00B6:014A B706            SARIC     3
00B6:014C 241A            STI       L26
00B6:014E 2019            LDI       L25
00B6:0150 E187809011      STIXZLL   L9i, L17
00B6:0155 201A            LDI       L26
00B6:0157 E18780A011      STIXZLL   L10i, L17
00B6:015C E1C0B201        ADDISLC   L25, 1
00B6:0160 E1C0B402        ADDISLC   L26, 2
00B6:0164 02              MULI      
00B6:0165 241B            STI       L27
00B6:0167 2810            LDA       L16
00B6:0169 8CE159          LDDRUB.P  
00B6:016C E16C8F0B        LDOSL     L30, G11(PDJPG_Context/jpg_scid)
00B6:0170 2011            LDI       L17
00B6:0172 44              STIXI     
00B6:0173 2012            LDI       L18
00B6:0175 E16C8F0C        LDOSL     L30, G12(PDJPG_Context/jpg_scn)
00B6:0179 2011            LDI       L17
00B6:017B 44              STIXI     
00B6:017C E16C8F0D        LDOSL     L30, G13(PDJPG_Context/jpg_sibuf)
00B6:0180 2011            LDI       L17
00B6:0182 4C              LDIXA     
00B6:0183 E19D801C        JNENULL   0x0195
00B6:0187 E1C6B60C        SHLISLC   L27, 6
00B6:018B 8906            NEWARR    b:0
00B6:018D E16C8F0D        LDOSL     L30, G13(PDJPG_Context/jpg_sibuf)
00B6:0191 2011            LDI       L17
00B6:0193 4D              STIXA     
00B6:0194 7B              LABEL     
00B6:0195 E16C8F0D        LDOSL     L30, G13(PDJPG_Context/jpg_sibuf)
00B6:0199 2011            LDI       L17
00B6:019B 4C              LDIXA     
00B6:019C E1B0            CVTA2PTR  
00B6:019E E18780E411      STIXZLL   L14a, L17
00B6:01A3 AC              PUSHI     
00B6:01A4 E18780D011      STIXZLL   L13i, L17
00B6:01A9 2810            LDA       L16
00B6:01AB 8CE13D04        LEARBC.P  2
00B6:01AF 2910            STA       L16
00B6:01B1 7B              LABEL     
00B6:01B2 6E11            INCIL     L17
00B6:01B4 37826F          JMP       0x007F
00B6:01B7 2810            LDA       L16
00B6:01B9 8CE13D06        LEARBC.P  3
00B6:01BD 2910            STA       L16
00B6:01BF 2A80E4          LDC       Str:245="PDJPG_MarkerSOS: B\n"
00B6:01C2 AB              PUSHA     
00B6:01C3 7000            CALLG     G0(printf)
00B6:01C5 E11CA200        MVIC      L17, 0
00B6:01C9 7B              LABEL     
00B6:01CA 2011            LDI       L17
00B6:01CC E16C8F04        LDOSL     L30, G4(PDJPG_Context/jpg_nc)
00B6:01D0 38              CMPI      
00B6:01D1 3581B0          JGE       0x02AC
00B6:01D4 E16C8F0C        LDOSL     L30, G12(PDJPG_Context/jpg_scn)
00B6:01D8 2011            LDI       L17
00B6:01DA 40              LDIXI     
00B6:01DB 2412            STI       L18
00B6:01DD 2A80F4          LDC       Str:259="PDJPG_MarkerSOS: ch=%d cv=%d chm=%d chn=%d\n"
00B6:01E0 8944            NEWARR    a:4
00B6:01E2 E16C8F06        LDOSL     L30, G6(PDJPG_Context/jpg_ch)
00B6:01E6 2012            LDI       L18
00B6:01E8 49              LDIXUB    
00B6:01E9 E110            CVTI2AA   
00B6:01EB E1AC00          DSTIXAC   0
00B6:01EE E16C8F07        LDOSL     L30, G7(PDJPG_Context/jpg_cv)
00B6:01F2 2012            LDI       L18
00B6:01F4 49              LDIXUB    
00B6:01F5 E110            CVTI2AA   
00B6:01F7 E1AC02          DSTIXAC   1
00B6:01FA E16C8F10        LDOSL     L30, G16(PDJPG_Context/jpg_chm)
00B6:01FE E110            CVTI2AA   
00B6:0200 E1AC04          DSTIXAC   2
00B6:0203 E16C8F11        LDOSL     L30, G17(PDJPG_Context/jpg_chn)
00B6:0207 E110            CVTI2AA   
00B6:0209 E1AC06          DSTIXAC   3
00B6:020C 7000            CALLG     G0(printf)
00B6:020E E16C8F06        LDOSL     L30, G6(PDJPG_Context/jpg_ch)
00B6:0212 2012            LDI       L18
00B6:0214 49              LDIXUB    
00B6:0215 B2C20000        MULIC     65536
00B6:0219 E16C8F10        LDOSL     L30, G16(PDJPG_Context/jpg_chm)
00B6:021D E170            DIVI      
00B6:021F E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:0223 2011            LDI       L17
00B6:0225 44              STIXI     
00B6:0226 E16C8F07        LDOSL     L30, G7(PDJPG_Context/jpg_cv)
00B6:022A 2012            LDI       L18
00B6:022C 49              LDIXUB    
00B6:022D B2C20000        MULIC     65536
00B6:0231 E16C8F11        LDOSL     L30, G17(PDJPG_Context/jpg_chn)
00B6:0235 E170            DIVI      
00B6:0237 E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:023B 2011            LDI       L17
00B6:023D 44              STIXI     
00B6:023E E16C8F09        LDOSL     L30, G9(PDJPG_Context/jpg_cxi)
00B6:0242 2012            LDI       L18
00B6:0244 40              LDIXI     
00B6:0245 B007            ADDIC     7
00B6:0247 B706            SARIC     3
00B6:0249 E16C8F14        LDOSL     L30, G20(PDJPG_Context/jpg_schs)
00B6:024D 2011            LDI       L17
00B6:024F 44              STIXI     
00B6:0250 E16C8F0A        LDOSL     L30, G10(PDJPG_Context/jpg_cyi)
00B6:0254 2012            LDI       L18
00B6:0256 40              LDIXI     
00B6:0257 B007            ADDIC     7
00B6:0259 B706            SARIC     3
00B6:025B E16C8F15        LDOSL     L30, G21(PDJPG_Context/jpg_scvs)
00B6:025F 2011            LDI       L17
00B6:0261 44              STIXI     
00B6:0262 2A8164          LDC       Str:285="PDJPG_MarkerSOS: i=%d j=%d %d %d %d %d\n"
00B6:0265 8964            NEWARR    a:6
00B6:0267 2011            LDI       L17
00B6:0269 E110            CVTI2AA   
00B6:026B E1AC00          DSTIXAC   0
00B6:026E 2012            LDI       L18
00B6:0270 E110            CVTI2AA   
00B6:0272 E1AC02          DSTIXAC   1
00B6:0275 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:0279 2011            LDI       L17
00B6:027B 40              LDIXI     
00B6:027C E110            CVTI2AA   
00B6:027E E1AC04          DSTIXAC   2
00B6:0281 E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:0285 2011            LDI       L17
00B6:0287 40              LDIXI     
00B6:0288 E110            CVTI2AA   
00B6:028A E1AC06          DSTIXAC   3
00B6:028D E16C8F14        LDOSL     L30, G20(PDJPG_Context/jpg_schs)
00B6:0291 2011            LDI       L17
00B6:0293 40              LDIXI     
00B6:0294 E110            CVTI2AA   
00B6:0296 E1AC08          DSTIXAC   4
00B6:0299 E16C8F15        LDOSL     L30, G21(PDJPG_Context/jpg_scvs)
00B6:029D 2011            LDI       L17
00B6:029F 40              LDIXI     
00B6:02A0 E110            CVTI2AA   
00B6:02A2 E1AC0A          DSTIXAC   5
00B6:02A5 7000            CALLG     G0(printf)
00B6:02A7 6E11            INCIL     L17
00B6:02A9 3781C3          JMP       0x01CA
00B6:02AC E16C8F04        LDOSL     L30, G4(PDJPG_Context/jpg_nc)
00B6:02B0 6806            CMPIC     3
00B6:02B2 3181E2          JNE       0x03A6
00B6:02B5 E11CA202        MVIC      L17, 1
00B6:02B9 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:02BD E150            LDDRI     
00B6:02BF 68C20000        CMPIC     65536
00B6:02C3 30800A          JEQ       0x02CB
00B6:02C6 E11CA200        MVIC      L17, 0
00B6:02CA 7B              LABEL     
00B6:02CB E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:02CF E150            LDDRI     
00B6:02D1 68C20000        CMPIC     65536
00B6:02D5 30800A          JEQ       0x02DD
00B6:02D8 E11CA200        MVIC      L17, 0
00B6:02DC 7B              LABEL     
00B6:02DD E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:02E1 5002            LDIXIC    1
00B6:02E3 68C10000        CMPIC     32768
00B6:02E7 30800A          JEQ       0x02EF
00B6:02EA E11CA200        MVIC      L17, 0
00B6:02EE 7B              LABEL     
00B6:02EF E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:02F3 5002            LDIXIC    1
00B6:02F5 68C10000        CMPIC     32768
00B6:02F9 30800A          JEQ       0x0301
00B6:02FC E11CA200        MVIC      L17, 0
00B6:0300 7B              LABEL     
00B6:0301 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:0305 5004            LDIXIC    2
00B6:0307 68C10000        CMPIC     32768
00B6:030B 30800A          JEQ       0x0313
00B6:030E E11CA200        MVIC      L17, 0
00B6:0312 7B              LABEL     
00B6:0313 E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:0317 5004            LDIXIC    2
00B6:0319 68C10000        CMPIC     32768
00B6:031D 30800A          JEQ       0x0325
00B6:0320 E11CA200        MVIC      L17, 0
00B6:0324 7B              LABEL     
00B6:0325 2011            LDI       L17
00B6:0327 9D              CVTUB2I   
00B6:0328 E16D8F17        STOSL     L30, G23(PDJPG_Context/jpg_is420)
00B6:032C E11CA202        MVIC      L17, 1
00B6:0330 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:0334 E150            LDDRI     
00B6:0336 68C20000        CMPIC     65536
00B6:033A 30800A          JEQ       0x0342
00B6:033D E11CA200        MVIC      L17, 0
00B6:0341 7B              LABEL     
00B6:0342 E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:0346 E150            LDDRI     
00B6:0348 68C20000        CMPIC     65536
00B6:034C 30800A          JEQ       0x0354
00B6:034F E11CA200        MVIC      L17, 0
00B6:0353 7B              LABEL     
00B6:0354 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:0358 5002            LDIXIC    1
00B6:035A 68C20000        CMPIC     65536
00B6:035E 30800A          JEQ       0x0366
00B6:0361 E11CA200        MVIC      L17, 0
00B6:0365 7B              LABEL     
00B6:0366 E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:036A 5002            LDIXIC    1
00B6:036C 68C20000        CMPIC     65536
00B6:0370 30800A          JEQ       0x0378
00B6:0373 E11CA200        MVIC      L17, 0
00B6:0377 7B              LABEL     
00B6:0378 E16C8F12        LDOSL     L30, G18(PDJPG_Context/jpg_schsci)
00B6:037C 5004            LDIXIC    2
00B6:037E 68C20000        CMPIC     65536
00B6:0382 30800A          JEQ       0x038A
00B6:0385 E11CA200        MVIC      L17, 0
00B6:0389 7B              LABEL     
00B6:038A E16C8F13        LDOSL     L30, G19(PDJPG_Context/jpg_scvsci)
00B6:038E 5004            LDIXIC    2
00B6:0390 68C20000        CMPIC     65536
00B6:0394 30800A          JEQ       0x039C
00B6:0397 E11CA200        MVIC      L17, 0
00B6:039B 7B              LABEL     
00B6:039C 2011            LDI       L17
00B6:039E 9D              CVTUB2I   
00B6:039F E16D8F18        STOSL     L30, G24(PDJPG_Context/jpg_is444)
00B6:03A3 378016          JMP       0x03B1
00B6:03A6 AC              PUSHI     
00B6:03A7 E16D8F17        STOSL     L30, G23(PDJPG_Context/jpg_is420)
00B6:03AB AC              PUSHI     
00B6:03AC E16D8F18        STOSL     L30, G24(PDJPG_Context/jpg_is444)
00B6:03B0 7B              LABEL     
00B6:03B1 E16C8F19        LDOSL     L30, G25(PDJPG_Context/xs)
00B6:03B5 E16C8F10        LDOSL     L30, G16(PDJPG_Context/jpg_chm)
00B6:03B9 B606            SHLIC     3
00B6:03BB 00              ADDI      
00B6:03BC 6D              DECI      
00B6:03BD E16C8F10        LDOSL     L30, G16(PDJPG_Context/jpg_chm)
00B6:03C1 B606            SHLIC     3
00B6:03C3 E170            DIVI      
00B6:03C5 2419            STI       L25
00B6:03C7 E16C8F1A        LDOSL     L30, G26(PDJPG_Context/ys)
00B6:03CB E16C8F11        LDOSL     L30, G17(PDJPG_Context/jpg_chn)
00B6:03CF B606            SHLIC     3
00B6:03D1 00              ADDI      
00B6:03D2 6D              DECI      
00B6:03D3 E16C8F11        LDOSL     L30, G17(PDJPG_Context/jpg_chn)
00B6:03D7 B606            SHLIC     3
00B6:03D9 E170            DIVI      
00B6:03DB 241A            STI       L26
00B6:03DD E1EAC6CC9A      MULILLL   L27, L25, L26
00B6:03E2 281E            LDA       L30
00B6:03E4 2810            LDA       L16
00B6:03E6 701B            CALLG     G27(PDJHUFF_InitStream)
00B6:03E8 A0              POPI      
00B6:03E9 E11CA200        MVIC      L17, 0
00B6:03ED 7B              LABEL     
00B6:03EE 6AC22200        CMPILC    L17, 256
00B6:03F2 358016          JGE       0x0400
00B6:03F5 AC              PUSHI     
00B6:03F6 E1870011        STIXZLL   L0i, L17
00B6:03FA 7B              LABEL     
00B6:03FB 6E11            INCIL     L17
00B6:03FD 378023          JMP       0x03EE
00B6:0400 2A81C4          LDC       Str:2AD="PDJPG_MarkerSOS: C\n"
00B6:0403 AB              PUSHA     
00B6:0404 7000            CALLG     G0(printf)
00B6:0406 E16C8F04        LDOSL     L30, G4(PDJPG_Context/jpg_nc)
00B6:040A 6802            CMPIC     1
00B6:040C 31811E          JNE       0x049E
00B6:040F 2A81D4          LDC       Str:2C1="PDJPG_MarkerSOS: Mono\n"
00B6:0412 AB              PUSHA     
00B6:0413 7000            CALLG     G0(printf)
00B6:0415 E11CBA00        MVIC      L29, 0
00B6:0419 E11CA200        MVIC      L17, 0
00B6:041D 7B              LABEL     
00B6:041E 6B889A          CMPILL    L17, L26
00B6:0421 3580EE          JGE       0x049B
00B6:0424 E11CA400        MVIC      L18, 0
00B6:0428 7B              LABEL     
00B6:0429 6B8919          CMPILL    L18, L25
00B6:042C 3580BC          JGE       0x048D
00B6:042F 281E            LDA       L30
00B6:0431 2800            LDA       L0
00B6:0433 E1B0            CVTA2PTR  
00B6:0435 280B            LDA       L11
00B6:0437 E159            LDDRUB    
00B6:0439 B602            SHLIC     1
00B6:043B B000            ADDIC     0
00B6:043D 280C            LDA       L12
00B6:043F E159            LDDRUB    
00B6:0441 B602            SHLIC     1
00B6:0443 6C              INCI      
00B6:0444 2805            LDA       L5
00B6:0446 E159            LDDRUB    
00B6:0448 E1CA8899        MULISLL   L17, L25
00B6:044C B812            ADDIL     L18
00B6:044E 201B            LDI       L27
00B6:0450 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:0452 241D            STI       L29
00B6:0454 6ABA00          CMPILC    L29, 0
00B6:0457 358006          JGE       0x045D
00B6:045A 378060          JMP       0x048D
00B6:045D 2800            LDA       L0
00B6:045F E1B0            CVTA2PTR  
00B6:0461 2802            LDA       L2
00B6:0463 E1B0            CVTA2PTR  
00B6:0465 2A8805          LDC       128u
00B6:0468 201D            LDI       L29
00B6:046A 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:046C 281E            LDA       L30
00B6:046E 2802            LDA       L2
00B6:0470 E1B0            CVTA2PTR  
00B6:0472 280E            LDA       L14
00B6:0474 E15C            LDDRA     
00B6:0476 2807            LDA       L7
00B6:0478 E150            LDDRI     
00B6:047A 2808            LDA       L8
00B6:047C E150            LDDRI     
00B6:047E E1C6A406        SHLISLC   L18, 3
00B6:0482 E1C6A206        SHLISLC   L17, 3
00B6:0486 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:0488 6E12            INCIL     L18
00B6:048A 3780C7          JMP       0x0429
00B6:048D 6ABA00          CMPILC    L29, 0
00B6:0490 358006          JGE       0x0496
00B6:0493 37800A          JMP       0x049B
00B6:0496 6E11            INCIL     L17
00B6:0498 3780F9          JMP       0x041E
00B6:049B 3787A0          JMP       0x086E
00B6:049E E16C8F17        LDOSL     L30, G23(PDJPG_Context/jpg_is420)
00B6:04A2 30857C          JEQ       0x0763
00B6:04A5 2A8214          LDC       Str:2D8="PDJPG_MarkerSOS: Clr420\n"
00B6:04A8 AB              PUSHA     
00B6:04A9 7000            CALLG     G0(printf)
00B6:04AB E11CBA00        MVIC      L29, 0
00B6:04AF E11CA200        MVIC      L17, 0
00B6:04B3 7B              LABEL     
00B6:04B4 6B889A          CMPILL    L17, L26
00B6:04B7 35854C          JGE       0x0760
00B6:04BA E11CA400        MVIC      L18, 0
00B6:04BE 7B              LABEL     
00B6:04BF 6B8919          CMPILL    L18, L25
00B6:04C2 35851A          JGE       0x0752
00B6:04C5 E1E68A9102      SHLILLC   L21, L17, 1
00B6:04CA E1E68B1202      SHLILLC   L22, L18, 1
00B6:04CF E1C0AA00        ADDISLC   L21, 0
00B6:04D3 2809            LDA       L9
00B6:04D5 E150            LDDRI     
00B6:04D7 02              MULI      
00B6:04D8 E1C0AC00        ADDISLC   L22, 0
00B6:04DC 00              ADDI      
00B6:04DD 2413            STI       L19
00B6:04DF 281E            LDA       L30
00B6:04E1 2800            LDA       L0
00B6:04E3 E1B0            CVTA2PTR  
00B6:04E5 280B            LDA       L11
00B6:04E7 E159            LDDRUB    
00B6:04E9 B602            SHLIC     1
00B6:04EB B000            ADDIC     0
00B6:04ED 280C            LDA       L12
00B6:04EF E159            LDDRUB    
00B6:04F1 B602            SHLIC     1
00B6:04F3 6C              INCI      
00B6:04F4 2805            LDA       L5
00B6:04F6 E159            LDDRUB    
00B6:04F8 E1CA8899        MULISLL   L17, L25
00B6:04FC B812            ADDIL     L18
00B6:04FE 201B            LDI       L27
00B6:0500 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:0502 241D            STI       L29
00B6:0504 6ABA00          CMPILC    L29, 0
00B6:0507 358006          JGE       0x050D
00B6:050A 37848A          JMP       0x0752
00B6:050D 2800            LDA       L0
00B6:050F E1B0            CVTA2PTR  
00B6:0511 2802            LDA       L2
00B6:0513 E1B0            CVTA2PTR  
00B6:0515 2A8805          LDC       128u
00B6:0518 201D            LDI       L29
00B6:051A 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:051C 281E            LDA       L30
00B6:051E 2802            LDA       L2
00B6:0520 E1B0            CVTA2PTR  
00B6:0522 280E            LDA       L14
00B6:0524 E15C            LDDRA     
00B6:0526 2807            LDA       L7
00B6:0528 E150            LDDRI     
00B6:052A 2808            LDA       L8
00B6:052C E150            LDDRI     
00B6:052E E1C0AC00        ADDISLC   L22, 0
00B6:0532 B210            MULIC     8
00B6:0534 E1C0AA00        ADDISLC   L21, 0
00B6:0538 B606            SHLIC     3
00B6:053A 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:053C E1C0AA00        ADDISLC   L21, 0
00B6:0540 2809            LDA       L9
00B6:0542 E150            LDDRI     
00B6:0544 02              MULI      
00B6:0545 E1C0AC01        ADDISLC   L22, 1
00B6:0549 00              ADDI      
00B6:054A 2413            STI       L19
00B6:054C 281E            LDA       L30
00B6:054E 2800            LDA       L0
00B6:0550 E1B0            CVTA2PTR  
00B6:0552 280B            LDA       L11
00B6:0554 E159            LDDRUB    
00B6:0556 B602            SHLIC     1
00B6:0558 B000            ADDIC     0
00B6:055A 280C            LDA       L12
00B6:055C E159            LDDRUB    
00B6:055E B602            SHLIC     1
00B6:0560 6C              INCI      
00B6:0561 2805            LDA       L5
00B6:0563 E159            LDDRUB    
00B6:0565 E1CA8899        MULISLL   L17, L25
00B6:0569 B812            ADDIL     L18
00B6:056B 201B            LDI       L27
00B6:056D 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:056F 241D            STI       L29
00B6:0571 6ABA00          CMPILC    L29, 0
00B6:0574 358006          JGE       0x057A
00B6:0577 3783B0          JMP       0x0752
00B6:057A 2800            LDA       L0
00B6:057C E1B0            CVTA2PTR  
00B6:057E 2802            LDA       L2
00B6:0580 E1B0            CVTA2PTR  
00B6:0582 2A8805          LDC       128u
00B6:0585 201D            LDI       L29
00B6:0587 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:0589 281E            LDA       L30
00B6:058B 2802            LDA       L2
00B6:058D E1B0            CVTA2PTR  
00B6:058F 280E            LDA       L14
00B6:0591 E15C            LDDRA     
00B6:0593 2807            LDA       L7
00B6:0595 E150            LDDRI     
00B6:0597 2808            LDA       L8
00B6:0599 E150            LDDRI     
00B6:059B E1C0AC01        ADDISLC   L22, 1
00B6:059F B210            MULIC     8
00B6:05A1 E1C0AA00        ADDISLC   L21, 0
00B6:05A5 B606            SHLIC     3
00B6:05A7 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:05A9 E1C0AA01        ADDISLC   L21, 1
00B6:05AD 2809            LDA       L9
00B6:05AF E150            LDDRI     
00B6:05B1 02              MULI      
00B6:05B2 E1C0AC00        ADDISLC   L22, 0
00B6:05B6 00              ADDI      
00B6:05B7 2413            STI       L19
00B6:05B9 281E            LDA       L30
00B6:05BB 2800            LDA       L0
00B6:05BD E1B0            CVTA2PTR  
00B6:05BF 280B            LDA       L11
00B6:05C1 E159            LDDRUB    
00B6:05C3 B602            SHLIC     1
00B6:05C5 B000            ADDIC     0
00B6:05C7 280C            LDA       L12
00B6:05C9 E159            LDDRUB    
00B6:05CB B602            SHLIC     1
00B6:05CD 6C              INCI      
00B6:05CE 2805            LDA       L5
00B6:05D0 E159            LDDRUB    
00B6:05D2 E1CA8899        MULISLL   L17, L25
00B6:05D6 B812            ADDIL     L18
00B6:05D8 201B            LDI       L27
00B6:05DA 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:05DC 241D            STI       L29
00B6:05DE 6ABA00          CMPILC    L29, 0
00B6:05E1 358006          JGE       0x05E7
00B6:05E4 3782D6          JMP       0x0752
00B6:05E7 2800            LDA       L0
00B6:05E9 E1B0            CVTA2PTR  
00B6:05EB 2802            LDA       L2
00B6:05ED E1B0            CVTA2PTR  
00B6:05EF 2A8805          LDC       128u
00B6:05F2 201D            LDI       L29
00B6:05F4 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:05F6 281E            LDA       L30
00B6:05F8 2802            LDA       L2
00B6:05FA E1B0            CVTA2PTR  
00B6:05FC 280E            LDA       L14
00B6:05FE E15C            LDDRA     
00B6:0600 2807            LDA       L7
00B6:0602 E150            LDDRI     
00B6:0604 2808            LDA       L8
00B6:0606 E150            LDDRI     
00B6:0608 E1C0AC00        ADDISLC   L22, 0
00B6:060C B210            MULIC     8
00B6:060E E1C0AA01        ADDISLC   L21, 1
00B6:0612 B606            SHLIC     3
00B6:0614 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:0616 E1C0AA01        ADDISLC   L21, 1
00B6:061A 2809            LDA       L9
00B6:061C E150            LDDRI     
00B6:061E 02              MULI      
00B6:061F E1C0AC01        ADDISLC   L22, 1
00B6:0623 00              ADDI      
00B6:0624 2413            STI       L19
00B6:0626 281E            LDA       L30
00B6:0628 2800            LDA       L0
00B6:062A E1B0            CVTA2PTR  
00B6:062C 280B            LDA       L11
00B6:062E E159            LDDRUB    
00B6:0630 B602            SHLIC     1
00B6:0632 B000            ADDIC     0
00B6:0634 280C            LDA       L12
00B6:0636 E159            LDDRUB    
00B6:0638 B602            SHLIC     1
00B6:063A 6C              INCI      
00B6:063B 2805            LDA       L5
00B6:063D E159            LDDRUB    
00B6:063F E1CA8899        MULISLL   L17, L25
00B6:0643 B812            ADDIL     L18
00B6:0645 201B            LDI       L27
00B6:0647 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:0649 241D            STI       L29
00B6:064B 6ABA00          CMPILC    L29, 0
00B6:064E 358006          JGE       0x0654
00B6:0651 3781FC          JMP       0x0752
00B6:0654 2800            LDA       L0
00B6:0656 E1B0            CVTA2PTR  
00B6:0658 2802            LDA       L2
00B6:065A E1B0            CVTA2PTR  
00B6:065C 2A8805          LDC       128u
00B6:065F 201D            LDI       L29
00B6:0661 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:0663 281E            LDA       L30
00B6:0665 2802            LDA       L2
00B6:0667 E1B0            CVTA2PTR  
00B6:0669 280E            LDA       L14
00B6:066B E15C            LDDRA     
00B6:066D 2807            LDA       L7
00B6:066F E150            LDDRI     
00B6:0671 2808            LDA       L8
00B6:0673 E150            LDDRI     
00B6:0675 E1C0AC01        ADDISLC   L22, 1
00B6:0679 B210            MULIC     8
00B6:067B E1C0AA01        ADDISLC   L21, 1
00B6:067F B606            SHLIC     3
00B6:0681 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:0683 281E            LDA       L30
00B6:0685 2800            LDA       L0
00B6:0687 E1388080        LEARIC    64
00B6:068B E1B0            CVTA2PTR  
00B6:068D E17F80B602      LDIXZLC   L11b, 1
00B6:0692 B602            SHLIC     1
00B6:0694 B000            ADDIC     0
00B6:0696 E17F80C602      LDIXZLC   L12b, 1
00B6:069B B602            SHLIC     1
00B6:069D 6C              INCI      
00B6:069E E17F5602        LDIXZLC   L5b, 1
00B6:06A2 E1CA8899        MULISLL   L17, L25
00B6:06A6 B812            ADDIL     L18
00B6:06A8 201B            LDI       L27
00B6:06AA 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:06AC 241D            STI       L29
00B6:06AE 6ABA00          CMPILC    L29, 0
00B6:06B1 358006          JGE       0x06B7
00B6:06B4 378136          JMP       0x0752
00B6:06B7 2800            LDA       L0
00B6:06B9 E1388080        LEARIC    64
00B6:06BD E1B0            CVTA2PTR  
00B6:06BF 2802            LDA       L2
00B6:06C1 E1B0            CVTA2PTR  
00B6:06C3 2A8805          LDC       128u
00B6:06C6 201D            LDI       L29
00B6:06C8 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:06CA 281E            LDA       L30
00B6:06CC 2802            LDA       L2
00B6:06CE E1B0            CVTA2PTR  
00B6:06D0 E17F80E402      LDIXZLC   L14a, 1
00B6:06D5 E17F7002        LDIXZLC   L7i, 1
00B6:06D9 E17F808002      LDIXZLC   L8i, 1
00B6:06DE E1C6A406        SHLISLC   L18, 3
00B6:06E2 E1C6A206        SHLISLC   L17, 3
00B6:06E6 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:06E8 281E            LDA       L30
00B6:06EA 2800            LDA       L0
00B6:06EC E1388100        LEARIC    128
00B6:06F0 E1B0            CVTA2PTR  
00B6:06F2 E17F80B604      LDIXZLC   L11b, 2
00B6:06F7 B602            SHLIC     1
00B6:06F9 B000            ADDIC     0
00B6:06FB E17F80C604      LDIXZLC   L12b, 2
00B6:0700 B602            SHLIC     1
00B6:0702 6C              INCI      
00B6:0703 E17F5604        LDIXZLC   L5b, 2
00B6:0707 E1CA8899        MULISLL   L17, L25
00B6:070B B812            ADDIL     L18
00B6:070D 201B            LDI       L27
00B6:070F 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:0711 241D            STI       L29
00B6:0713 6ABA00          CMPILC    L29, 0
00B6:0716 358006          JGE       0x071C
00B6:0719 37806C          JMP       0x0752
00B6:071C 2800            LDA       L0
00B6:071E E1388100        LEARIC    128
00B6:0722 E1B0            CVTA2PTR  
00B6:0724 2802            LDA       L2
00B6:0726 E1B0            CVTA2PTR  
00B6:0728 2A8805          LDC       128u
00B6:072B 201D            LDI       L29
00B6:072D 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:072F 281E            LDA       L30
00B6:0731 2802            LDA       L2
00B6:0733 E1B0            CVTA2PTR  
00B6:0735 E17F80E404      LDIXZLC   L14a, 2
00B6:073A E17F7004        LDIXZLC   L7i, 2
00B6:073E E17F808004      LDIXZLC   L8i, 2
00B6:0743 E1C6A406        SHLISLC   L18, 3
00B6:0747 E1C6A206        SHLISLC   L17, 3
00B6:074B 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:074D 6E12            INCIL     L18
00B6:074F 378525          JMP       0x04BF
00B6:0752 6ABA00          CMPILC    L29, 0
00B6:0755 358006          JGE       0x075B
00B6:0758 37800A          JMP       0x0760
00B6:075B 6E11            INCIL     L17
00B6:075D 378557          JMP       0x04B4
00B6:0760 378216          JMP       0x086E
00B6:0763 2A8224          LDC       Str:2F1="PDJPG_MarkerSOS: Generic\n"
00B6:0766 AB              PUSHA     
00B6:0767 7000            CALLG     G0(printf)
00B6:0769 E11CBA00        MVIC      L29, 0
00B6:076D E11CA200        MVIC      L17, 0
00B6:0771 7B              LABEL     
00B6:0772 6B889B          CMPILL    L17, L27
00B6:0775 3581EC          JGE       0x086E
00B6:0778 E11CA400        MVIC      L18, 0
00B6:077C 7B              LABEL     
00B6:077D 6B891C          CMPILL    L18, L28
00B6:0780 3581BA          JGE       0x0860
00B6:0783 E11CA600        MVIC      L19, 0
00B6:0787 7B              LABEL     
00B6:0788 2013            LDI       L19
00B6:078A E17E4612        LDIXZLL   L4b, L18
00B6:078E 38              CMPI      
00B6:078F 358180          JGE       0x0852
00B6:0792 E11CA800        MVIC      L20, 0
00B6:0796 7B              LABEL     
00B6:0797 2014            LDI       L20
00B6:0799 E17E3612        LDIXZLL   L3b, L18
00B6:079D 38              CMPI      
00B6:079E 358146          JGE       0x0844
00B6:07A1 6ABA00          CMPILC    L29, 0
00B6:07A4 358006          JGE       0x07AA
00B6:07A7 378134          JMP       0x0844
00B6:07AA 2011            LDI       L17
00B6:07AC E17E809012      LDIXZLL   L9i, L18
00B6:07B1 E17E3612        LDIXZLL   L3b, L18
00B6:07B5 E170            DIVI      
00B6:07B7 E170            DIVI      
00B6:07B9 E17E3612        LDIXZLL   L3b, L18
00B6:07BD 02              MULI      
00B6:07BE 2415            STI       L21
00B6:07C0 2011            LDI       L17
00B6:07C2 E17E809012      LDIXZLL   L9i, L18
00B6:07C7 E17E3612        LDIXZLL   L3b, L18
00B6:07CB E170            DIVI      
00B6:07CD E172            MODI      
00B6:07CF E17E3612        LDIXZLL   L3b, L18
00B6:07D3 02              MULI      
00B6:07D4 2416            STI       L22
00B6:07D6 281E            LDA       L30
00B6:07D8 2800            LDA       L0
00B6:07DA E1C6A40C        SHLISLC   L18, 6
00B6:07DE E130            LEARI     
00B6:07E0 E1B0            CVTA2PTR  
00B6:07E2 E17E80B612      LDIXZLL   L11b, L18
00B6:07E7 B602            SHLIC     1
00B6:07E9 B000            ADDIC     0
00B6:07EB E17E80C612      LDIXZLL   L12b, L18
00B6:07F0 B602            SHLIC     1
00B6:07F2 6C              INCI      
00B6:07F3 E17E5612        LDIXZLL   L5b, L18
00B6:07F7 2011            LDI       L17
00B6:07F9 201B            LDI       L27
00B6:07FB 701E            CALLG     G30(PDJHUFF_DecodeBlock)
00B6:07FD 241D            STI       L29
00B6:07FF 6ABA00          CMPILC    L29, 0
00B6:0802 358006          JGE       0x0808
00B6:0805 378078          JMP       0x0844
00B6:0808 2800            LDA       L0
00B6:080A E1C6A40C        SHLISLC   L18, 6
00B6:080E E130            LEARI     
00B6:0810 E1B0            CVTA2PTR  
00B6:0812 2802            LDA       L2
00B6:0814 E1B0            CVTA2PTR  
00B6:0816 2A8805          LDC       128u
00B6:0819 201D            LDI       L29
00B6:081B 701F            CALLG     G31(PDJPG_TransIDCT)
00B6:081D 281E            LDA       L30
00B6:081F 2802            LDA       L2
00B6:0821 E1B0            CVTA2PTR  
00B6:0823 E17E80E412      LDIXZLL   L14a, L18
00B6:0828 E17E7012        LDIXZLL   L7i, L18
00B6:082C E17E808012      LDIXZLL   L8i, L18
00B6:0831 E1C88B14        ADDISLL   L22, L20
00B6:0835 B210            MULIC     8
00B6:0837 E1C88A93        ADDISLL   L21, L19
00B6:083B B606            SHLIC     3
00B6:083D 7020            CALLG     G32(PDJPG_CopyOutBlock8B)
00B6:083F 6E14            INCIL     L20
00B6:0841 378159          JMP       0x0797
00B6:0844 6ABA00          CMPILC    L29, 0
00B6:0847 358006          JGE       0x084D
00B6:084A 37800A          JMP       0x0852
00B6:084D 6E13            INCIL     L19
00B6:084F 378193          JMP       0x0788
00B6:0852 6ABA00          CMPILC    L29, 0
00B6:0855 358006          JGE       0x085B
00B6:0858 37800A          JMP       0x0860
00B6:085B 6E12            INCIL     L18
00B6:085D 3781C5          JMP       0x077D
00B6:0860 6ABA00          CMPILC    L29, 0
00B6:0863 358006          JGE       0x0869
00B6:0866 37800A          JMP       0x086E
00B6:0869 6E11            INCIL     L17
00B6:086B 3781F7          JMP       0x0772
00B6:086E 2A8234          LDC       Str:30B="PDJPG_MarkerSOS: Img Dec\n"
00B6:0871 AB              PUSHA     
00B6:0872 7000            CALLG     G0(printf)
00B6:0874 6ABA00          CMPILC    L29, 0
00B6:0877 35801A          JGE       0x0887
00B6:087A 2A8244          LDC       Str:325="PDJPG_MarkerSOS: Bad Image\n"
00B6:087D AB              PUSHA     
00B6:087E 7000            CALLG     G0(printf)
00B6:0880 2A10            LDC       -1i
00B6:0882 378030          JMP       0x089D
00B6:0885 61A0            NX.POPI   
00B6:0887 E16C8F25        LDOSL     L30, G37(PDJPG_Context/huff_cs)
00B6:088B 281F            LDA       L31
00B6:088D E1B406          DIFFPTR   b:0
00B6:0890 2411            STI       L17
00B6:0892 2011            LDI       L17
00B6:0894 37800C          JMP       0x089D
00B6:0897 61A0            NX.POPI   
00B6:0899 61AC            NX.PUSHI  
00B6:089B E144            LBLCLNP   
00B6:089D E143900000      DFXARR    i:256, L0
00B6:08A2 E143840001      DFXARR    i:64, L1
00B6:08A7 E143840002      DFXARR    i:64, L2
00B6:08AC E1434603        DFXARR    b:4, L3
00B6:08B0 E1434604        DFXARR    b:4, L4
00B6:08B4 E1434605        DFXARR    b:4, L5
00B6:08B8 E1434606        DFXARR    b:4, L6
00B6:08BC E1434007        DFXARR    i:4, L7
00B6:08C0 E1434008        DFXARR    i:4, L8
00B6:08C4 E1434009        DFXARR    i:4, L9
00B6:08C8 E143400A        DFXARR    i:4, L10
00B6:08CC E143460B        DFXARR    b:4, L11
00B6:08D0 E143460C        DFXARR    b:4, L12
00B6:08D4 E143400D        DFXARR    i:4, L13
00B6:08D8 E143440E        DFXARR    a:4, L14
00B6:08DC E143400F        DFXARR    i:4, L15
00B6:08E0 74              RETI      
	Avg B/tk=1.061653
183: PDJPG_MarkerSOF0(L123Ph)i:
00B7:0000 2809            LDA       L9
00B7:0002 8CE159          LDDRUB.P  
00B7:0005 B610            SHLIC     8
00B7:0007 2809            LDA       L9
00B7:0009 8C5902          LDIXUBC.P 1
00B7:000C 04              ORI       
00B7:000D 2405            STI       L5
00B7:000F 2809            LDA       L9
00B7:0011 8C5906          LDIXUBC.P 3
00B7:0014 B610            SHLIC     8
00B7:0016 2809            LDA       L9
00B7:0018 8C5908          LDIXUBC.P 4
00B7:001B 04              ORI       
00B7:001C 2402            STI       L2
00B7:001E 2809            LDA       L9
00B7:0020 8C590A          LDIXUBC.P 5
00B7:0023 B610            SHLIC     8
00B7:0025 2809            LDA       L9
00B7:0027 8C590C          LDIXUBC.P 6
00B7:002A 04              ORI       
00B7:002B 2403            STI       L3
00B7:002D 2003            LDI       L3
00B7:002F E16D8400        STOSL     L8, G0(PDJPG_Context/xs)
00B7:0033 2002            LDI       L2
00B7:0035 E16D8401        STOSL     L8, G1(PDJPG_Context/ys)
00B7:0039 E11C60          MVIC      L6, 0
00B7:003C E11C70          MVIC      L7, 0
00B7:003F 2809            LDA       L9
00B7:0041 8C590E          LDIXUBC.P 7
00B7:0044 2404            STI       L4
00B7:0046 2809            LDA       L9
00B7:0048 8CE13D10        LEARBC.P  8
00B7:004C 2901            STA       L1
00B7:004E E11C20          MVIC      L2, 0
00B7:0051 7B              LABEL     
00B7:0052 6B24            CMPILL    L2, L4
00B7:0054 3580E2          JGE       0x00C8
00B7:0057 2801            LDA       L1
00B7:0059 8CE159          LDDRUB.P  
00B7:005C E16C8402        LDOSL     L8, G2(PDJPG_Context/jpg_cid)
00B7:0060 2002            LDI       L2
00B7:0062 4E              STIXB     
00B7:0063 2801            LDA       L1
00B7:0065 8C5902          LDIXUBC.P 1
00B7:0068 B708            SARIC     4
00B7:006A E16C8403        LDOSL     L8, G3(PDJPG_Context/jpg_ch)
00B7:006E 2002            LDI       L2
00B7:0070 4E              STIXB     
00B7:0071 2801            LDA       L1
00B7:0073 8C5902          LDIXUBC.P 1
00B7:0076 B31E            ANDIC     15
00B7:0078 9D              CVTUB2I   
00B7:0079 E16C8404        LDOSL     L8, G4(PDJPG_Context/jpg_cv)
00B7:007D 2002            LDI       L2
00B7:007F 4E              STIXB     
00B7:0080 2801            LDA       L1
00B7:0082 8C5904          LDIXUBC.P 2
00B7:0085 E16C8405        LDOSL     L8, G5(PDJPG_Context/jpg_qid)
00B7:0089 2002            LDI       L2
00B7:008B 4E              STIXB     
00B7:008C E16C8403        LDOSL     L8, G3(PDJPG_Context/jpg_ch)
00B7:0090 2002            LDI       L2
00B7:0092 49              LDIXUB    
00B7:0093 2006            LDI       L6
00B7:0095 38              CMPI      
00B7:0096 348014          JLE       0x00A3
00B7:0099 E16C8403        LDOSL     L8, G3(PDJPG_Context/jpg_ch)
00B7:009D 2002            LDI       L2
00B7:009F 49              LDIXUB    
00B7:00A0 2406            STI       L6
00B7:00A2 7B              LABEL     
00B7:00A3 E16C8404        LDOSL     L8, G4(PDJPG_Context/jpg_cv)
00B7:00A7 2002            LDI       L2
00B7:00A9 49              LDIXUB    
00B7:00AA 2007            LDI       L7
00B7:00AC 38              CMPI      
00B7:00AD 348014          JLE       0x00BA
00B7:00B0 E16C8404        LDOSL     L8, G4(PDJPG_Context/jpg_cv)
00B7:00B4 2002            LDI       L2
00B7:00B6 49              LDIXUB    
00B7:00B7 2407            STI       L7
00B7:00B9 7B              LABEL     
00B7:00BA 2801            LDA       L1
00B7:00BC 8CE13D06        LEARBC.P  3
00B7:00C0 2901            STA       L1
00B7:00C2 7B              LABEL     
00B7:00C3 6E02            INCIL     L2
00B7:00C5 3780EB          JMP       0x0052
00B7:00C8 2006            LDI       L6
00B7:00CA E16D8406        STOSL     L8, G6(PDJPG_Context/jpg_chm)
00B7:00CE 2007            LDI       L7
00B7:00D0 E16D8407        STOSL     L8, G7(PDJPG_Context/jpg_chn)
00B7:00D4 E11C20          MVIC      L2, 0
00B7:00D7 7B              LABEL     
00B7:00D8 6B24            CMPILL    L2, L4
00B7:00DA 358068          JGE       0x0111
00B7:00DD E16C8403        LDOSL     L8, G3(PDJPG_Context/jpg_ch)
00B7:00E1 2002            LDI       L2
00B7:00E3 49              LDIXUB    
00B7:00E4 E16C8400        LDOSL     L8, G0(PDJPG_Context/xs)
00B7:00E8 02              MULI      
00B7:00E9 2006            LDI       L6
00B7:00EB E170            DIVI      
00B7:00ED E16C8408        LDOSL     L8, G8(PDJPG_Context/jpg_cxi)
00B7:00F1 2002            LDI       L2
00B7:00F3 44              STIXI     
00B7:00F4 E16C8404        LDOSL     L8, G4(PDJPG_Context/jpg_cv)
00B7:00F8 2002            LDI       L2
00B7:00FA 49              LDIXUB    
00B7:00FB E16C8401        LDOSL     L8, G1(PDJPG_Context/ys)
00B7:00FF 02              MULI      
00B7:0100 2007            LDI       L7
00B7:0102 E170            DIVI      
00B7:0104 E16C8409        LDOSL     L8, G9(PDJPG_Context/jpg_cyi)
00B7:0108 2002            LDI       L2
00B7:010A 44              STIXI     
00B7:010B 7B              LABEL     
00B7:010C 6E02            INCIL     L2
00B7:010E 378071          JMP       0x00D8
00B7:0111 2004            LDI       L4
00B7:0113 E16D840A        STOSL     L8, G10(PDJPG_Context/jpg_nc)
00B7:0117 6400            RETC      0i
	Avg B/tk=0.952542
184: PDJPG_MarkerDQT(L123Ph)i:
00B8:0000 2806            LDA       L6
00B8:0002 8CE159          LDDRUB.P  
00B8:0005 B610            SHLIC     8
00B8:0007 2806            LDA       L6
00B8:0009 8C5902          LDIXUBC.P 1
00B8:000C 04              ORI       
00B8:000D 2404            STI       L4
00B8:000F 2806            LDA       L6
00B8:0011 8CE13D04        LEARBC.P  2
00B8:0015 2900            STA       L0
00B8:0017 2806            LDA       L6
00B8:0019 2004            LDI       L4
00B8:001B 8CE135          LEARB.P   
00B8:001E 2901            STA       L1
00B8:0020 7B              LABEL     
00B8:0021 2800            LDA       L0
00B8:0023 2801            LDA       L1
00B8:0025 8C3C            CMPA.P    
00B8:0027 358096          JGE       0x0075
00B8:002A 2800            LDA       L0
00B8:002C 8CE159          LDDRUB.P  
00B8:002F B708            SARIC     4
00B8:0031 B31E            ANDIC     15
00B8:0033 2402            STI       L2
00B8:0035 2002            LDI       L2
00B8:0037 308004          JEQ       0x003C
00B8:003A 6410            RETC      -1i
00B8:003C 2800            LDA       L0
00B8:003E 8CE159          LDDRUB.P  
00B8:0041 B31E            ANDIC     15
00B8:0043 2402            STI       L2
00B8:0045 E11C30          MVIC      L3, 0
00B8:0048 7B              LABEL     
00B8:0049 6A8680          CMPILC    L3, 64
00B8:004C 358034          JGE       0x0069
00B8:004F 2800            LDA       L0
00B8:0051 E1C031          ADDISLC   L3, 1
00B8:0054 8C49            LDIXUB.P  
00B8:0056 E16C51          LDOSL     L5, G1(PDJPG_Context/jpg_qt)
00B8:0059 E1C62C          SHLISLC   L2, 6
00B8:005C 7E00            LDGS      G0(pdjpg_zigzag2)
00B8:005E 2003            LDI       L3
00B8:0060 40              LDIXI     
00B8:0061 00              ADDI      
00B8:0062 4E              STIXB     
00B8:0063 7B              LABEL     
00B8:0064 6E03            INCIL     L3
00B8:0066 37803F          JMP       0x0049
00B8:0069 2800            LDA       L0
00B8:006B 8CE13D8082      LEARBC.P  65
00B8:0070 2900            STA       L0
00B8:0072 3780A7          JMP       0x0021
00B8:0075 2800            LDA       L0
00B8:0077 2806            LDA       L6
00B8:0079 E1B406          DIFFPTR   b:0
00B8:007C 74              RETI      
	Avg B/tk=0.946970
185: PDJPG_MarkerDHT(L123Ph)i:
00B9:0000 2808            LDA       L8
00B9:0002 8CE159          LDDRUB.P  
00B9:0005 B610            SHLIC     8
00B9:0007 2808            LDA       L8
00B9:0009 8C5902          LDIXUBC.P 1
00B9:000C 04              ORI       
00B9:000D 2405            STI       L5
00B9:000F 2808            LDA       L8
00B9:0011 8C5904          LDIXUBC.P 2
00B9:0014 B708            SARIC     4
00B9:0016 B31E            ANDIC     15
00B9:0018 2403            STI       L3
00B9:001A 2808            LDA       L8
00B9:001C 8C5904          LDIXUBC.P 2
00B9:001F B31E            ANDIC     15
00B9:0021 2402            STI       L2
00B9:0023 2A14            LDC       Str:341="dest %d, type %d\n"
00B9:0025 8924            NEWARR    a:2
00B9:0027 2002            LDI       L2
00B9:0029 E110            CVTI2AA   
00B9:002B E1AC00          DSTIXAC   0
00B9:002E 2003            LDI       L3
00B9:0030 E110            CVTI2AA   
00B9:0032 E1AC02          DSTIXAC   1
00B9:0035 7000            CALLG     G0(printf)
00B9:0037 E1C622          SHLISLC   L2, 1
00B9:003A B803            ADDIL     L3
00B9:003C 2406            STI       L6
00B9:003E E11C20          MVIC      L2, 0
00B9:0041 7B              LABEL     
00B9:0042 6AC04200        CMPILC    L2, 256
00B9:0046 358058          JGE       0x0075
00B9:0049 AC              PUSHI     
00B9:004A E16C72          LDOSL     L7, G2(PDJPG_Context/huff_len)
00B9:004D E1C68C10        SHLISLC   L6, 8
00B9:0051 B802            ADDIL     L2
00B9:0053 8C4E            STIXB.P   
00B9:0055 2A17            LDC       -1s
00B9:0057 E16C73          LDOSL     L7, G3(PDJPG_Context/huff_next)
00B9:005A E1C68C10        SHLISLC   L6, 8
00B9:005E B802            ADDIL     L2
00B9:0060 8C4F            STIXS.P   
00B9:0062 2A17            LDC       -1s
00B9:0064 E16C74          LDOSL     L7, G4(PDJPG_Context/huff_idx)
00B9:0067 E1C68C10        SHLISLC   L6, 8
00B9:006B B802            ADDIL     L2
00B9:006D 8C4F            STIXS.P   
00B9:006F 7B              LABEL     
00B9:0070 6E02            INCIL     L2
00B9:0072 378065          JMP       0x0042
00B9:0075 2808            LDA       L8
00B9:0077 8CE13D06        LEARBC.P  3
00B9:007B 2900            STA       L0
00B9:007D 2800            LDA       L0
00B9:007F 8CE13D20        LEARBC.P  16
00B9:0083 2901            STA       L1
00B9:0085 E11C40          MVIC      L4, 0
00B9:0088 E11C50          MVIC      L5, 0
00B9:008B E11C20          MVIC      L2, 0
00B9:008E 7B              LABEL     
00B9:008F 6A8420          CMPILC    L2, 16
00B9:0092 3580CA          JGE       0x00FA
00B9:0095 E1E64402        SHLILLC   L4, L4, 1
00B9:0099 E11C30          MVIC      L3, 0
00B9:009C 7B              LABEL     
00B9:009D 2003            LDI       L3
00B9:009F 2800            LDA       L0
00B9:00A1 2002            LDI       L2
00B9:00A3 8C49            LDIXUB.P  
00B9:00A5 38              CMPI      
00B9:00A6 358098          JGE       0x00F5
00B9:00A9 2004            LDI       L4
00B9:00AB A4              DUPI      
00B9:00AC 6C              INCI      
00B9:00AD 2404            STI       L4
00B9:00AF 9F              CVTUS2I   
00B9:00B0 E16C75          LDOSL     L7, G5(PDJPG_Context/huff_code)
00B9:00B3 E1C68C10        SHLISLC   L6, 8
00B9:00B7 E1B216          LDDRPL    L1b
00B9:00BA 00              ADDI      
00B9:00BB 8C4F            STIXS.P   
00B9:00BD E1C021          ADDISLC   L2, 1
00B9:00C0 9D              CVTUB2I   
00B9:00C1 E16C72          LDOSL     L7, G2(PDJPG_Context/huff_len)
00B9:00C4 E1C68C10        SHLISLC   L6, 8
00B9:00C8 E1B216          LDDRPL    L1b
00B9:00CB 00              ADDI      
00B9:00CC 8C4E            STIXB.P   
00B9:00CE 2A15            LDC       1u
00B9:00D0 E1C021          ADDISLC   L2, 1
00B9:00D3 06              SHLI      
00B9:00D4 6D              DECI      
00B9:00D5 9F              CVTUS2I   
00B9:00D6 E16C76          LDOSL     L7, G6(PDJPG_Context/huff_mask)
00B9:00D9 E1C68C10        SHLISLC   L6, 8
00B9:00DD E1B216          LDDRPL    L1b
00B9:00E0 00              ADDI      
00B9:00E1 8C4F            STIXS.P   
00B9:00E3 E1E05201        ADDILLC   L5, L2, 1
00B9:00E7 2801            LDA       L1
00B9:00E9 8CE13D02        LEARBC.P  1
00B9:00ED 2901            STA       L1
00B9:00EF 7B              LABEL     
00B9:00F0 6E03            INCIL     L3
00B9:00F2 3780AF          JMP       0x009D
00B9:00F5 6E02            INCIL     L2
00B9:00F7 3780D5          JMP       0x008F
00B9:00FA 2A74            LDC       Str:353="%04X %d\n"
00B9:00FC 8924            NEWARR    a:2
00B9:00FE 2004            LDI       L4
00B9:0100 E110            CVTI2AA   
00B9:0102 E1AC00          DSTIXAC   0
00B9:0105 2005            LDI       L5
00B9:0107 E110            CVTI2AA   
00B9:0109 E1AC02          DSTIXAC   1
00B9:010C 7000            CALLG     G0(printf)
00B9:010E E11C20          MVIC      L2, 0
00B9:0111 7B              LABEL     
00B9:0112 6AC04200        CMPILC    L2, 256
00B9:0116 358040          JGE       0x0139
00B9:0119 2A17            LDC       -1s
00B9:011B E16C73          LDOSL     L7, G3(PDJPG_Context/huff_next)
00B9:011E E1C68C10        SHLISLC   L6, 8
00B9:0122 B802            ADDIL     L2
00B9:0124 8C4F            STIXS.P   
00B9:0126 2A17            LDC       -1s
00B9:0128 E16C74          LDOSL     L7, G4(PDJPG_Context/huff_idx)
00B9:012B E1C68C10        SHLISLC   L6, 8
00B9:012F B802            ADDIL     L2
00B9:0131 8C4F            STIXS.P   
00B9:0133 7B              LABEL     
00B9:0134 6E02            INCIL     L2
00B9:0136 37804D          JMP       0x0112
00B9:0139 E11C20          MVIC      L2, 0
00B9:013C 7B              LABEL     
00B9:013D 6AC04200        CMPILC    L2, 256
00B9:0141 35812A          JGE       0x01D9
00B9:0144 E16C72          LDOSL     L7, G2(PDJPG_Context/huff_len)
00B9:0147 E1C68C10        SHLISLC   L6, 8
00B9:014B B802            ADDIL     L2
00B9:014D 8C49            LDIXUB.P  
00B9:014F 2405            STI       L5
00B9:0151 2005            LDI       L5
00B9:0153 318006          JNE       0x0159
00B9:0156 3780F6          JMP       0x01D4
00B9:0159 E16C75          LDOSL     L7, G5(PDJPG_Context/huff_code)
00B9:015C E1C68C10        SHLISLC   L6, 8
00B9:0160 B802            ADDIL     L2
00B9:0162 8C4B            LDIXUS.P  
00B9:0164 2403            STI       L3
00B9:0166 6A8A10          CMPILC    L5, 8
00B9:0169 338076          JGT       0x01A7
00B9:016C 2003            LDI       L3
00B9:016E 2A8085          LDC       8u
00B9:0171 B905            SUBIL     L5
00B9:0173 06              SHLI      
00B9:0174 2403            STI       L3
00B9:0176 2A15            LDC       1u
00B9:0178 2A8085          LDC       8u
00B9:017B B905            SUBIL     L5
00B9:017D 06              SHLI      
00B9:017E 2404            STI       L4
00B9:0180 7B              LABEL     
00B9:0181 2004            LDI       L4
00B9:0183 A4              DUPI      
00B9:0184 6D              DECI      
00B9:0185 2404            STI       L4
00B9:0187 308034          JEQ       0x01A4
00B9:018A 6AC06200        CMPILC    L3, 256
00B9:018E 358026          JGE       0x01A4
00B9:0191 2002            LDI       L2
00B9:0193 9E              CVTSS2I   
00B9:0194 E16C74          LDOSL     L7, G4(PDJPG_Context/huff_idx)
00B9:0197 E1C68C10        SHLISLC   L6, 8
00B9:019B B803            ADDIL     L3
00B9:019D 8C4F            STIXS.P   
00B9:019F 6E03            INCIL     L3
00B9:01A1 378045          JMP       0x0181
00B9:01A4 37805A          JMP       0x01D4
00B9:01A7 2003            LDI       L3
00B9:01A9 E1C158          SUBISLC   L5, 8
00B9:01AC 07              SARI      
00B9:01AD 2403            STI       L3
00B9:01AF E16C74          LDOSL     L7, G4(PDJPG_Context/huff_idx)
00B9:01B2 E1C68C10        SHLISLC   L6, 8
00B9:01B6 B803            ADDIL     L3
00B9:01B8 8C4A            LDIXSS.P  
00B9:01BA E16C73          LDOSL     L7, G3(PDJPG_Context/huff_next)
00B9:01BD E1C68C10        SHLISLC   L6, 8
00B9:01C1 B802            ADDIL     L2
00B9:01C3 8C4F            STIXS.P   
00B9:01C5 2002            LDI       L2
00B9:01C7 9E              CVTSS2I   
00B9:01C8 E16C74          LDOSL     L7, G4(PDJPG_Context/huff_idx)
00B9:01CB E1C68C10        SHLISLC   L6, 8
00B9:01CF B803            ADDIL     L3
00B9:01D1 8C4F            STIXS.P   
00B9:01D3 7B              LABEL     
00B9:01D4 6E02            INCIL     L2
00B9:01D6 378137          JMP       0x013D
00B9:01D9 2801            LDA       L1
00B9:01DB 2808            LDA       L8
00B9:01DD E1B406          DIFFPTR   b:0
00B9:01E0 74              RETI      
	Avg B/tk=1.021231
186: PDJPG_MarkerAPP0(L123Ph)i:
00BA:0000 6400            RETC      0i
	Avg B/tk=0.285714
187: PDJPG_MarkerAPP9(L123Ph)i:
00BB:0000 6400            RETC      0i
	Avg B/tk=0.200000
188: PDJPG_MarkerAPP11(L123Ph)i:
00BC:0000 2805            LDA       L5
00BC:0002 8CE13D04        LEARBC.P  2
00BC:0006 2905            STA       L5
00BC:0008 6400            RETC      0i
	Avg B/tk=0.500000
189: PDJPG_MarkerAPP12(L123Ph)i:
00BD:0000 2802            LDA       L2
00BD:0002 8CE13D04        LEARBC.P  2
00BD:0006 2902            STA       L2
00BD:0008 2802            LDA       L2
00BD:000A 8CE159          LDDRUB.P  
00BD:000D B630            SHLIC     24
00BD:000F 2802            LDA       L2
00BD:0011 8C5902          LDIXUBC.P 1
00BD:0014 B620            SHLIC     16
00BD:0016 04              ORI       
00BD:0017 2802            LDA       L2
00BD:0019 8C5904          LDIXUBC.P 2
00BD:001C B610            SHLIC     8
00BD:001E 04              ORI       
00BD:001F 2802            LDA       L2
00BD:0021 8C5906          LDIXUBC.P 3
00BD:0024 04              ORI       
00BD:0025 2400            STI       L0
00BD:0027 6400            RETC      0i
	Avg B/tk=0.854166
190: PDJPG_MarkerAPP14(L123Ph)i:
00BE:0000 2801            LDA       L1
00BE:0002 8CE13D04        LEARBC.P  2
00BE:0006 2901            STA       L1
00BE:0008 6400            RETC      0i
	Avg B/tk=0.909090
191: PDJPG_MarkerAPPN(L123Ph)i:
00BF:0000 6400            RETC      0i
	Avg B/tk=0.285714
192: PDJPG_DecodeCtxInner(L123PhiPiPi)i:
00C0:0000 2828            LDA       L40
00C0:0002 8CE159          LDDRUB.P  
00C0:0005 6881FE          CMPIC     255
00C0:0008 318016          JNE       0x0016
00C0:000B 2828            LDA       L40
00C0:000D 8C5902          LDIXUBC.P 1
00C0:0010 6881B0          CMPIC     216
00C0:0013 308004          JEQ       0x0018
00C0:0016 6410            RETC      -1i
00C0:0018 AC              PUSHI     
00C0:0019 E16D9381        STOSL     L39, G1(PDJPG_Context/jpg_is420)
00C0:001D AC              PUSHI     
00C0:001E E16D9382        STOSL     L39, G2(PDJPG_Context/jpg_rdct)
00C0:0022 2A44            LDC       Str:35C="PDJPG_DecodeCtxInner: Enter\n"
00C0:0024 AB              PUSHA     
00C0:0025 7003            CALLG     G3(printf)
00C0:0027 E11CC46000      MVIC      L35, 0
00C0:002C 7B              LABEL     
00C0:002D 6B91A9          CMPILL    L35, L41
00C0:0030 3583F0          JGE       0x022B
00C0:0033 2828            LDA       L40
00C0:0035 2023            LDI       L35
00C0:0037 8C49            LDIXUB.P  
00C0:0039 6881FE          CMPIC     255
00C0:003C 308006          JEQ       0x0042
00C0:003F 3783C8          JMP       0x0226
00C0:0042 2828            LDA       L40
00C0:0044 E1C0C46001      ADDISLC   L35, 1
00C0:0049 8C49            LDIXUB.P  
00C0:004B 6800            CMPIC     0
00C0:004D 31800A          JNE       0x0055
00C0:0050 6E23            INCIL     L35
00C0:0052 3783A2          JMP       0x0226
00C0:0055 2828            LDA       L40
00C0:0057 E1C0C46001      ADDISLC   L35, 1
00C0:005C 8C49            LDIXUB.P  
00C0:005E 6881FE          CMPIC     255
00C0:0061 31800A          JNE       0x0069
00C0:0064 6E23            INCIL     L35
00C0:0066 37837A          JMP       0x0226
00C0:0069 2828            LDA       L40
00C0:006B E1C0C46001      ADDISLC   L35, 1
00C0:0070 8C49            LDIXUB.P  
00C0:0072 6881B0          CMPIC     216
00C0:0075 31800A          JNE       0x007D
00C0:0078 6E23            INCIL     L35
00C0:007A 378352          JMP       0x0226
00C0:007D 2828            LDA       L40
00C0:007F E1C0C46001      ADDISLC   L35, 1
00C0:0084 8C49            LDIXUB.P  
00C0:0086 B180C0          SUBIC     192
00C0:0089 2424            STI       L36
00C0:008B 6AC48000        CMPILC    L36, 0
00C0:008F 35800C          JGE       0x0098
00C0:0092 E11CC4807E      MVIC      L36, 63
00C0:0097 7B              LABEL     
00C0:0098 2828            LDA       L40
00C0:009A E1C0C46001      ADDISLC   L35, 1
00C0:009F 8C49            LDIXUB.P  
00C0:00A1 6881B6          CMPIC     219
00C0:00A4 31802C          JNE       0x00BD
00C0:00A7 2A64            LDC       Str:379="PDJPG_DecodeCtxInner: DQT\n"
00C0:00A9 AB              PUSHA     
00C0:00AA 7003            CALLG     G3(printf)
00C0:00AC 2827            LDA       L39
00C0:00AE 2828            LDA       L40
00C0:00B0 2023            LDI       L35
00C0:00B2 8CE135          LEARB.P   
00C0:00B5 8CE13D04        LEARBC.P  2
00C0:00B9 7007            CALLG     G7(PDJPG_MarkerDQT)
00C0:00BB A0              POPI      
00C0:00BC 7B              LABEL     
00C0:00BD 2828            LDA       L40
00C0:00BF E1C0C46001      ADDISLC   L35, 1
00C0:00C4 8C49            LDIXUB.P  
00C0:00C6 688188          CMPIC     196
00C0:00C9 31802E          JNE       0x00E3
00C0:00CC 2A8094          LDC       Str:394="PDJPG_DecodeCtxInner: DHT\n"
00C0:00CF AB              PUSHA     
00C0:00D0 7003            CALLG     G3(printf)
00C0:00D2 2827            LDA       L39
00C0:00D4 2828            LDA       L40
00C0:00D6 2023            LDI       L35
00C0:00D8 8CE135          LEARB.P   
00C0:00DB 8CE13D04        LEARBC.P  2
00C0:00DF 700A            CALLG     G10(PDJPG_MarkerDHT)
00C0:00E1 A0              POPI      
00C0:00E2 7B              LABEL     
00C0:00E3 2828            LDA       L40
00C0:00E5 E1C0C46001      ADDISLC   L35, 1
00C0:00EA 8C49            LDIXUB.P  
00C0:00EC 688180          CMPIC     192
00C0:00EF 31802E          JNE       0x0109
00C0:00F2 2A80C4          LDC       Str:3AF="PDJPG_DecodeCtxInner: SOF0\n"
00C0:00F5 AB              PUSHA     
00C0:00F6 7003            CALLG     G3(printf)
00C0:00F8 2827            LDA       L39
00C0:00FA 2828            LDA       L40
00C0:00FC 2023            LDI       L35
00C0:00FE 8CE135          LEARB.P   
00C0:0101 8CE13D04        LEARBC.P  2
00C0:0105 700D            CALLG     G13(PDJPG_MarkerSOF0)
00C0:0107 A0              POPI      
00C0:0108 7B              LABEL     
00C0:0109 2828            LDA       L40
00C0:010B E1C0C46001      ADDISLC   L35, 1
00C0:0110 8C49            LDIXUB.P  
00C0:0112 6881B4          CMPIC     218
00C0:0115 31804E          JNE       0x013F
00C0:0118 2A80F4          LDC       Str:3CB="PDJPG_DecodeCtxInner: SOS\n"
00C0:011B AB              PUSHA     
00C0:011C 7003            CALLG     G3(printf)
00C0:011E 2827            LDA       L39
00C0:0120 2828            LDA       L40
00C0:0122 2023            LDI       L35
00C0:0124 8CE135          LEARB.P   
00C0:0127 8CE13D04        LEARBC.P  2
00C0:012B 7010            CALLG     G16(PDJPG_MarkerSOS)
00C0:012D 2424            STI       L36
00C0:012F 6AC48000        CMPILC    L36, 0
00C0:0133 34800C          JLE       0x013C
00C0:0136 E1E8C8D1A4      ADDILLL   L35, L35, L36
00C0:013B 7B              LABEL     
00C0:013C 3781CE          JMP       0x0226
00C0:013F 2828            LDA       L40
00C0:0141 E1C0C46001      ADDISLC   L35, 1
00C0:0146 8C49            LDIXUB.P  
00C0:0148 6881C0          CMPIC     224
00C0:014B 32818C          JLT       0x0214
00C0:014E 2828            LDA       L40
00C0:0150 E1C0C46001      ADDISLC   L35, 1
00C0:0155 8C49            LDIXUB.P  
00C0:0157 6881DE          CMPIC     239
00C0:015A 33816E          JGT       0x0214
00C0:015D 2A8134          LDC       Str:3E6="PDJPG_DecodeCtxInner: APP%d\n"
00C0:0160 8914            NEWARR    a:1
00C0:0162 2828            LDA       L40
00C0:0164 E1C0C46001      ADDISLC   L35, 1
00C0:0169 8C49            LDIXUB.P  
00C0:016B B180E0          SUBIC     224
00C0:016E E110            CVTI2AA   
00C0:0170 E1AC00          DSTIXAC   0
00C0:0173 7003            CALLG     G3(printf)
00C0:0175 2828            LDA       L40
00C0:0177 E1C0C46001      ADDISLC   L35, 1
00C0:017C 8C49            LDIXUB.P  
00C0:017E 6881C0          CMPIC     224
00C0:0181 318022          JNE       0x0195
00C0:0184 2827            LDA       L39
00C0:0186 2828            LDA       L40
00C0:0188 2023            LDI       L35
00C0:018A 8CE135          LEARB.P   
00C0:018D 8CE13D04        LEARBC.P  2
00C0:0191 7014            CALLG     G20(PDJPG_MarkerAPP0)
00C0:0193 A0              POPI      
00C0:0194 7B              LABEL     
00C0:0195 2828            LDA       L40
00C0:0197 E1C0C46001      ADDISLC   L35, 1
00C0:019C 8C49            LDIXUB.P  
00C0:019E 6881D6          CMPIC     235
00C0:01A1 318022          JNE       0x01B5
00C0:01A4 2827            LDA       L39
00C0:01A6 2828            LDA       L40
00C0:01A8 2023            LDI       L35
00C0:01AA 8CE135          LEARB.P   
00C0:01AD 8CE13D04        LEARBC.P  2
00C0:01B1 7016            CALLG     G22(PDJPG_MarkerAPP11)
00C0:01B3 A0              POPI      
00C0:01B4 7B              LABEL     
00C0:01B5 2828            LDA       L40
00C0:01B7 E1C0C46001      ADDISLC   L35, 1
00C0:01BC 8C49            LDIXUB.P  
00C0:01BE 6881D8          CMPIC     236
00C0:01C1 318022          JNE       0x01D5
00C0:01C4 2827            LDA       L39
00C0:01C6 2828            LDA       L40
00C0:01C8 2023            LDI       L35
00C0:01CA 8CE135          LEARB.P   
00C0:01CD 8CE13D04        LEARBC.P  2
00C0:01D1 7018            CALLG     G24(PDJPG_MarkerAPP12)
00C0:01D3 A0              POPI      
00C0:01D4 7B              LABEL     
00C0:01D5 2828            LDA       L40
00C0:01D7 E1C0C46001      ADDISLC   L35, 1
00C0:01DC 8C49            LDIXUB.P  
00C0:01DE 6881DC          CMPIC     238
00C0:01E1 318022          JNE       0x01F5
00C0:01E4 2827            LDA       L39
00C0:01E6 2828            LDA       L40
00C0:01E8 2023            LDI       L35
00C0:01EA 8CE135          LEARB.P   
00C0:01ED 8CE13D04        LEARBC.P  2
00C0:01F1 701A            CALLG     G26(PDJPG_MarkerAPP14)
00C0:01F3 A0              POPI      
00C0:01F4 7B              LABEL     
00C0:01F5 2828            LDA       L40
00C0:01F7 E1C0C46002      ADDISLC   L35, 2
00C0:01FC 8C49            LDIXUB.P  
00C0:01FE B610            SHLIC     8
00C0:0200 2828            LDA       L40
00C0:0202 E1C0C46003      ADDISLC   L35, 3
00C0:0207 8C49            LDIXUB.P  
00C0:0209 04              ORI       
00C0:020A 2424            STI       L36
00C0:020C E1E8C8D1A4      ADDILLL   L35, L35, L36
00C0:0211 378024          JMP       0x0226
00C0:0214 2828            LDA       L40
00C0:0216 E1C0C46001      ADDISLC   L35, 1
00C0:021B 8C49            LDIXUB.P  
00C0:021D 6881B2          CMPIC     217
00C0:0220 318006          JNE       0x0226
00C0:0223 37800A          JMP       0x022B
00C0:0226 6E23            INCIL     L35
00C0:0228 3783FB          JMP       0x002D
00C0:022B 2A81C4          LDC       Str:403="PDJPG_DecodeCtxInner: Exit\n"
00C0:022E AB              PUSHA     
00C0:022F 7003            CALLG     G3(printf)
00C0:0231 2A81D4          LDC       Str:41F="Sz=%d x %d\n"
00C0:0234 8924            NEWARR    a:2
00C0:0236 E16C939E        LDOSL     L39, G30(PDJPG_Context/xs)
00C0:023A E110            CVTI2AA   
00C0:023C E1AC00          DSTIXAC   0
00C0:023F E16C939F        LDOSL     L39, G31(PDJPG_Context/ys)
00C0:0243 E110            CVTI2AA   
00C0:0245 E1AC02          DSTIXAC   1
00C0:0248 7003            CALLG     G3(printf)
00C0:024A E16C939E        LDOSL     L39, G30(PDJPG_Context/xs)
00C0:024E E1B382A0        STDRPL    L42i
00C0:0252 E16C939F        LDOSL     L39, G31(PDJPG_Context/ys)
00C0:0256 E1B382B0        STDRPL    L43i
00C0:025A 6400            RETC      0i
	Avg B/tk=1.059649
193: PDJPG_GetImageYUVA420(L123PhPhPhPhii)i:
00C1:0000 2005            LDI       L5
00C1:0002 E16C00          LDOSL     L0, G0(PDJPG_Context/xs)
00C1:0005 38              CMPI      
00C1:0006 318012          JNE       0x0012
00C1:0009 2006            LDI       L6
00C1:000B E16C01          LDOSL     L0, G1(PDJPG_Context/ys)
00C1:000E 38              CMPI      
00C1:000F 308004          JEQ       0x0014
00C1:0012 6410            RETC      -1i
00C1:0014 E16C02          LDOSL     L0, G2(PDJPG_Context/jpg_is420)
00C1:0017 3080B2          JEQ       0x0073
00C1:001A 2801            LDA       L1
00C1:001C E16C04          LDOSL     L0, G4(PDJPG_Context/jpg_sibuf)
00C1:001F E15C            LDDRA     
00C1:0021 E1B0            CVTA2PTR  
00C1:0023 E1CA56          MULISLL   L5, L6
00C1:0026 7003            CALLG     G3(memcpy)
00C1:0028 2802            LDA       L2
00C1:002A E16C04          LDOSL     L0, G4(PDJPG_Context/jpg_sibuf)
00C1:002D 5C02            LDIXAC    1
00C1:002F E1B0            CVTA2PTR  
00C1:0031 E1C752          SARISLC   L5, 1
00C1:0034 E1C762          SARISLC   L6, 1
00C1:0037 02              MULI      
00C1:0038 7003            CALLG     G3(memcpy)
00C1:003A 2803            LDA       L3
00C1:003C E16C04          LDOSL     L0, G4(PDJPG_Context/jpg_sibuf)
00C1:003F 5C04            LDIXAC    2
00C1:0041 E1B0            CVTA2PTR  
00C1:0043 E1C752          SARISLC   L5, 1
00C1:0046 E1C762          SARISLC   L6, 1
00C1:0049 02              MULI      
00C1:004A 7003            CALLG     G3(memcpy)
00C1:004C E19E048040      JEQNULLL  L4, 0x0071
00C1:0051 E16C05          LDOSL     L0, G5(PDJPG_Context/jpg_sabuf)
00C1:0054 E19C801E        JEQNULL   0x0067
00C1:0058 2804            LDA       L4
00C1:005A E16C05          LDOSL     L0, G5(PDJPG_Context/jpg_sabuf)
00C1:005D E1B0            CVTA2PTR  
00C1:005F E1CA56          MULISLL   L5, L6
00C1:0062 7003            CALLG     G3(memcpy)
00C1:0064 378014          JMP       0x0071
00C1:0067 2804            LDA       L4
00C1:0069 2A8FF6          LDC       255b
00C1:006C E1CA56          MULISLL   L5, L6
00C1:006F 7006            CALLG     G6(memset)
00C1:0071 6400            RETC      0i
00C1:0073 6410            RETC      -1i
	Avg B/tk=0.780000
194: PDJPG_GetImagePlaneYUVA420(L123Phii)i:
00C2:0000 E1EA45          MULILLL   L4, L1, L1
00C2:0003 E1C742          SARISLC   L4, 1
00C2:0006 E1C752          SARISLC   L5, 1
00C2:0009 02              MULI      
00C2:000A 2401            STI       L1
00C2:000C 2802            LDA       L2
00C2:000E 2803            LDA       L3
00C2:0010 2803            LDA       L3
00C2:0012 2000            LDI       L0
00C2:0014 8CE135          LEARB.P   
00C2:0017 2803            LDA       L3
00C2:0019 2000            LDI       L0
00C2:001B 8CE135          LEARB.P   
00C2:001E 2001            LDI       L1
00C2:0020 8CE135          LEARB.P   
00C2:0023 2803            LDA       L3
00C2:0025 2000            LDI       L0
00C2:0027 8CE135          LEARB.P   
00C2:002A 2001            LDI       L1
00C2:002C 8CE135          LEARB.P   
00C2:002F 2001            LDI       L1
00C2:0031 8CE135          LEARB.P   
00C2:0034 2004            LDI       L4
00C2:0036 2005            LDI       L5
00C2:0038 7000            CALLG     G0(PDJPG_GetImageYUVA420)
00C2:003A A0              POPI      
00C2:003B 6400            RETC      0i
	Avg B/tk=1.089286
195: PDJPG_GetImageRGBA(L123Phii)i:
00C3:0000 E16C8C00        LDOSL     L24, G0(PDJPG_Context/jpg_is420)
00C3:0004 30836E          JEQ       0x01BE
00C3:0007 2A24            LDC       Str:42B="PDJPG_GetImageRGBA: Is 420\n"
00C3:0009 AB              PUSHA     
00C3:000A 7001            CALLG     G1(printf)
00C3:000C E16C8C03        LDOSL     L24, G3(PDJPG_Context/jpg_sibuf)
00C3:0010 E15C            LDDRA     
00C3:0012 E1B0            CVTA2PTR  
00C3:0014 2900            STA       L0
00C3:0016 E16C8C03        LDOSL     L24, G3(PDJPG_Context/jpg_sibuf)
00C3:001A 5C02            LDIXAC    1
00C3:001C E1B0            CVTA2PTR  
00C3:001E 2901            STA       L1
00C3:0020 E16C8C03        LDOSL     L24, G3(PDJPG_Context/jpg_sibuf)
00C3:0024 5C04            LDIXAC    2
00C3:0026 E1B0            CVTA2PTR  
00C3:0028 2902            STA       L2
00C3:002A E1E78A1A02      SARILLC   L20, L26, 1
00C3:002F E1E78A9B02      SARILLC   L21, L27, 1
00C3:0034 E11CA400        MVIC      L18, 0
00C3:0038 7B              LABEL     
00C3:0039 6B8915          CMPILL    L18, L21
00C3:003C 3582FA          JGE       0x01BC
00C3:003F E1C98A92        SUBISLL   L21, L18
00C3:0043 6D              DECI      
00C3:0044 2413            STI       L19
00C3:0046 2800            LDA       L0
00C3:0048 E1C6A602        SHLISLC   L19, 1
00C3:004C B000            ADDIC     0
00C3:004E BA1A            MULIL     L26
00C3:0050 8CE135          LEARB.P   
00C3:0053 2904            STA       L4
00C3:0055 2800            LDA       L0
00C3:0057 E1C6A602        SHLISLC   L19, 1
00C3:005B 6C              INCI      
00C3:005C BA1A            MULIL     L26
00C3:005E 8CE135          LEARB.P   
00C3:0061 2903            STA       L3
00C3:0063 2801            LDA       L1
00C3:0065 E1CA8994        MULISLL   L19, L20
00C3:0069 8CE135          LEARB.P   
00C3:006C 2905            STA       L5
00C3:006E 2802            LDA       L2
00C3:0070 E1CA8994        MULISLL   L19, L20
00C3:0074 8CE135          LEARB.P   
00C3:0077 2906            STA       L6
00C3:0079 2819            LDA       L25
00C3:007B E1C6A402        SHLISLC   L18, 1
00C3:007F B000            ADDIC     0
00C3:0081 BA1A            MULIL     L26
00C3:0083 B604            SHLIC     2
00C3:0085 8CE135          LEARB.P   
00C3:0088 2907            STA       L7
00C3:008A 2819            LDA       L25
00C3:008C E1C6A402        SHLISLC   L18, 1
00C3:0090 6C              INCI      
00C3:0091 BA1A            MULIL     L26
00C3:0093 B604            SHLIC     2
00C3:0095 8CE135          LEARB.P   
00C3:0098 2908            STA       L8
00C3:009A E11CA200        MVIC      L17, 0
00C3:009E 7B              LABEL     
00C3:009F 6B8894          CMPILL    L17, L20
00C3:00A2 358224          JGE       0x01B7
00C3:00A5 2803            LDA       L3
00C3:00A7 8CE159          LDDRUB.P  
00C3:00AA 2409            STI       L9
00C3:00AC 2803            LDA       L3
00C3:00AE 8C5902          LDIXUBC.P 1
00C3:00B1 240A            STI       L10
00C3:00B3 2803            LDA       L3
00C3:00B5 8CE13D04        LEARBC.P  2
00C3:00B9 2903            STA       L3
00C3:00BB 2804            LDA       L4
00C3:00BD 8CE159          LDDRUB.P  
00C3:00C0 240B            STI       L11
00C3:00C2 2804            LDA       L4
00C3:00C4 8C5902          LDIXUBC.P 1
00C3:00C7 240C            STI       L12
00C3:00C9 2804            LDA       L4
00C3:00CB 8CE13D04        LEARBC.P  2
00C3:00CF 2904            STA       L4
00C3:00D1 2805            LDA       L5
00C3:00D3 A9              DUPA      
00C3:00D4 8CE13D02        LEARBC.P  1
00C3:00D8 2905            STA       L5
00C3:00DA 8CE159          LDDRUB.P  
00C3:00DD 240D            STI       L13
00C3:00DF 2806            LDA       L6
00C3:00E1 A9              DUPA      
00C3:00E2 8CE13D02        LEARBC.P  1
00C3:00E6 2906            STA       L6
00C3:00E8 8CE159          LDDRUB.P  
00C3:00EB 240E            STI       L14
00C3:00ED E1E1878D8080    SUBILLC   L15, L13, 128
00C3:00F3 E1E1880E8080    SUBILLC   L16, L14, 128
00C3:00F9 E1C88490        ADDISLL   L9, L16
00C3:00FD 7004            CALLG     G4(clamp255)
00C3:00FF 9D              CVTUB2I   
00C3:0100 2807            LDA       L7
00C3:0102 8CE15E          STDRB.P   
00C3:0105 2009            LDI       L9
00C3:0107 7004            CALLG     G4(clamp255)
00C3:0109 9D              CVTUB2I   
00C3:010A 2807            LDA       L7
00C3:010C 8C5E02          STIXBC.P  1
00C3:010F E1C8848F        ADDISLL   L9, L15
00C3:0113 7004            CALLG     G4(clamp255)
00C3:0115 9D              CVTUB2I   
00C3:0116 2807            LDA       L7
00C3:0118 8C5E04          STIXBC.P  2
00C3:011B 2A8FF6          LDC       255b
00C3:011E 2807            LDA       L7
00C3:0120 8C5E06          STIXBC.P  3
00C3:0123 E1C88510        ADDISLL   L10, L16
00C3:0127 7004            CALLG     G4(clamp255)
00C3:0129 9D              CVTUB2I   
00C3:012A 2807            LDA       L7
00C3:012C 8C5E08          STIXBC.P  4
00C3:012F 200A            LDI       L10
00C3:0131 7004            CALLG     G4(clamp255)
00C3:0133 9D              CVTUB2I   
00C3:0134 2807            LDA       L7
00C3:0136 8C5E0A          STIXBC.P  5
00C3:0139 E1C8850F        ADDISLL   L10, L15
00C3:013D 7004            CALLG     G4(clamp255)
00C3:013F 9D              CVTUB2I   
00C3:0140 2807            LDA       L7
00C3:0142 8C5E0C          STIXBC.P  6
00C3:0145 2A8FF6          LDC       255b
00C3:0148 2807            LDA       L7
00C3:014A 8C5E0E          STIXBC.P  7
00C3:014D E1C88590        ADDISLL   L11, L16
00C3:0151 7004            CALLG     G4(clamp255)
00C3:0153 9D              CVTUB2I   
00C3:0154 2808            LDA       L8
00C3:0156 8CE15E          STDRB.P   
00C3:0159 200B            LDI       L11
00C3:015B 7004            CALLG     G4(clamp255)
00C3:015D 9D              CVTUB2I   
00C3:015E 2808            LDA       L8
00C3:0160 8C5E02          STIXBC.P  1
00C3:0163 E1C8858F        ADDISLL   L11, L15
00C3:0167 7004            CALLG     G4(clamp255)
00C3:0169 9D              CVTUB2I   
00C3:016A 2808            LDA       L8
00C3:016C 8C5E04          STIXBC.P  2
00C3:016F 2A8FF6          LDC       255b
00C3:0172 2808            LDA       L8
00C3:0174 8C5E06          STIXBC.P  3
00C3:0177 E1C88610        ADDISLL   L12, L16
00C3:017B 7004            CALLG     G4(clamp255)
00C3:017D 9D              CVTUB2I   
00C3:017E 2808            LDA       L8
00C3:0180 8C5E08          STIXBC.P  4
00C3:0183 200C            LDI       L12
00C3:0185 7004            CALLG     G4(clamp255)
00C3:0187 9D              CVTUB2I   
00C3:0188 2808            LDA       L8
00C3:018A 8C5E0A          STIXBC.P  5
00C3:018D E1C8860F        ADDISLL   L12, L15
00C3:0191 7004            CALLG     G4(clamp255)
00C3:0193 9D              CVTUB2I   
00C3:0194 2808            LDA       L8
00C3:0196 8C5E0C          STIXBC.P  6
00C3:0199 2A8FF6          LDC       255b
00C3:019C 2808            LDA       L8
00C3:019E 8C5E0E          STIXBC.P  7
00C3:01A1 2807            LDA       L7
00C3:01A3 8CE13D10        LEARBC.P  8
00C3:01A7 2907            STA       L7
00C3:01A9 2808            LDA       L8
00C3:01AB 8CE13D10        LEARBC.P  8
00C3:01AF 2908            STA       L8
00C3:01B1 7B              LABEL     
00C3:01B2 6E11            INCIL     L17
00C3:01B4 37822F          JMP       0x009F
00C3:01B7 6E12            INCIL     L18
00C3:01B9 378305          JMP       0x0039
00C3:01BC 6400            RETC      0i
00C3:01BE 2A54            LDC       Str:447="PDJPG_GetImageRGBA: Not 420\n"
00C3:01C0 AB              PUSHA     
00C3:01C1 7001            CALLG     G1(printf)
00C3:01C3 6410            RETC      -1i
	Avg B/tk=0.953684
196: PDJPG_Free(Ph)v:
00C4:0000 79              RETV      
	Avg B/tk=0.499998
197: PDJPG_DecodeScanForComponentLayer(PhiCs)Ph:
00C5:0000 2A14            LDC       Str:464="PDJPG_DecodeScanForComponentLayer: Enter\n"
00C5:0002 AB              PUSHA     
00C5:0003 7000            CALLG     G0(printf)
00C5:0005 2B04            MVA       L0, L4
00C5:0007 2804            LDA       L4
00C5:0009 2005            LDI       L5
00C5:000B 8CE135          LEARB.P   
00C5:000E 2902            STA       L2
00C5:0010 7B              LABEL     
00C5:0011 2800            LDA       L0
00C5:0013 2802            LDA       L2
00C5:0015 8C3C            CMPA.P    
00C5:0017 358214          JGE       0x0124
00C5:001A E1B206          LDDRPL    L0b
00C5:001D 6881FE          CMPIC     255
00C5:0020 308040          JEQ       0x0043
00C5:0023 2800            LDA       L0
00C5:0025 2802            LDA       L2
00C5:0027 8C3C            CMPA.P    
00C5:0029 358028          JGE       0x0040
00C5:002C E1B206          LDDRPL    L0b
00C5:002F 6881FE          CMPIC     255
00C5:0032 308016          JEQ       0x0040
00C5:0035 2800            LDA       L0
00C5:0037 8CE13D02        LEARBC.P  1
00C5:003B 2900            STA       L0
00C5:003D 378039          JMP       0x0023
00C5:0040 378063          JMP       0x0011
00C5:0043 2800            LDA       L0
00C5:0045 8CE159          LDDRUB.P  
00C5:0048 6881FE          CMPIC     255
00C5:004B 31811C          JNE       0x00DC
00C5:004E 2800            LDA       L0
00C5:0050 8C5902          LDIXUBC.P 1
00C5:0053 6881D6          CMPIC     235
00C5:0056 318106          JNE       0x00DC
00C5:0059 2800            LDA       L0
00C5:005B 8C5904          LDIXUBC.P 2
00C5:005E B610            SHLIC     8
00C5:0060 2800            LDA       L0
00C5:0062 8C5906          LDIXUBC.P 3
00C5:0065 04              ORI       
00C5:0066 2403            STI       L3
00C5:0068 2800            LDA       L0
00C5:006A 2003            LDI       L3
00C5:006C 8CE135          LEARB.P   
00C5:006F 8CE13D04        LEARBC.P  2
00C5:0073 2901            STA       L1
00C5:0075 2800            LDA       L0
00C5:0077 8CE13D08        LEARBC.P  4
00C5:007B 2900            STA       L0
00C5:007D 2800            LDA       L0
00C5:007F E1B0            CVTA2PTR  
00C5:0081 2A44            LDC       Str:48E="CompLayer"
00C5:0083 7003            CALLG     G3(strcmp)
00C5:0085 31808E          JNE       0x00CF
00C5:0088 2800            LDA       L0
00C5:008A 2800            LDA       L0
00C5:008C E1B0            CVTA2PTR  
00C5:008E 7005            CALLG     G5(strlen)
00C5:0090 6C              INCI      
00C5:0091 8CE135          LEARB.P   
00C5:0094 2900            STA       L0
00C5:0096 2800            LDA       L0
00C5:0098 E1B0            CVTA2PTR  
00C5:009A 2806            LDA       L6
00C5:009C E1B0            CVTA2PTR  
00C5:009E 7003            CALLG     G3(strcmp)
00C5:00A0 318036          JNE       0x00BE
00C5:00A3 2A64            LDC       Str:498="PDJPG_DecodeScanForComponentLayer: Found %s\n"
00C5:00A5 8914            NEWARR    a:1
00C5:00A7 2806            LDA       L6
00C5:00A9 E1AC00          DSTIXAC   0
00C5:00AC 7000            CALLG     G0(printf)
00C5:00AE 2800            LDA       L0
00C5:00B0 2800            LDA       L0
00C5:00B2 E1B0            CVTA2PTR  
00C5:00B4 7005            CALLG     G5(strlen)
00C5:00B6 6C              INCI      
00C5:00B7 8CE135          LEARB.P   
00C5:00BA 2900            STA       L0
00C5:00BC 7A14            RET2      L1a
00C5:00BE 2800            LDA       L0
00C5:00C0 2800            LDA       L0
00C5:00C2 E1B0            CVTA2PTR  
00C5:00C4 7005            CALLG     G5(strlen)
00C5:00C6 6C              INCI      
00C5:00C7 8CE135          LEARB.P   
00C5:00CA 2900            STA       L0
00C5:00CC 37817B          JMP       0x0011
00C5:00CF 2800            LDA       L0
00C5:00D1 E1C132          SUBISLC   L3, 2
00C5:00D4 8CE135          LEARB.P   
00C5:00D7 2900            STA       L0
00C5:00D9 378195          JMP       0x0011
00C5:00DC 2800            LDA       L0
00C5:00DE 8CE159          LDDRUB.P  
00C5:00E1 6881FE          CMPIC     255
00C5:00E4 318064          JNE       0x0119
00C5:00E7 2800            LDA       L0
00C5:00E9 8C5902          LDIXUBC.P 1
00C5:00EC 6881C0          CMPIC     224
00C5:00EF 32804E          JLT       0x0119
00C5:00F2 2800            LDA       L0
00C5:00F4 8C5902          LDIXUBC.P 1
00C5:00F7 6881DE          CMPIC     239
00C5:00FA 338038          JGT       0x0119
00C5:00FD 2800            LDA       L0
00C5:00FF 8C5904          LDIXUBC.P 2
00C5:0102 B610            SHLIC     8
00C5:0104 2800            LDA       L0
00C5:0106 8C5906          LDIXUBC.P 3
00C5:0109 04              ORI       
00C5:010A 2403            STI       L3
00C5:010C 2800            LDA       L0
00C5:010E E1C032          ADDISLC   L3, 2
00C5:0111 8CE135          LEARB.P   
00C5:0114 2900            STA       L0
00C5:0116 37820F          JMP       0x0011
00C5:0119 2800            LDA       L0
00C5:011B 8CE13D02        LEARBC.P  1
00C5:011F 2900            STA       L0
00C5:0121 378225          JMP       0x0011
00C5:0124 2A8094          LDC       Str:4C5="PDJPG_DecodeScanForComponentLayer: Exit, No\n"
00C5:0127 AB              PUSHA     
00C5:0128 7000            CALLG     G0(printf)
00C5:012A AB              PUSHA     
00C5:012B 78              RETA      
	Avg B/tk=1.075269
198: pdjpg_hashBuffer(Phi)i:
00C6:0000 2B03            MVA       L0, L3
00C6:0002 2803            LDA       L3
00C6:0004 2004            LDI       L4
00C6:0006 8CE135          LEARB.P   
00C6:0009 2901            STA       L1
00C6:000B E11C20          MVIC      L2, 0
00C6:000E 7B              LABEL     
00C6:000F 2800            LDA       L0
00C6:0011 2801            LDA       L1
00C6:0013 8C3C            CMPA.P    
00C6:0015 358032          JGE       0x0031
00C6:0018 E1C2E021FFE2    MULISLC   L2, 65521
00C6:001E 2800            LDA       L0
00C6:0020 A9              DUPA      
00C6:0021 8CE13D02        LEARBC.P  1
00C6:0025 2900            STA       L0
00C6:0027 8CE159          LDDRUB.P  
00C6:002A 00              ADDI      
00C6:002B 6C              INCI      
00C6:002C 2402            STI       L2
00C6:002E 378043          JMP       0x000F
00C6:0031 7A20            RET2      L2i
	Avg B/tk=0.980769
199: PDJPG_DecodeBasic(L123PhiPiPi)i:
00C7:0000 E19F088004      JNENULLL  L8, 0x0007
00C7:0005 6410            RETC      -1i
00C7:0007 2809            LDA       L9
00C7:0009 200A            LDI       L10
00C7:000B 2A14            LDC       Str:4F2="Alpha"
00C7:000D 7000            CALLG     G0(PDJPG_DecodeScanForComponentLayer)
00C7:000F 2902            STA       L2
00C7:0011 E19E02809E      JEQNULLL  L2, 0x0065
00C7:0016 2A34            LDC       Str:4F8="PDJPG_DecodeBasic: Found Alpha\n"
00C7:0018 AB              PUSHA     
00C7:0019 7002            CALLG     G2(printf)
00C7:001B 200A            LDI       L10
00C7:001D 2802            LDA       L2
00C7:001F 2809            LDA       L9
00C7:0021 E1B406          DIFFPTR   b:0
00C7:0024 01              SUBI      
00C7:0025 2405            STI       L5
00C7:0027 2808            LDA       L8
00C7:0029 2802            LDA       L2
00C7:002B 2005            LDI       L5
00C7:002D 280B            LDA       L11
00C7:002F 280C            LDA       L12
00C7:0031 7004            CALLG     G4(PDJPG_DecodeLDatCtx)
00C7:0033 A0              POPI      
00C7:0034 E16C8405        LDOSL     L8, G5(PDJPG_Context/xs)
00C7:0038 E16C8406        LDOSL     L8, G6(PDJPG_Context/ys)
00C7:003C 02              MULI      
00C7:003D 2404            STI       L4
00C7:003F E16C8407        LDOSL     L8, G7(PDJPG_Context/jpg_sabuf)
00C7:0043 E19D8012        JNENULL   0x0050
00C7:0047 2004            LDI       L4
00C7:0049 8906            NEWARR    b:0
00C7:004B E16D8407        STOSL     L8, G7(PDJPG_Context/jpg_sabuf)
00C7:004F 7B              LABEL     
00C7:0050 E16C8407        LDOSL     L8, G7(PDJPG_Context/jpg_sabuf)
00C7:0054 E1B0            CVTA2PTR  
00C7:0056 E16C8409        LDOSL     L8, G9(PDJPG_Context/jpg_sibuf)
00C7:005A E15C            LDDRA     
00C7:005C E1B0            CVTA2PTR  
00C7:005E 2004            LDI       L4
00C7:0060 7008            CALLG     G8(memcpy)
00C7:0062 37804C          JMP       0x008B
00C7:0065 2A80A4          LDC       Str:518="PDJPG_DecodeBasic: No Alpha\n"
00C7:0068 AB              PUSHA     
00C7:0069 7002            CALLG     G2(printf)
00C7:006B E16C8405        LDOSL     L8, G5(PDJPG_Context/xs)
00C7:006F E16C8406        LDOSL     L8, G6(PDJPG_Context/ys)
00C7:0073 02              MULI      
00C7:0074 2404            STI       L4
00C7:0076 E16C8407        LDOSL     L8, G7(PDJPG_Context/jpg_sabuf)
00C7:007A E19C801A        JEQNULL   0x008B
00C7:007E E16C8407        LDOSL     L8, G7(PDJPG_Context/jpg_sabuf)
00C7:0082 E1B0            CVTA2PTR  
00C7:0084 2A8FF6          LDC       255b
00C7:0087 2004            LDI       L4
00C7:0089 700B            CALLG     G11(memset)
00C7:008B 2809            LDA       L9
00C7:008D 200A            LDI       L10
00C7:008F 700C            CALLG     G12(pdjpg_hashBuffer)
00C7:0091 2406            STI       L6
00C7:0093 2A80D4          LDC       Str:535="PDJPG_DecodeBasic: Base\n"
00C7:0096 AB              PUSHA     
00C7:0097 7002            CALLG     G2(printf)
00C7:0099 2808            LDA       L8
00C7:009B 2809            LDA       L9
00C7:009D 200A            LDI       L10
00C7:009F 280B            LDA       L11
00C7:00A1 280C            LDA       L12
00C7:00A3 700E            CALLG     G14(PDJPG_DecodeCtxInner)
00C7:00A5 2403            STI       L3
00C7:00A7 2A80F4          LDC       Str:54E="PDJPG_DecodeBasic: Base OK\n"
00C7:00AA AB              PUSHA     
00C7:00AB 7002            CALLG     G2(printf)
00C7:00AD 2809            LDA       L9
00C7:00AF 200A            LDI       L10
00C7:00B1 700C            CALLG     G12(pdjpg_hashBuffer)
00C7:00B3 2407            STI       L7
00C7:00B5 2A8104          LDC       Str:56A="Hash %08X %08X\n"
00C7:00B8 8924            NEWARR    a:2
00C7:00BA 2006            LDI       L6
00C7:00BC E178            CVTUI2L   
00C7:00BE E111            CVTL2AA   
00C7:00C0 E1AC00          DSTIXAC   0
00C7:00C3 2007            LDI       L7
00C7:00C5 E178            CVTUI2L   
00C7:00C7 E111            CVTL2AA   
00C7:00C9 E1AC02          DSTIXAC   1
00C7:00CC 7002            CALLG     G2(printf)
00C7:00CE 7A30            RET2      L3i
	Avg B/tk=0.958525
200: PDJPG_EscapeDecodeBuffer(PhiPhi)i:
00C8:0000 2B04            MVA       L0, L4
00C8:0002 2804            LDA       L4
00C8:0004 2005            LDI       L5
00C8:0006 8CE135          LEARB.P   
00C8:0009 2902            STA       L2
00C8:000B 2B16            MVA       L1, L6
00C8:000D 2806            LDA       L6
00C8:000F 2007            LDI       L7
00C8:0011 8CE135          LEARB.P   
00C8:0014 2903            STA       L3
00C8:0016 7B              LABEL     
00C8:0017 2800            LDA       L0
00C8:0019 2802            LDA       L2
00C8:001B 8C3C            CMPA.P    
00C8:001D 3580A6          JGE       0x0073
00C8:0020 2801            LDA       L1
00C8:0022 2803            LDA       L3
00C8:0024 8C3C            CMPA.P    
00C8:0026 358094          JGE       0x0073
00C8:0029 2800            LDA       L0
00C8:002B 8CE159          LDDRUB.P  
00C8:002E 6881FE          CMPIC     255
00C8:0031 318048          JNE       0x0058
00C8:0034 2800            LDA       L0
00C8:0036 8C5902          LDIXUBC.P 1
00C8:0039 6800            CMPIC     0
00C8:003B 318034          JNE       0x0058
00C8:003E 2800            LDA       L0
00C8:0040 8CE13D04        LEARBC.P  2
00C8:0044 2900            STA       L0
00C8:0046 2A8FF6          LDC       255b
00C8:0049 2801            LDA       L1
00C8:004B A9              DUPA      
00C8:004C 8CE13D02        LEARBC.P  1
00C8:0050 2901            STA       L1
00C8:0052 8CE15E          STDRB.P   
00C8:0055 378081          JMP       0x0017
00C8:0058 2800            LDA       L0
00C8:005A A9              DUPA      
00C8:005B 8CE13D02        LEARBC.P  1
00C8:005F 2900            STA       L0
00C8:0061 8CE159          LDDRUB.P  
00C8:0064 2801            LDA       L1
00C8:0066 A9              DUPA      
00C8:0067 8CE13D02        LEARBC.P  1
00C8:006B 2901            STA       L1
00C8:006D 8CE15E          STDRB.P   
00C8:0070 3780B7          JMP       0x0017
00C8:0073 2801            LDA       L1
00C8:0075 2803            LDA       L3
00C8:0077 8C3C            CMPA.P    
00C8:0079 328004          JLT       0x007E
00C8:007C 6410            RETC      -1i
00C8:007E 2801            LDA       L1
00C8:0080 2806            LDA       L6
00C8:0082 E1B406          DIFFPTR   b:0
00C8:0085 74              RETI      
	Avg B/tk=1.229358
201: PDJPG_EscapeDecodeSingleBuffer(Phi)i:
00C9:0000 2B04            MVA       L0, L4
00C9:0002 2804            LDA       L4
00C9:0004 2005            LDI       L5
00C9:0006 8CE135          LEARB.P   
00C9:0009 2902            STA       L2
00C9:000B 2B14            MVA       L1, L4
00C9:000D 2804            LDA       L4
00C9:000F 2005            LDI       L5
00C9:0011 8CE135          LEARB.P   
00C9:0014 2903            STA       L3
00C9:0016 7B              LABEL     
00C9:0017 2800            LDA       L0
00C9:0019 2802            LDA       L2
00C9:001B 8C3C            CMPA.P    
00C9:001D 3580A6          JGE       0x0073
00C9:0020 2801            LDA       L1
00C9:0022 2803            LDA       L3
00C9:0024 8C3C            CMPA.P    
00C9:0026 358094          JGE       0x0073
00C9:0029 2800            LDA       L0
00C9:002B 8CE159          LDDRUB.P  
00C9:002E 6881FE          CMPIC     255
00C9:0031 318048          JNE       0x0058
00C9:0034 2800            LDA       L0
00C9:0036 8C5902          LDIXUBC.P 1
00C9:0039 6800            CMPIC     0
00C9:003B 318034          JNE       0x0058
00C9:003E 2800            LDA       L0
00C9:0040 8CE13D04        LEARBC.P  2
00C9:0044 2900            STA       L0
00C9:0046 2A8FF6          LDC       255b
00C9:0049 2801            LDA       L1
00C9:004B A9              DUPA      
00C9:004C 8CE13D02        LEARBC.P  1
00C9:0050 2901            STA       L1
00C9:0052 8CE15E          STDRB.P   
00C9:0055 378081          JMP       0x0017
00C9:0058 2800            LDA       L0
00C9:005A A9              DUPA      
00C9:005B 8CE13D02        LEARBC.P  1
00C9:005F 2900            STA       L0
00C9:0061 8CE159          LDDRUB.P  
00C9:0064 2801            LDA       L1
00C9:0066 A9              DUPA      
00C9:0067 8CE13D02        LEARBC.P  1
00C9:006B 2901            STA       L1
00C9:006D 8CE15E          STDRB.P   
00C9:0070 3780B7          JMP       0x0017
00C9:0073 2801            LDA       L1
00C9:0075 2803            LDA       L3
00C9:0077 8C3C            CMPA.P    
00C9:0079 328004          JLT       0x007E
00C9:007C 6410            RETC      -1i
00C9:007E 2801            LDA       L1
00C9:0080 2804            LDA       L4
00C9:0082 E1B406          DIFFPTR   b:0
00C9:0085 74              RETI      
	Avg B/tk=1.229358
202: PDJPG_DecodeLDatCtx(L123PhiPiPi)i:
00CA:0000 280A            LDA       L10
00CA:0002 8CE159          LDDRUB.P  
00CA:0005 6881FE          CMPIC     255
00CA:0008 31806E          JNE       0x0042
00CA:000B 280A            LDA       L10
00CA:000D 8C5902          LDIXUBC.P 1
00CA:0010 6881D8          CMPIC     236
00CA:0013 318058          JNE       0x0042
00CA:0016 280A            LDA       L10
00CA:0018 8C5908          LDIXUBC.P 4
00CA:001B 688098          CMPIC     76
00CA:001E 318042          JNE       0x0042
00CA:0021 280A            LDA       L10
00CA:0023 8C590A          LDIXUBC.P 5
00CA:0026 688088          CMPIC     68
00CA:0029 31802C          JNE       0x0042
00CA:002C 280A            LDA       L10
00CA:002E 8C590C          LDIXUBC.P 6
00CA:0031 688082          CMPIC     65
00CA:0034 318016          JNE       0x0042
00CA:0037 280A            LDA       L10
00CA:0039 8C590E          LDIXUBC.P 7
00CA:003C 6880A8          CMPIC     84
00CA:003F 308022          JEQ       0x0053
00CA:0042 2809            LDA       L9
00CA:0044 280A            LDA       L10
00CA:0046 200B            LDI       L11
00CA:0048 280C            LDA       L12
00CA:004A 280D            LDA       L13
00CA:004C 7001            CALLG     G1(PDJPG_DecodeCtxInner)
00CA:004E 2408            STI       L8
00CA:0050 7A8080          RET2      L8i
00CA:0053 2B3A            MVA       L3, L10
00CA:0055 E11C50          MVIC      L5, 0
00CA:0058 7B              LABEL     
00CA:0059 2803            LDA       L3
00CA:005B 8CE159          LDDRUB.P  
00CA:005E 6881FE          CMPIC     255
00CA:0061 3180AE          JNE       0x00BB
00CA:0064 2803            LDA       L3
00CA:0066 8C5902          LDIXUBC.P 1
00CA:0069 6881D8          CMPIC     236
00CA:006C 318098          JNE       0x00BB
00CA:006F 2803            LDA       L3
00CA:0071 8C5908          LDIXUBC.P 4
00CA:0074 688098          CMPIC     76
00CA:0077 318082          JNE       0x00BB
00CA:007A 2803            LDA       L3
00CA:007C 8C590A          LDIXUBC.P 5
00CA:007F 688088          CMPIC     68
00CA:0082 31806C          JNE       0x00BB
00CA:0085 2803            LDA       L3
00CA:0087 8C590C          LDIXUBC.P 6
00CA:008A 688082          CMPIC     65
00CA:008D 318056          JNE       0x00BB
00CA:0090 2803            LDA       L3
00CA:0092 8C590E          LDIXUBC.P 7
00CA:0095 6880A8          CMPIC     84
00CA:0098 318040          JNE       0x00BB
00CA:009B 2803            LDA       L3
00CA:009D 8C5904          LDIXUBC.P 2
00CA:00A0 B610            SHLIC     8
00CA:00A2 2803            LDA       L3
00CA:00A4 8C5906          LDIXUBC.P 3
00CA:00A7 04              ORI       
00CA:00A8 2406            STI       L6
00CA:00AA E1E88A56        ADDILLL   L5, L5, L6
00CA:00AE 2803            LDA       L3
00CA:00B0 E1C062          ADDISLC   L6, 2
00CA:00B3 8CE135          LEARB.P   
00CA:00B6 2903            STA       L3
00CA:00B8 3780C3          JMP       0x0059
00CA:00BB 2005            LDI       L5
00CA:00BD 8906            NEWARR    b:0
00CA:00BF 2900            STA       L0
00CA:00C1 2800            LDA       L0
00CA:00C3 E1B0            CVTA2PTR  
00CA:00C5 2901            STA       L1
00CA:00C7 2B3A            MVA       L3, L10
00CA:00C9 2B41            MVA       L4, L1
00CA:00CB 7B              LABEL     
00CA:00CC 2803            LDA       L3
00CA:00CE 8CE159          LDDRUB.P  
00CA:00D1 6881FE          CMPIC     255
00CA:00D4 3180D4          JNE       0x0141
00CA:00D7 2803            LDA       L3
00CA:00D9 8C5902          LDIXUBC.P 1
00CA:00DC 6881D8          CMPIC     236
00CA:00DF 3180BE          JNE       0x0141
00CA:00E2 2803            LDA       L3
00CA:00E4 8C5908          LDIXUBC.P 4
00CA:00E7 688098          CMPIC     76
00CA:00EA 3180A8          JNE       0x0141
00CA:00ED 2803            LDA       L3
00CA:00EF 8C590A          LDIXUBC.P 5
00CA:00F2 688088          CMPIC     68
00CA:00F5 318092          JNE       0x0141
00CA:00F8 2803            LDA       L3
00CA:00FA 8C590C          LDIXUBC.P 6
00CA:00FD 688082          CMPIC     65
00CA:0100 31807C          JNE       0x0141
00CA:0103 2803            LDA       L3
00CA:0105 8C590E          LDIXUBC.P 7
00CA:0108 6880A8          CMPIC     84
00CA:010B 318066          JNE       0x0141
00CA:010E 2803            LDA       L3
00CA:0110 8C5904          LDIXUBC.P 2
00CA:0113 B610            SHLIC     8
00CA:0115 2803            LDA       L3
00CA:0117 8C5906          LDIXUBC.P 3
00CA:011A 04              ORI       
00CA:011B 2406            STI       L6
00CA:011D 2804            LDA       L4
00CA:011F 2803            LDA       L3
00CA:0121 8CE13D10        LEARBC.P  8
00CA:0125 E1C166          SUBISLC   L6, 6
00CA:0128 7002            CALLG     G2(memcpy)
00CA:012A 2803            LDA       L3
00CA:012C E1C062          ADDISLC   L6, 2
00CA:012F 8CE135          LEARB.P   
00CA:0132 2903            STA       L3
00CA:0134 2804            LDA       L4
00CA:0136 E1C166          SUBISLC   L6, 6
00CA:0139 8CE135          LEARB.P   
00CA:013C 2904            STA       L4
00CA:013E 3780E9          JMP       0x00CC
00CA:0141 2804            LDA       L4
00CA:0143 2801            LDA       L1
00CA:0145 E1B406          DIFFPTR   b:0
00CA:0148 2406            STI       L6
00CA:014A 2801            LDA       L1
00CA:014C 2006            LDI       L6
00CA:014E 7003            CALLG     G3(PDJPG_EscapeDecodeSingleBuffer)
00CA:0150 2406            STI       L6
00CA:0152 2809            LDA       L9
00CA:0154 2801            LDA       L1
00CA:0156 2006            LDI       L6
00CA:0158 280C            LDA       L12
00CA:015A 280D            LDA       L13
00CA:015C 7001            CALLG     G1(PDJPG_DecodeCtxInner)
00CA:015E 2408            STI       L8
00CA:0160 2800            LDA       L0
00CA:0162 8A              DELOBJ    
00CA:0163 7A8080          RET2      L8i
	Avg B/tk=0.994444
203: PDJPG_FlattenTGA(PhPhii)i:
00CB:0000 2B05            MVA       L0, L5
00CB:0002 AC              PUSHI     
00CB:0003 2800            LDA       L0
00CB:0005 8CE15E          STDRB.P   
00CB:0008 AC              PUSHI     
00CB:0009 2800            LDA       L0
00CB:000B 8C5E02          STIXBC.P  1
00CB:000E 2A26            LDC       2b
00CB:0010 2800            LDA       L0
00CB:0012 8C5E04          STIXBC.P  2
00CB:0015 AC              PUSHI     
00CB:0016 2800            LDA       L0
00CB:0018 8C5E06          STIXBC.P  3
00CB:001B AC              PUSHI     
00CB:001C 2800            LDA       L0
00CB:001E 8C5E08          STIXBC.P  4
00CB:0021 AC              PUSHI     
00CB:0022 2800            LDA       L0
00CB:0024 8C5E0A          STIXBC.P  5
00CB:0027 AC              PUSHI     
00CB:0028 2800            LDA       L0
00CB:002A 8C5E0C          STIXBC.P  6
00CB:002D AC              PUSHI     
00CB:002E 2800            LDA       L0
00CB:0030 8C5E0E          STIXBC.P  7
00CB:0033 AC              PUSHI     
00CB:0034 2800            LDA       L0
00CB:0036 8C5E10          STIXBC.P  8
00CB:0039 AC              PUSHI     
00CB:003A 2800            LDA       L0
00CB:003C 8C5E12          STIXBC.P  9
00CB:003F AC              PUSHI     
00CB:0040 2800            LDA       L0
00CB:0042 8C5E14          STIXBC.P  10
00CB:0045 AC              PUSHI     
00CB:0046 2800            LDA       L0
00CB:0048 8C5E16          STIXBC.P  11
00CB:004B 2007            LDI       L7
00CB:004D 9D              CVTUB2I   
00CB:004E 2800            LDA       L0
00CB:0050 8C5E18          STIXBC.P  12
00CB:0053 E1C78E10        SARISLC   L7, 8
00CB:0057 9D              CVTUB2I   
00CB:0058 2800            LDA       L0
00CB:005A 8C5E1A          STIXBC.P  13
00CB:005D 2008            LDI       L8
00CB:005F 9D              CVTUB2I   
00CB:0060 2800            LDA       L0
00CB:0062 8C5E1C          STIXBC.P  14
00CB:0065 E1C79010        SARISLC   L8, 8
00CB:0069 9D              CVTUB2I   
00CB:006A 2800            LDA       L0
00CB:006C 8C5E1E          STIXBC.P  15
00CB:006F 2A8186          LDC       24b
00CB:0072 2800            LDA       L0
00CB:0074 8C5E20          STIXBC.P  16
00CB:0077 AC              PUSHI     
00CB:0078 2800            LDA       L0
00CB:007A 8C5E22          STIXBC.P  17
00CB:007D 2A14            LDC       Str:57A="PDJPG_FlattenTGA: %d x %d\n"
00CB:007F 8924            NEWARR    a:2
00CB:0081 2007            LDI       L7
00CB:0083 E110            CVTI2AA   
00CB:0085 E1AC00          DSTIXAC   0
00CB:0088 2008            LDI       L8
00CB:008A E110            CVTI2AA   
00CB:008C E1AC02          DSTIXAC   1
00CB:008F 7000            CALLG     G0(printf)
00CB:0091 E1EA8878        MULILLL   L4, L7, L8
00CB:0095 E11C10          MVIC      L1, 0
00CB:0098 7B              LABEL     
00CB:0099 6B14            CMPILL    L1, L4
00CB:009B 358076          JGE       0x00D9
00CB:009E E1E22108        MULILLC   L2, L1, 4
00CB:00A2 E1C216          MULISLC   L1, 3
00CB:00A5 B012            ADDIC     18
00CB:00A7 2403            STI       L3
00CB:00A9 2806            LDA       L6
00CB:00AB E1C022          ADDISLC   L2, 2
00CB:00AE 8C49            LDIXUB.P  
00CB:00B0 2805            LDA       L5
00CB:00B2 E1C030          ADDISLC   L3, 0
00CB:00B5 8C4E            STIXB.P   
00CB:00B7 2806            LDA       L6
00CB:00B9 E1C021          ADDISLC   L2, 1
00CB:00BC 8C49            LDIXUB.P  
00CB:00BE 2805            LDA       L5
00CB:00C0 E1C031          ADDISLC   L3, 1
00CB:00C3 8C4E            STIXB.P   
00CB:00C5 2806            LDA       L6
00CB:00C7 E1C020          ADDISLC   L2, 0
00CB:00CA 8C49            LDIXUB.P  
00CB:00CC 2805            LDA       L5
00CB:00CE E1C032          ADDISLC   L3, 2
00CB:00D1 8C4E            STIXB.P   
00CB:00D3 7B              LABEL     
00CB:00D4 6E01            INCIL     L1
00CB:00D6 37807F          JMP       0x0099
00CB:00D9 E1C246          MULISLC   L4, 3
00CB:00DC B012            ADDIC     18
00CB:00DE 74              RETI      
	Avg B/tk=0.913934
204: PDJPG_StoreTGA(CsQhii)i:
00CC:0000 E1CA56          MULISLL   L5, L6
00CC:0003 B604            SHLIC     2
00CC:0005 B040            ADDIC     64
00CC:0007 8906            NEWARR    b:0
00CC:0009 2901            STA       L1
00CC:000B 2801            LDA       L1
00CC:000D E1B0            CVTA2PTR  
00CC:000F 2804            LDA       L4
00CC:0011 E1B0            CVTA2PTR  
00CC:0013 2005            LDI       L5
00CC:0015 2006            LDI       L6
00CC:0017 7000            CALLG     G0(PDJPG_FlattenTGA)
00CC:0019 2402            STI       L2
00CC:001B 2803            LDA       L3
00CC:001D 2A24            LDC       Str:595="wb"
00CC:001F 7001            CALLG     G1(fopen)
00CC:0021 2900            STA       L0
00CC:0023 2801            LDA       L1
00CC:0025 E1B0            CVTA2PTR  
00CC:0027 2A15            LDC       1u
00CC:0029 2002            LDI       L2
00CC:002B 2800            LDA       L0
00CC:002D 7003            CALLG     G3(fwrite)
00CC:002F A0              POPI      
00CC:0030 2800            LDA       L0
00CC:0032 7004            CALLG     G4(fclose)
00CC:0034 A0              POPI      
00CC:0035 6400            RETC      0i
	Avg B/tk=0.774648
205: $GS$3AF758F2_0001()i:
00CD:0000 8400            LDLX      L0i
00CD:0002 8410            LDLX      L1i
00CD:0004 00              ADDI      
00CD:0005 74              RETI      
	Avg B/tk=1.199998
206: $GS$3AF758F2_0002()i:
00CE:0000 8600            LDDRLX    L0i
00CE:0002 8610            LDDRLX    L1i
00CE:0004 00              ADDI      
00CE:0005 74              RETI      
	Avg B/tk=1.199998
207: (null) ?
208: (null) ?
209: (null) ?
210: PDJPG_Init/init:00000000(i)
[bits 64]
basm_cpuinfo:
push rbx
xor eax, eax; cpuid
mov r8, basm_cpuid_str
mov [r8+0], ebx
mov [r8+4], edx
mov [r8+8], ecx
xor eax, eax; inc eax; cpuid
mov r8, basm_cpuid_std
mov [r8+0], eax
mov [r8+4], ebx
mov [r8+8], ecx
mov [r8+12], edx
pop rbx; ret
basm_getbp: mov rax, rbp; ret

/* main 000000 */
FIAekrGmcapsQViCvV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA10D6D0
mov rax, 0x00007FFDB68E28DD
call rax /* OP:0140-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10D710
mov rax, 0x00007FFDB68E178A
call rax /* OP:0408-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10D750
mov rax, 0x00007FFDB68E178A
call rax /* OP:0408-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10D790
mov rax, 0x00007FFDB68E178A
call rax /* OP:0408-0000 */
mov rax, 0x008D0228BAEE909C
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10D810
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10D850
mov rax, 0x00007FFDB68E720C
call rax /* OP:010F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10D890
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10D910
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 00001C */
AtBIFbOCaFHjCUvuRF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+128], 0x00000008
mov rcx, rdi
mov rdx, 0x00000228BA10DBA0
mov rax, 0x00007FFDB68E7257
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10DBE0
mov rax, 0x00007FFDB68E19B0
call rax /* OP:0093-0000 */
mov eax, [rsi+184]
mov [rsi+72], eax
mov eax, [rsi+72]
mov [rsi+184], eax
mov rcx, rdi
mov rdx, 0x00000228BA10DCA0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10DCE0
mov rax, 0x00007FFDB68E749B
call rax /* OP:0174-0000 */
mov eax, [rsi+184]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA10DD60
mov rax, 0x00007FFDB68E1EFB
call rax /* OP:01CE-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10DDA0
mov rax, 0x00007FFDB68E10EB
call rax /* OP:00BC-0000 */
mov eax, [rsi+184]
mov [rsi+88], eax
mov eax, [rsi+88]
mov [rsi+184], eax
mov rcx, rdi
mov rdx, 0x00000228BA10DE60
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10DEA0
mov rax, 0x00007FFDB68E749B
call rax /* OP:0174-0000 */
mov eax, [rsi+184]
and eax, 15
mov [rsi+184], eax
mov eax, [rsi+184]
mov [rsi+136], eax
mov rax, 0x008D0228BAEE90A8
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10DFA0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+72]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10E020
mov rax, 0x00007FFDB68E74D2
call rax /* OP:0178-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E060
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E0A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+80]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10E120
mov rax, 0x00007FFDB68E74D2
call rax /* OP:0178-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E160
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E1A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+88]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10E220
mov rax, 0x00007FFDB68E74D2
call rax /* OP:0178-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E260
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E2A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+136]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10E320
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10E360
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10E3E0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 00006E */
QoRKGrQDVElRNSbKwx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0xFFFFFFFF
mov eax, [rsi+136]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+136]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+184], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10E660
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* main 000078 */
FsSOIMFvWETbKFHNNp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE90C3
mov [rsi+184], rax
xor rax, rax
mov [rsi+192], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10E7C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 00007D */
IQFRbkDHcjhjLnqlVX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10EAE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* main 000080 */
ACVVICOTqIRqOJghaW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE90CE
mov [rsi+184], rax
xor rax, rax
mov [rsi+192], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10E9B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000085 */
GhaOEbENHTWMAIjmnR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10EA90
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 000087 */
BrLdlkBeBBSfORRTeJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+144], eax
mov rax, 0x008D0228BAEE90D9
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10EBB0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10EBF0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10EC70
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000092 */
BLItipPratRLHPVlOh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA10EC30
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10ED50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10EDD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000099 */
COAWwUPKhtFwBlqVeh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10EEB0
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 00009B */
OFEekuOvVPsUKfOjgT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+152], eax
mov rax, 0x008D0228BAEE90EC
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10EFD0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+152]
sub eax, [rsi+144]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10F050
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10F090
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F110
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0000AD */
BLiQuVASOKIrCsSmwg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F1F0
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000AF */
BQrqdGQLcdPxCaRixd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+144], eax
mov rax, 0x008D0228BAEE90FE
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10F310
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10F350
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F3D0
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000BB */
DuEpEUQPoEcVJjtsCN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA10F390
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10F4B0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F530
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0000C2 */
CaEpQlDJufdtNcoOiV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F610
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000C4 */
OmWfjqPsRDdrOiHKWR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+152], eax
mov rax, 0x008D0228BAEE9111
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10F730
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+152]
sub eax, [rsi+144]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10F7B0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10F7F0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F870
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0000D6 */
QnITTDGDGbMGLCumJI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10F950
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000D8 */
FnNsXCExVIwjDvpoqP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+144], eax
mov rcx, rdi
mov rdx, 0x00000228BA10FA30
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10FAB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0000E0 */
IwQPAWEaDhHWJBxtAW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10FB90
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000E2 */
BwQogrAMaCPFBsvsoM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+152], eax
mov rax, 0x008D0228BAEE9123
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA10FCB0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+152]
sub eax, [rsi+144]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA10FD30
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA10FD70
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10FDF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0000F4 */
AXJIhDFqGBQaBoAfqr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA10FED0
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000F6 */
GCBUFXKaqcGALcrLUK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+144], eax
mov rcx, rdi
mov rdx, 0x00000228BA10FFB0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110030
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 0000FE */
EPmFeaJeVgtXPaWRBi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110110
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* main 000100 */
KvFGfFBdUiLaPWEHxg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+152], eax
mov rax, 0x008D0228BAEE913D
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA110230
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+152]
sub eax, [rsi+144]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA1102B0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1102F0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110370
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000112 */
NmVcGWBbITHREmGnSs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA110330
mov rax, 0x00007FFDB68E1861
call rax /* OP:0088-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110450
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110490
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110510
mov rax, 0x00007FFDB68E446C
add rsp, 504
jmp rax

/* main 000119 */
HAIbuXOWbVxlFXTpOB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+184]
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA1105F0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110630
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110670
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1106B0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1106F0
mov rax, 0x00007FFDB68E7220
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110730
mov rax, 0x00007FFDB68E1951
call rax /* OP:016D-0000 */
mov rax, 0x008D0228BAEE9157
mov [rsi+184], rax
xor rax, rax
mov [rsi+192], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110830
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000134 */
FaPhttDQqVunMERhTr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9165
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA110970
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1109B0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1109F0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110A30
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110AB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000144 */
AgCpPtPaSGlwEpPbMP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9165
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA110B90
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110BD0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110C10
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110C50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110CD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000154 */
GFvvmLEufFQCNagDtO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE909C
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA110DB0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110DF0
mov rax, 0x00007FFDB68E1884
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110E30
mov rax, 0x00007FFDB68E5308
call rax /* OP:0113-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA110E70
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA110EF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000163 */
CqihGfGSiVLiESFxWh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9171
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA110FD0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+16]
mov [rsi+200], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA111090
mov rax, 0x00007FFDB68E446C
add rsp, 504
jmp rax

/* main 00016C */
KUgFpwDAQjLfISnvJd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA111050
mov rax, 0x00007FFDB68E5308
call rax /* OP:0113-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111170
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1111F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000173 */
PumHwSBqWKMRDwCNmP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+16]
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA1112D0
mov rax, 0x00007FFDB68E29A0
call rax /* OP:008A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111310
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111350
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111390
mov rax, 0x00007FFDB68E1280
call rax /* OP:0431-0000 */
mov rax, [rsi+184]
mov [rsi+24], rax
mov rcx, rdi
mov rdx, 0x00000228BA111410
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111450
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111490
mov rax, 0x00007FFDB68E1280
call rax /* OP:0431-0000 */
mov rax, [rsi+184]
mov [rsi+32], rax
mov rax, [rsi+24]
mov [rsi+184], rax
mov rax, [rsi+32]
mov [rsi+192], rax
mov rcx, rdi
mov rdx, 0x00000228BA111590
mov rax, 0x00007FFDB68E5CA4
call rax /* OP:040E-0000 */
mov rax, [rsi+184]
mov [rsi+40], rax
mov rcx, rdi
mov rdx, 0x00000228BA111610
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
xor rax, rax
mov [rsi+192], rax
xor rax, rax
mov [rsi+200], rax
xor rax, rax
mov [rsi+208], rax
mov rcx, rdi
mov rdx, 0x00000228BA111710
mov rax, 0x00007FFDB68E11EF
call rax /* OP:0402-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111750
mov rax, 0x00007FFDB68E1046
call rax /* OP:0407-0000 */
xor rax, rax
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA1117D0
mov rax, 0x00007FFDB68E7239
call rax /* OP:002A-0000 */
xor rax, rax
mov [rsi+200], rax
xor rax, rax
mov [rsi+208], rax
mov rcx, rdi
mov rdx, 0x00000228BA111890
mov rax, 0x00007FFDB68E11EF
call rax /* OP:0402-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1118D0
mov rax, 0x00007FFDB68E1046
call rax /* OP:0407-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111910
mov rax, 0x00007FFDB68E1023
call rax /* OP:0406-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111950
mov rax, 0x00007FFDB68E1023
call rax /* OP:0406-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111990
mov rax, 0x00007FFDB68E1717
call rax /* OP:040E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1119D0
mov rax, 0x00007FFDB68E1046
call rax /* OP:0407-0000 */
mov rax, 0x008D0228BAEE9189
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA111A50
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111A90
mov rax, 0x00007FFDB68E1023
call rax /* OP:0406-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111AD0
mov rax, 0x00007FFDB68E49C6
call rax /* OP:044C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111B10
mov rax, 0x00007FFDB68E528B
call rax /* OP:0112-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111B50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111B90
mov rax, 0x00007FFDB68E1023
call rax /* OP:0406-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111BD0
mov rax, 0x00007FFDB68E49AD
call rax /* OP:044D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111C10
mov rax, 0x00007FFDB68E528B
call rax /* OP:0112-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111C50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111C90
mov rax, 0x00007FFDB68E1023
call rax /* OP:0406-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111CD0
mov rax, 0x00007FFDB68E49EE
call rax /* OP:044E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111D10
mov rax, 0x00007FFDB68E528B
call rax /* OP:0112-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA111D50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA111DD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0001D6 */
AbXOSRGgbGraHbBMQp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+128]
mov [rsi+184], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA112060
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* main 0001DB */
MqNRcOKDRBluGBjhuQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+184], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA112180
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* main 0001E0 */
BIHjJTDGMqpPEHQbQK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE90C3
mov [rsi+184], rax
xor rax, rax
mov [rsi+192], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1122E0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0001E5 */
JwocNODbUWIALRCWMW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1122A0
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rax, [rsi+184]
mov [rsi+96], rax
mov rax, [rsi+96]
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA112440
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rax, [rsi+184]
mov [rsi+104], rax
mov rcx, rdi
mov rdx, 0x00000228BA1124C0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+104]
mov [rsi+192], rax
mov rcx, rdi
mov rdx, 0x00000228BA112540
mov rax, 0x00007FFDB68E52A9
call rax /* OP:0154-0000 */
mov rax, 0x008D0228BAEE91A0
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA1125C0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112600
mov rax, 0x00007FFDB68E5439
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112640
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112680
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA112700
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000209 */
KwIHwFLDtwFAFKbDxR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+96]
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA112860
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+184]
mov [rsi+112], rax
mov rax, [rsi+112]
mov [rsi+184], rax
mov rax, [rsi+184]
lea rdx, [rax+128]
mov [rsi+184], rdx
mov rax, [rsi+184]
mov [rsi+120], rax
mov rax, 0x008D0228BAEE91B0
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA1129E0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112A20
mov rax, 0x00007FFDB68E25FE
call rax /* OP:01B2-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112A60
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA112AE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000225 */
AnIrfkEcJCdAPpJtbT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+120]
mov [rsi+184], rax
mov rax, [rsi+112]
mov [rsi+192], rax
mov rcx, rdi
mov rdx, 0x00000228BA112C60
mov rax, 0x00007FFDB68E376F
call rax /* OP:01B4-0000 */
mov eax, [rsi+184]
mov [rsi+128], eax
mov rax, 0x008D0228BAEE91C0
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA112D20
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+128]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA112DA0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA112DE0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA112E60
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 00023C */
EQBvcBPSpXqGBaGBIC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+128], 0x00000003
mov dword [rsi+136], 0x00000004
mov rax, 0x008D0228BAEE91D1
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA113020
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+128]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA1130A0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1130E0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+136]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113160
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1131A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA113220
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000259 */
PvoIDtQXxfFgIAercu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1131E0
mov rax, 0x00007FFDB68E7473
call rax /* OP:0080-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113360
mov rax, 0x00007FFDB68E7473
call rax /* OP:0080-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1133E0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000261 */
FxElhlLjhWrHCIxXRR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE91E9
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA113500
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+128]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113580
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1135C0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+136]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113640
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113680
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA113700
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000277 */
FTPFdQQCXSFlElrVDL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+128]
mov [rsi+184], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA113880
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 00027B */
JfdPLiAakllQJlDHfn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+184]
mov [rsi+136], eax
mov rax, 0x008D0228BAEE9201
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA1139A0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+128]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113A20
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113A60
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+136]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113AE0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113B20
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA113BA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 000292 */
GQmeFCGulXDCFvcCKF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+128]
add eax, 2
mov [rsi+128], eax
mov eax, [rsi+128]
imul eax, [rsi+136]
mov [rsi+136], eax
mov rax, 0x008D0228BAEE9218
mov [rsi+184], rax
mov rcx, rdi
mov rdx, 0x00000228BA113D60
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+128]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113DE0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113E20
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+136]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA113EA0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA113EE0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA113F60
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002B1 */
JnAUStEEQSweNXBqIh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1140A0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002B3 */
MTdNGxKppcDVLrAFxK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA114180
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002B5 */
GmXnHQJIFFuMLvJkSE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA114260
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002B7 */
ExvkXPAHxWUtHhtsnG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA114340
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002B9 */
HNmOFsIArfsTPATbwI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA114420
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* main 0002BB */
OOPVfvMxeUdmIhptMD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1146E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* main 0002BD */
OrkMHsOEXfwKHIKIwB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA113F20
mov rax, 0x00007FFDB68E29CD
call rax /* OP:0142-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA114590
mov rax, 0x00007FFDB68E17A3
call rax /* OP:0409-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1145D0
mov rax, 0x00007FFDB68E17A3
call rax /* OP:0409-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA114610
mov rax, 0x00007FFDB68E17A3
call rax /* OP:0409-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA114690
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* (null) 000000 */
DMRaGVIaUttWAxmDBu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+16], rax
mov rax, [rsi+8]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115250
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* (null) 000006 */
HOAMstFAitrfIUrelM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA115210
mov rax, 0x00007FFDB68E6A73
call rax /* OP:0161-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115370
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* fib 000000 */
EMuHiBLfhoRbQERcIH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
mov ecx, 2
sub eax, ecx
sub ecx, [rsi+0]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115530
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* fib 000004 */
CnVDctJcmgMgPKkMVu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115610
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* fib 000006 */
ODawpwBENEKFGklLPA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
sub eax, 1
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115730
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* fib 00000B */
JHeXxRPJdqUoBOQVaH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
sub eax, 2
mov [rsi+16], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115850
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* fib 000010 */
DiqCDAKbmGfnMBXVJS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
add eax, [rsi+16]
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA115970
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* sorttst 000000 */
FwMIFUNoqaCINVEaGT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA1166B0
mov rax, 0x00007FFDB68E21D0
call rax /* OP:0089-0000 */
mov rax, [rsi+24]
mov [rsi+0], rax
mov dword [rsi+8], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116890
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* sorttst 00000A */
FVuCaSIKdtHmHgvsht:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+8]
mov rax, 0x00000228BA116970
cmp ecx, [rsi+16]
mov r10, 0x00000228BA116C70
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* sorttst 00000F */
NCTVJQDRlGahCRUivL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116920
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* sorttst 000011 */
MvCKsWIQScmeHVKWmi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA116800
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116AD0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* sorttst 000016 */
GCBQsLQeEIxaBNFvNF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+8]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116890
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* sorttst 00001B */
AeFdqiIGPBVEEguaht:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+24], rax
mov eax, [rsi+16]
mov [rsi+32], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116C20
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* sorttst 000021 */
AFUGwIQqnLPIEFgomF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA116D40
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* selsort 000000 */
MgrlhDNjFCjUKllGpa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+32]
mov [rsi+48], rax
mov rcx, rdi
mov rdx, 0x00000228BA116EA0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+48]
mov [rsi+0], rax
mov dword [rsi+8], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117080
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* selsort 00000A */
DliHxUEBfpTpIDmTrd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+8]
mov rax, 0x00000228BA117110
cmp ecx, [rsi+40]
mov r10, 0x00000228BA117BA0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* selsort 00000F */
PkkMurBWQafqHxLPCv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
add eax, 1
mov [rsi+16], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117230
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* selsort 000014 */
JdwnNnGpVLinKIebFO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+16]
mov rax, 0x00000228BA117490
cmp ecx, [rsi+40]
mov r10, 0x00000228BA117A80
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* selsort 000019 */
KBQxQkIePFxmFTSBxw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+48], rax
mov eax, [rsi+16]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+rcx*4]
mov [rsi+48], edx
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+8]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+rcx*4]
mov [rsi+56], edx
mov ecx, [rsi+48]
mov rax, 0x00000228BA117860
cmp ecx, [rsi+56]
mov r10, 0x00000228BA1179B0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* selsort 000029 */
McmmhpIESEXjLeIkdp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+48], rax
mov eax, [rsi+8]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+rcx*4]
mov [rsi+48], edx
mov eax, [rsi+48]
mov [rsi+24], eax
mov rax, [rsi+0]
mov [rsi+48], rax
mov eax, [rsi+16]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+rcx*4]
mov [rsi+48], edx
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+8]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+48]
mov [rax+rcx*4], edx
mov eax, [rsi+24]
mov [rsi+48], eax
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+16]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+48]
mov [rax+rcx*4], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1179B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* selsort 000046 */
IdVxbUOiDlhwKVOAbc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117230
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* selsort 00004B */
DwpvqDLMoWIgKIATiI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+8]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117080
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* selsort 000050 */
PchbLSMLJUVlNmQtmu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117B50
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* $CTOR$ 000000 */
JTNMJDCQdTbkAhkfRg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9230
mov [rsi+8], rax
mov rcx, rdi
mov rdx, 0x00000228BA117D20
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA117D60
mov rax, 0x00007FFDB68E720C
call rax /* OP:010F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA117DA0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117E20
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* $CTOR$ 00000C */
LOBOhwOISrolEkGALN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA117F00
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* method0 000000 */
KVNAsIKiGPUGQDcEKw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA117DE0
mov rax, 0x00007FFDB68E4D59
call rax /* OP:0120-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1180F0
mov rax, 0x00007FFDB68E4D59
call rax /* OP:0120-0000 */
mov eax, [rsi+0]
add eax, [rsi+8]
mov [rsi+0], eax
mov rcx, rdi
mov rdx, 0x00000228BA118170
mov rax, 0x00007FFDB68E19CE
call rax /* OP:0092-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1181B0
mov rax, 0x00007FFDB68E4D31
call rax /* OP:0120-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1181F0
mov rax, 0x00007FFDB68E15D7
call rax /* OP:0014-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118270
mov rax, 0x00007FFDB68E6EA1
add rsp, 504
jmp rax

/* tst_ref 000000 */
FiGkeGFHTGaHIinjvf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA118230
mov rax, 0x00007FFDB68E25FE
call rax /* OP:014D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA118580
mov rax, 0x00007FFDB68E25FE
call rax /* OP:014D-0000 */
mov eax, [rsi+16]
add eax, [rsi+24]
mov [rsi+16], eax
mov rcx, rdi
mov rdx, 0x00000228BA118600
mov rax, 0x00007FFDB68E1FA5
call rax /* OP:014F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA118640
mov rax, 0x00007FFDB68E25FE
call rax /* OP:014D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1186C0
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* tst_switch 000000 */
GchpLJHJiwRECAIFOf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov [rsi+16], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118840
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000007 */
BjStteMkwqLSMRCrfi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118920
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 00000C */
OFFGUGDnMImWKbomCI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118A00
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000011 */
KJKvEOLuBANbFxeCWM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119780
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000014 */
JsesWGECJdvtOqBGbR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118B70
mov rax, 0x00007FFDB68E28A6
add rsp, 504
jmp rax

/* tst_switch 000019 */
LDCkLuMBrTDSDMTUVE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1199A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 00001C */
OgpxNeBvEdoLOWMBOK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118CE0
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000021 */
LAkKigAnhTbxHaAuTF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119AB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000024 */
MdeKNiDOXkfXKftVgv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118E50
mov rax, 0x00007FFDB68E28A6
add rsp, 504
jmp rax

/* tst_switch 000029 */
EQrGpKAOgbXQQgAjbK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119CD0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 00002C */
FIQtEcJnrBsMIcAaef:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA118FC0
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000031 */
DMvdtXNPfrjjEPVijN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1190A0
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000036 */
KSurlIATcVLdDqrBHE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119DE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000039 */
PbsIPpMmeGlHLcbcGl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119210
mov rax, 0x00007FFDB68E28A6
add rsp, 504
jmp rax

/* tst_switch 00003E */
ElRdanEwuarxELaugP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A000
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000041 */
BdHvkIHkdwAtJRNPIX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA119380
mov rax, 0x00007FFDB68E27A7
add rsp, 504
jmp rax

/* tst_switch 000046 */
PkDOomEEKqtmHcplWU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A110
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000049 */
FSNiHqFAeGEjHICjhF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1194F0
mov rax, 0x00007FFDB68E28A6
add rsp, 504
jmp rax

/* tst_switch 00004E */
MnJAiPAijmplADOadP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1195D0
mov rax, 0x00007FFDB68E28A6
add rsp, 504
jmp rax

/* tst_switch 000053 */
LmDrUhMmIwHSFvnqKk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A440
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000056 */
BjRIKHKuoAdSCCQCtw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000001
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 00005F */
JLqFkHCDtANtLNFEPW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000004
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000068 */
FCccXhBHGrjsPkkbvn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000009
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000072 */
FjGScxCSBJwLAhaKCK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000010
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 00007C */
IbXJIUBddHuDEebnJt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000019
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000086 */
IfUJLFIFkalSMWBdMV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000024
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 000090 */
NeKFklHCoPWDOMNBKX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000031
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 00009A */
MMVXcLQlBfmGDxPtOs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000040
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000A4 */
GBuabLILvpdpNGpJte:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000051
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000AE */
KVxtAXDJBbuWAkjpRW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000064
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000B8 */
AQdEmQHRnWrrBCLSfJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000079
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000C2 */
PAsXlaFWXUtbMsfGMS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0x00000090
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000CC */
JlKGHGENICXSHUVKpE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+0], 0xFFFFFFFF
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_switch 0000D3 */
FHBSBPCLufPKGplawq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11A510
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* tst_func 000000 */
QExKmXHvumwoCbuAEv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+8], 0x00000002
mov dword [rsi+16], 0x00000003
mov rcx, rdi
mov rdx, 0x00000228BA11A7D0
mov rax, 0x00007FFDB68E1A73
call rax /* OP:01BC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11A970
mov rax, 0x00007FFDB68E48D1
call rax /* OP:01BE-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11A9B0
mov rax, 0x00007FFDB68E48D1
call rax /* OP:01BE-0000 */
mov rax, [rsi+32]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11AA70
mov rax, 0x00007FFDB68E4421
add rsp, 504
jmp rax

/* tst_func 000015 */
LKSNRTBbSATrNlrBpp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+24], eax
mov rax, 0x008D0228BAEE9246
mov [rsi+32], rax
mov rcx, rdi
mov rdx, 0x00000228BA11AB90
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+8]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA11AC10
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11AC50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+16]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA11ACD0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11AD10
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+24]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA11AD90
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11ADD0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11AE50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_func 000032 */
LUShKqBsfdomQlVxfb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11AFA0
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* (null) 000000 */
DIHMwtAaSAJBAnGfBE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA11AE10
mov rax, 0x00007FFDB68E141A
call rax /* OP:0084-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11B100
mov rax, 0x00007FFDB68E141A
call rax /* OP:0084-0000 */
mov eax, [rsi+0]
add eax, [rsi+8]
mov [rsi+0], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11B1C0
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* tst_func2 000000 */
IWeQPlBcEUQHFdLeaW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA11B180
mov rax, 0x00007FFDB68E68CA
call rax /* OP:01BA-0000 */
mov rax, [rsi+32]
mov [rsi+40], rax
mov rcx, rdi
mov rdx, 0x00000228BA11B4A0
mov rax, 0x00007FFDB68E661D
call rax /* OP:01BF-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11B4E0
mov rax, 0x00007FFDB68E661D
call rax /* OP:01BF-0000 */
mov dword [rsi+8], 0x00000003
mov dword [rsi+16], 0x00000004
mov rax, [rsi+32]
mov [rsi+40], rax
mov rax, [rsi+40]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11B6A0
mov rax, 0x00007FFDB68E4421
add rsp, 504
jmp rax

/* tst_func2 00001A */
NWgvpvItMEBGCcDIkX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+40]
mov [rsi+24], eax
mov rax, 0x008D0228BAEE9262
mov [rsi+40], rax
mov rcx, rdi
mov rdx, 0x00000228BA11B820
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+8]
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA11B8A0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11B8E0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+16]
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA11B960
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11B9A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+24]
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA11BA20
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11BA60
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11BAE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_func2 000037 */
BbBkubIdJOmhHFKXRN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11BD50
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_func2 000039 */
PDVUorEFHsqJAItVoV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA11BAA0
mov rax, 0x00007FFDB68E68DE
call rax /* OP:01BB-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11BD00
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* (null) 000000 */
PXkVLrMVALdQEAjciM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA11BCC0
mov rax, 0x00007FFDB68E543E
call rax /* OP:0086-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11BE60
mov rax, 0x00007FFDB68E543E
call rax /* OP:0086-0000 */
mov eax, [rsi+0]
add eax, [rsi+8]
mov [rsi+0], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11BF20
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* tst_letlec 000000 */
IVohCeAEnBdMNGHrRl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE927F
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11BE10
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_letlec 000005 */
ODwKLkKludvVFjFLMT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C170
mov rax, 0x00007FFDB68E3675
add rsp, 504
jmp rax

/* tst_letlec 00000A */
MrWGXOLlkKaaOMPRlC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9291
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C2D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_letlec 00000F */
DgATswQJQXgNEundse:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C3F0
mov rax, 0x00007FFDB68E471E
add rsp, 504
jmp rax

/* tst_letlec 000013 */
NHtNrPCLjbLMFLFuhF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE92A3
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C550
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_letlec 000018 */
ATfmQKAROCgmHrCknt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C630
mov rax, 0x00007FFDB68E3530
add rsp, 504
jmp rax

/* tst_letlec 00001B */
EnsgViQGTDXmMUOpTx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE92B5
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C790
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_letlec 000020 */
GHiVlULSPsLJOlPGvR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C870
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* tst_tryex 000000 */
MxXAqJETUkJLGwTIEA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11C9A0
mov rax, 0x00007FFDB68E3CB5
add rsp, 504
jmp rax

/* tst_tryex 000004 */
EBCcrvDcsTDnGslTTg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE92C7
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11CB00
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_tryex 000009 */
NbcWiFQqnhpUPSpuNp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11CBE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_tryex 00000B */
OqawaoMUPxXvOevkkI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE92D6
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11CD40
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_tryex 000010 */
EtcXEsImUbsKGgPnbG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11CE20
mov rax, 0x00007FFDB68E3698
add rsp, 504
jmp rax

/* tst_tryex 000014 */
LAaFqoOeAqgDKkVTjG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11CF00
mov rax, 0x00007FFDB68E4467
add rsp, 504
jmp rax

/* tst_tryex 000019 */
QFToJsOmOOdMFPhuCo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+0], rax
mov rax, 0x008D0228BAEE92E5
mov [rsi+8], rax
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D0A0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_tryex 000020 */
NQKsNGGqnebNCtViFH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D320
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* tst_tryex 000024 */
FQIOwbODHgFnEEfnDT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE92F4
mov [rsi+16], rax
xor rax, rax
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D2D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_tryex 000029 */
QMUgVvIxgOKSCTlMrF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D3B0
mov rax, 0x00007FFDB68E5AB0
add rsp, 504
jmp rax

/* tst_tryex 00002B */
LuhcqlJlMkihMVxMHA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D490
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* tst_tryex2 000000 */
DMOGFHNjOhADCwGSbH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA11D290
mov rax, 0x00007FFDB68E1861
call rax /* OP:0088-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11D5E0
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D660
mov rax, 0x00007FFDB68E446C
add rsp, 504
jmp rax

/* tst_tryex2 000005 */
EvpkNuMlkWLOOsMDsD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D740
mov rax, 0x00007FFDB68E471E
add rsp, 504
jmp rax

/* tst_tryex2 000007 */
IoIBQkHtocnLAxBxDS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D820
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* $CTOR$ 000000 */
GicXgOOkxbJLBNAhxJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11D950
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* tst_decjpg 000000 */
LwcUBgBHnUGeEIPDRf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9305
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11DA50
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11DA90
mov rax, 0x00007FFDB68E1366
call rax /* OP:007E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11DDA0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11DDE0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11DE20
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11DEA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 00000F */
LVhbVjLjFAvAMJXVIk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9316
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11DF80
mov rax, 0x00007FFDB68E7473
call rax /* OP:0080-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11E000
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 000015 */
KkEUVWAJTqFPATuEuc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+16], rax
mov rax, 0x008D0228BAEE932E
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11E120
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+16]
mov [rsi+128], rax
mov rcx, rdi
mov rdx, 0x00000228BA11E1A0
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E1E0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E220
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E260
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E2A0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E2E0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+56]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA11E360
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11E3A0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11E420
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 000036 */
IignidKmnHuCOhRROH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11E580
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 000038 */
MaktroPrNDKkFrRXxM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+0], rax
mov rax, [rsi+16]
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11E6A0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+24], rax
mov rax, [rsi+24]
mov [rsi+112], rax
mov rax, [rsi+112]
lea rdx, [rax+1]
mov [rsi+112], rdx
mov rax, [rsi+112]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11E820
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* tst_decjpg 00004A */
EAGAVqPkJCRNOqIQPk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+112]
mov [rsi+32], eax
mov rax, [rsi+0]
mov [rsi+112], rax
mov rax, [rsi+16]
mov [rsi+120], rax
mov rcx, rdi
mov rdx, 0x00000228BA11E9D0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov eax, [rsi+56]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA11EA50
mov rax, 0x00007FFDB68E7473
call rax /* OP:0080-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11EA90
mov rax, 0x00007FFDB68E7473
call rax /* OP:0080-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11EB10
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 00005C */
OfhShGAfdTPsJsRnXh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11EC80
mov rax, 0x00007FFDB68E4D0E
add rsp, 504
jmp rax

/* tst_decjpg 00005F */
ExOxuiGaPWoRHJmqMT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+112]
mov [rsi+40], eax
mov eax, [rsi+40]
sub eax, [rsi+32]
mov [rsi+48], eax
mov rax, 0x008D0228BAEE934B
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11EDE0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+48]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA11EE60
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11EEA0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11EF20
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 000073 */
NTHmAoQNOhPCIkWosE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE935E
mov [rsi+112], rax
mov rcx, rdi
mov rdx, 0x00000228BA11F050
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+64]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA11F0D0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11F110
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+72]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA11F190
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA11F1D0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11F250
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 000088 */
KoDwDOGUwSptHvDWqL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+64]
imul eax, [rsi+72]
mov [rsi+112], eax
mov eax, [rsi+112]
shl eax, 2
mov [rsi+112], eax
mov rcx, rdi
mov rdx, 0x00000228BA11F3C0
mov rax, 0x00007FFDB68E35E4
call rax /* OP:0089-0000 */
mov rax, [rsi+112]
mov [rsi+8], rax
mov rax, [rsi+0]
mov [rsi+112], rax
mov rax, [rsi+8]
mov [rsi+120], rax
mov rcx, rdi
mov rdx, 0x00000228BA11F4C0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov eax, [rsi+64]
mov [rsi+128], eax
mov eax, [rsi+72]
mov [rsi+136], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11F5C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 00009E */
BDTlTXPIFiBPLqutHJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9379
mov [rsi+112], rax
mov rax, [rsi+8]
mov [rsi+120], rax
mov eax, [rsi+64]
mov [rsi+128], eax
mov eax, [rsi+72]
mov [rsi+136], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11F840
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* tst_decjpg 0000AA */
MPhVNoQACjIIEhLSmV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11F960
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* readfile 000000 */
DnXHRlNAssSaHoAbFW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+24]
mov [rsi+40], rax
mov rax, 0x008D0228BAEE938D
mov [rsi+48], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11FB60
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 000006 */
NxQatUOvRAHbHXLrxW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+40]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11FC80
mov rax, 0x00007FFDB68E1D57
add rsp, 504
jmp rax

/* readfile 00000D */
PaKrLiNJKBGaHPctPp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+40], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11FDA0
mov rax, 0x00007FFDB68E6E74
add rsp, 504
jmp rax

/* readfile 00000F */
CjrLKhEdNLmGQXJEdE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+40], rax
xor rax, rax
mov [rsi+48], rax
mov rcx, rdi
mov rdx, 0x00000228BA11FEC0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA11FF40
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 000016 */
IEkQJnQRFKHqEbJBdW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+40], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1200A0
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 00001B */
NmpSUnPAxBrFKQvrTW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+40]
mov [rsi+16], eax
mov rax, [rsi+8]
mov [rsi+40], rax
xor rax, rax
mov [rsi+48], rax
xor rax, rax
mov [rsi+56], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA120280
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 000023 */
JRihfVKsObjNDUOiFb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov [rsi+40], eax
mov rcx, rdi
mov rdx, 0x00000228BA1203A0
mov rax, 0x00007FFDB68E35E4
call rax /* OP:0089-0000 */
mov rax, [rsi+40]
mov [rsi+0], rax
mov rax, [rsi+0]
mov [rsi+40], rax
mov rcx, rdi
mov rdx, 0x00000228BA120460
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1204A0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+16]
mov [rsi+56], eax
mov rax, [rsi+8]
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1205A0
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 000036 */
MAfveKEiDhjeMggpme:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+40], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA120760
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* readfile 00003B */
LRwbcjHTQEPLFecxqG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov [rsi+40], eax
mov rcx, rdi
mov rdx, 0x00000228BA120880
mov rax, 0x00007FFDB68E1FA5
call rax /* OP:014F-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA120900
mov rax, 0x00007FFDB68E4444
add rsp, 504
jmp rax

/* PDJPG_AllocContext 000000 */
OcfPuHOCmwPJPrEuCA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1208C0
mov rax, 0x00007FFDB68E1861
call rax /* OP:0088-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120AB0
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA120B30
mov rax, 0x00007FFDB68E446C
add rsp, 504
jmp rax

/* PDJPG_AllocContext 000005 */
CebjEnLSFqHLDQNedc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA120C50
mov rax, 0x00007FFDB68E4444
add rsp, 504
jmp rax

/* $CTOR$ 000000 */
DsNdIiJaAhvQGcIgoX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA120C10
mov rax, 0x00007FFDB68E645B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120E60
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120EA0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120EE0
mov rax, 0x00007FFDB68E645B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120F20
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120F60
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120FA0
mov rax, 0x00007FFDB68E6460
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA120FE0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121020
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121060
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1210A0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1210E0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121120
mov rax, 0x00007FFDB68E6460
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121160
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1211A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1211E0
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121220
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121260
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1212A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1212E0
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121320
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121360
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1213A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1213E0
mov rax, 0x00007FFDB68E6438
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121420
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121460
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1214A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1214E0
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121520
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121560
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1215A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1215E0
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121620
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121660
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1216A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1216E0
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121720
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121760
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1217A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1217E0
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121820
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA121860
mov rax, 0x00007FFDB68E361B
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1218A0
mov rax, 0x00007FFDB68E5330
call rax /* OP:0121-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA121920
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000000 */
OmwSIUFXWqmuEDugPw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA126960
mov rax, 0x00007FFDB68E1D57
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000005 */
EOtcGQGHFXVHGLbeqP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA126A40
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000007 */
LBvJubQURgqpGIrfft:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+72]
mov [rsi+104], rax
mov eax, [rsi+80]
mov [rsi+112], eax
mov rax, 0x008D0228BAEE9398
mov [rsi+120], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA126BE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 00000F */
AsUcraGPHhiMMtvwBP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+104]
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA126D00
mov rax, 0x00007FFDB68E1D3E
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000016 */
KFSULnHvxfXwGfPLMc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE93A6
mov [rsi+104], rax
xor rax, rax
mov [rsi+112], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA126E60
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 00001B */
OjSwWlOLAPJjONEEjl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+80]
mov [rsi+104], eax
mov rax, [rsi+16]
mov [rsi+112], rax
mov rax, [rsi+72]
mov [rsi+120], rax
mov rcx, rdi
mov rdx, 0x00000228BA126FC0
mov rax, 0x00007FFDB68E372E
call rax /* OP:01B4-0000 */
mov eax, [rsi+104]
sub eax, [rsi+112]
mov [rsi+104], eax
mov eax, [rsi+104]
mov [rsi+40], eax
mov rax, [rsi+64]
mov [rsi+104], rax
mov rax, [rsi+16]
mov [rsi+112], rax
mov eax, [rsi+40]
mov [rsi+120], eax
mov rax, [rsi+88]
mov [rsi+128], rax
mov rax, [rsi+96]
mov [rsi+136], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127200
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000033 */
DDUWEAGHgIKiColGqb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA127350
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127390
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+104]
imul eax, [rsi+112]
mov [rsi+104], eax
mov eax, [rsi+104]
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA127450
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1274D0
mov rax, 0x00007FFDB68E648D
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000047 */
EBUSDpCvQaodKmmswd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA1275B0
mov rax, 0x00007FFDB68E35E4
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1275F0
mov rax, 0x00007FFDB68E1915
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1278D0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeBasic 000050 */
NsKdKlMJPxtALrDaIA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1276C0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127700
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127740
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127780
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1277C0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov eax, [rsi+32]
mov [rsi+120], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127880
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000062 */
PHSXQcBkkepOJhcxnF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA128180
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeBasic 000065 */
ERDjpHMmNKPCQABper:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE93CE
mov [rsi+104], rax
xor rax, rax
mov [rsi+112], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127A70
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 00006B */
IQwAhwDnbUfGNbrQWE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA127A30
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127B50
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+104]
imul eax, [rsi+112]
mov [rsi+104], eax
mov eax, [rsi+104]
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA127C10
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127C90
mov rax, 0x00007FFDB68E647E
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 00007E */
KImvLqCsMElBJCjKoN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA127C50
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127D70
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA127DB0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+32]
mov [rsi+120], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127E70
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 00008B */
EDMmQIGungqOCgwnwG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+72]
mov [rsi+104], rax
mov eax, [rsi+80]
mov [rsi+112], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA127FD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000091 */
PBAJmJCcMvopBKHRBQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+104]
mov [rsi+48], eax
mov rax, 0x008D0228BAEE93F3
mov [rsi+104], rax
xor rax, rax
mov [rsi+112], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1282D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 000099 */
IFwCEmCLaBTFGNgcSl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+64]
mov [rsi+104], rax
mov rax, [rsi+72]
mov [rsi+112], rax
mov eax, [rsi+80]
mov [rsi+120], eax
mov rax, [rsi+88]
mov [rsi+128], rax
mov rax, [rsi+96]
mov [rsi+136], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1284F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 0000A5 */
IsDNuuAXpUxTFhHfoA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+104]
mov [rsi+24], eax
mov rax, 0x008D0228BAEE9414
mov [rsi+104], rax
xor rax, rax
mov [rsi+112], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA128690
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 0000AD */
HUNSOfInSmegCboqeb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+72]
mov [rsi+104], rax
mov eax, [rsi+80]
mov [rsi+112], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1287F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 0000B3 */
EKgMckELbbqqANobNH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+104]
mov [rsi+56], eax
mov rax, 0x008D0228BAEE9438
mov [rsi+104], rax
mov rcx, rdi
mov rdx, 0x00000228BA128910
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+48]
mov [rsi+120], eax
mov rcx, rdi
mov rdx, 0x00000228BA128990
mov rax, 0x00007FFDB68E74D2
call rax /* OP:0178-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1289D0
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA128A10
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+56]
mov [rsi+120], eax
mov rcx, rdi
mov rdx, 0x00000228BA128A90
mov rax, 0x00007FFDB68E74D2
call rax /* OP:0178-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA128AD0
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA128B10
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA128B90
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeBasic 0000CE */
MLSCcHHVseqtDvSSOO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA128CE0
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000000 */
EnJLSAACkhbVJXWvgj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9450
mov [rsi+56], rax
xor rax, rax
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA128EF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000005 */
NKNGOvMTiFEVNGihgl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+32]
mov [rsi+0], rax
mov rax, [rsi+32]
mov [rsi+56], rax
mov eax, [rsi+40]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000011 */
FFxMAMIgQdJHCLhndm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+16]
mov [rsi+64], rax
mov rax, [rsi+56]
mov rcx, [rsi+64]
sub rax, rcx
sub rcx, [rsi+56]
sar rax, 63
shr rcx, 63
or eax, ecx
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA129260
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 00001A */
JOqjSKApNiPIOKijbP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA129220
mov rax, 0x00007FFDB68E3C65
call rax /* OP:01B2-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA129340
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1293C0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000023 */
AsExMtKnSoAsFlWvUD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+16]
mov [rsi+64], rax
mov rax, [rsi+56]
mov rcx, [rsi+64]
sub rax, rcx
sub rcx, [rsi+56]
sar rax, 63
shr rcx, 63
or eax, ecx
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA129560
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 00002C */
OmMRXnPoNBmHKCskpn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA129520
mov rax, 0x00007FFDB68E3C65
call rax /* OP:01B2-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA129640
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1296C0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000035 */
PWIWqDGdnTaKLTUhtj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
lea rdx, [rax+1]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1295B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000040 */
QbPRRvPjVbqUNIiHAg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000043 */
QjaQMrIeiPTWCCftaH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA129980
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA1299C0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA129A40
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 00004E */
ANiFIwPDEtutKAgqNN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+56], edx
mov rcx, rdi
mov rdx, 0x00000228BA129B60
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA129BE0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000059 */
PoHbCwDTmAXUAPSfex:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+56], edx
mov eax, [rsi+56]
shl eax, 8
mov [rsi+56], eax
mov rax, [rsi+0]
mov [rsi+64], rax
mov rax, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+3]
mov [rsi+64], edx
mov eax, [rsi+56]
or eax, [rsi+64]
mov [rsi+56], eax
mov eax, [rsi+56]
mov [rsi+24], eax
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+24]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
lea rdx, [rax+2]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+8], rax
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
lea rdx, [rax+4]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A080
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, 0x008D0228BAEE9482
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12A140
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000085 */
BTMfqwGVpRVpGqXSUK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12A2C0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000088 */
IHBDiBDvlSiEGScQVw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+0]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A3E0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12A460
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000090 */
MvaoEwKFsaqfCFxODA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+64]
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A600
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+48]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A680
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12A700
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000A0 */
AjGKnfJkRDXpIMWsnn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12A830
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000A3 */
AGKgInEtKGXmCmgMsH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9494
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A910
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+48]
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA12A990
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12AA10
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000AE */
FwFsjiOtOlHcMkSUBm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+0]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA12AB30
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12ABB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000B6 */
NRfXQaEDOJIsDAseCo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+64]
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12AD50
mov rax, 0x00007FFDB68E4444
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000BE */
FRDSftBGUVusLmWuxF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+0]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA12AE70
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12AEF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000C6 */
FLaNfGGRAEQOELmAtJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+64]
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000CF */
FWprJDIUcwALKbJGFK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+24]
sub eax, 2
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000DC */
KwEKqEPKIebTFHJjjS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA12B2B0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA12B2F0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12B370
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000E7 */
MqUlGgOFFVIbPcpcuh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+56], edx
mov rcx, rdi
mov rdx, 0x00000228BA12B490
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12B510
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000F2 */
IReHrmAdXjwUNKOnOS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+56], edx
mov rcx, rdi
mov rdx, 0x00000228BA12B630
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12B6B0
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 0000FD */
KwMuaiKdPJBPNMJPhs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+56], edx
mov eax, [rsi+56]
shl eax, 8
mov [rsi+56], eax
mov rax, [rsi+0]
mov [rsi+64], rax
mov rax, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+3]
mov [rsi+64], edx
mov eax, [rsi+56]
or eax, [rsi+64]
mov [rsi+56], eax
mov eax, [rsi+56]
mov [rsi+24], eax
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+24]
add eax, 2
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000119 */
HsQDuNPdaAQaQXVvTx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
lea rdx, [rax+1]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1292B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeScanForComponentLayer 000124 */
HkCEDfCmCIUoQUJqNw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE94C9
mov [rsi+56], rax
xor rax, rax
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12BD20
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeScanForComponentLayer 00012A */
AcjWtxPlwPcoAmxXUx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+56], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12BE40
mov rax, 0x00007FFDB68E6E74
add rsp, 504
jmp rax

/* (null) 000000 */
EBaPOtIeHnjCNdaLOu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+24]
mov [rsi+0], rax
mov rax, [rsi+24]
mov [rsi+40], rax
mov eax, [rsi+32]
mov [rsi+48], eax
mov rax, [rsi+40]
movsxd rcx, [rsi+48]
lea rdx, [rax+rcx]
mov [rsi+40], rdx
mov rax, [rsi+40]
mov [rsi+8], rax
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12C330
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* (null) 00000F */
IsrKbdHpvWCPLFwCHO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+40], rax
mov rax, [rsi+8]
mov [rsi+48], rax
mov rax, [rsi+40]
mov rcx, [rsi+48]
sub rax, rcx
sub rcx, [rsi+40]
sar rax, 63
shr rcx, 63
or eax, ecx
mov [rsi+40], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12C2E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* (null) 000018 */
IHbIxPHLhXogAklFvP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
imul eax, 65521
mov [rsi+40], eax
mov rax, [rsi+0]
mov [rsi+48], rax
mov rcx, rdi
mov rdx, 0x00000228BA12C400
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+56]
lea rdx, [rax+1]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdx, 0x00000228BA12C4C0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+40]
add eax, [rsi+48]
mov [rsi+40], eax
inc dword [rsi+40]
mov eax, [rsi+40]
mov [rsi+16], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12C330
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* (null) 000031 */
DEhQdFFexBjAKWvwCs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12C6F0
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000000 */
MQVkfNQXwWpaCrgkuP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov rcx, rdi
mov rdx, 0x00000228BA12C800
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA12C840
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12C8C0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00000B */
ITdgWIMxvfEELEHPBx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov rax, [rsi+352]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12C9E0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12CA60
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000016 */
CWLJVWDdpkaVBgDdJr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12CB40
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000018 */
EDABUCEwllEiNiLuEk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+352], rax
mov rcx, rdi
mov rdx, 0x00000228BA12CC20
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
xor rax, rax
mov [rsi+352], rax
mov rcx, rdi
mov rdx, 0x00000228BA12CCA0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rax, 0x008D0228BAEE94FE
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12CDA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000027 */
QdcgFONToAREPfnGgt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+280], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12CFA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 00002D */
CnIpvcMFmImDPreCBJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+280]
mov rax, 0x00000228BA12D180
cmp ecx, [rsi+328]
mov r10, 0x00000228BA131A40
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_DecodeCtxInner 000033 */
HwhiUsPVdSGeJoULrL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12D0B0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12D130
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00003F */
CkxlLrMGAasiJjDEWh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000042 */
NdMULOGtPtCOLXJgNv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12D320
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12D3A0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000050 */
JdoAFCDJlSCWMqsKMa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+280]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000055 */
PWgFuoDKoTLTCubfRE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12D5D0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12D650
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000064 */
FnjcxBNIOqWRHXGUgF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+280]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000069 */
LAxJQwNdqfasBUnbLN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12D880
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12D900
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000078 */
QCvjFpNGIesFLNksAi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+280]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 00007D */
PhbBEkIixTtqEPohsa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov eax, [rsi+352]
sub eax, 192
mov [rsi+352], eax
mov eax, [rsi+352]
mov [rsi+288], eax
mov eax, [rsi+288]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+288]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+352], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12DC30
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000092 */
EVKSqWMoBuwiMIAack:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+288], 0x0000003F
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12DF30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000098 */
GccPODLbCXwCAlHlaE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12DE60
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12DEE0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000A7 */
QPIuWoFgKgIxCHOqnL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9523
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E040
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000AC */
QDEdHxEmxglaIkDMVG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E260
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000BB */
MRHwXVMMMTBbIbGtQv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 0000BD */
MtmdgPMbrQTFQUvMth:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12E490
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E510
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000CC */
AJvQtEEBLUuXHQRbUk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9546
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E670
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000D2 */
MbDcGQQUlOLbMumNLt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12E890
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000E1 */
HKIwhKAkjgLtBTShDI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12EB90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 0000E3 */
EadrpCBqcrdBOWjHCd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12EAC0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12EB40
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000F2 */
NoLSLWGsjXObDISckX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9569
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12ECA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0000F8 */
GVBcPMEKaLnrKupAxm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12EEC0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000107 */
GLmrCLBUkeSHNlKDKn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F1C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000109 */
KUILokHHRHnKDMmMle:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12F0F0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F170
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000118 */
KCjaTwGiDvUjPTfuLj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE958D
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F2D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00011E */
AGriMuINcIpsAwETgf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F4F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00012D */
EsDEmjPwdsGjBJhMan:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+352]
mov [rsi+288], eax
mov eax, [rsi+288]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+288]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+352], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F650
mov rax, 0x00007FFDB68E4CF0
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000136 */
FPleiFOSaiQiOqrfLK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+280]
add eax, [rsi+288]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F7C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 00013C */
EDgfHrOqdjibMxIVes:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 00013F */
HofJFcBBvcniEIarQW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12F910
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12F990
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00014E */
FXJGprPEiRhvEgbCXR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA12FAF0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12FB70
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00015D */
HcFgrcHrGnbkNFVAjv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE95B0
mov [rsi+352], rax
mov rcx, rdi
mov rdx, 0x00000228BA12FC50
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+320]
mov [rsi+368], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+376], eax
mov rax, [rsi+368]
movsxd rcx, [rsi+376]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+368], edx
mov eax, [rsi+368]
sub eax, 224
mov [rsi+368], eax
mov rcx, rdi
mov rdx, 0x00000228BA12FD90
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA12FDD0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12FE50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000175 */
FcScUwKgERiSLeClJg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA130000
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130080
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000184 */
QdHedBFOUvPoKwxpSA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1302A0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000193 */
IHrrqWKohiniLHwnwp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1305A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000195 */
MruEokMXwWVuLUqIPB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA1304D0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130550
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001A4 */
QkDlmvGkoGKAKIttdW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130770
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001B3 */
OtaKENFgpsWqOPBTSB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130A70
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 0001B5 */
AvdmkODHNkfdDELdsG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA1309A0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130A20
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001C4 */
HthCDfBbxKegCWoQIU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130C40
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001D3 */
QecHDmMfJEIfNCxewE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130F40
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 0001D5 */
MLnvhmPQCQsIQhWvVP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA130E70
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA130EF0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001E4 */
JKqOpSCHQviPAqTeOW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+312]
mov [rsi+352], rax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
lea rdx, [rax+rcx]
mov [rsi+360], rdx
mov rax, [rsi+360]
lea rdx, [rax+2]
mov [rsi+360], rdx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131110
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 0001F3 */
JVresSBsufTrOFvRti:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131500
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 0001F5 */
AMgffHNPDwARHxvIsR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 2
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov eax, [rsi+352]
shl eax, 8
mov [rsi+352], eax
mov rax, [rsi+320]
mov [rsi+360], rax
mov eax, [rsi+280]
add eax, 3
mov [rsi+368], eax
mov rax, [rsi+360]
movsxd rcx, [rsi+368]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+360], edx
mov eax, [rsi+352]
or eax, [rsi+360]
mov [rsi+352], eax
mov eax, [rsi+352]
mov [rsi+288], eax
mov eax, [rsi+280]
add eax, [rsi+288]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1318A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000214 */
NlgggrBBSqoQLFViiI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+320]
mov [rsi+352], rax
mov eax, [rsi+280]
add eax, 1
mov [rsi+360], eax
mov rax, [rsi+352]
movsxd rcx, [rsi+360]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+352], edx
mov rcx, rdi
mov rdx, 0x00000228BA1316B0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131730
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000223 */
AsHEnBCcUPcgKoWWxH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131A40
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 000226 */
ExBFrtFpaRawMeLuWt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+280]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA12CFA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_DecodeCtxInner 00022B */
BREQGxGfCOEGAVMJTT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE95D5
mov [rsi+352], rax
xor rax, rax
mov [rsi+360], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1319F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 000231 */
KIBpLbLIeHfbOGMPEm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE95F9
mov [rsi+352], rax
mov rcx, rdi
mov rdx, 0x00000228BA131AD0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131B10
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131B50
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131B90
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131BD0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131C10
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131C50
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131CD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_DecodeCtxInner 00024A */
AxqvIhGEmSmcKRKLfV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA131C90
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131E00
mov rax, 0x00007FFDB68E1FA5
call rax /* OP:01B3-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131E40
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA131E80
mov rax, 0x00007FFDB68E1FA5
call rax /* OP:01B3-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA131F00
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_MarkerAPP0 000000 */
CrMPKFCcEdUeBrSEFS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1321E0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_MarkerDQT 000000 */
IBveXKKKODicEVkiEf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+48]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA132310
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+56]
shl eax, 8
mov [rsi+56], eax
mov rax, [rsi+48]
mov [rsi+64], rax
mov rax, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+64], edx
mov eax, [rsi+56]
or eax, [rsi+64]
mov [rsi+56], eax
mov eax, [rsi+56]
mov [rsi+32], eax
mov rax, [rsi+48]
mov [rsi+56], rax
mov rax, [rsi+56]
lea rdx, [rax+2]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rax, [rsi+48]
mov [rsi+56], rax
mov eax, [rsi+32]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
lea rdx, [rax+rcx]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1328B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDQT 000021 */
BqOxvKBcTNjQOucmcN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+8]
mov [rsi+64], rax
mov rax, [rsi+56]
mov rcx, [rsi+64]
sub rax, rcx
sub rcx, [rsi+56]
sar rax, 63
shr rcx, 63
or eax, ecx
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132860
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDQT 00002A */
IFGBUUJWWcwHDtWgwO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA132940
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+56]
sar eax, 4
mov [rsi+56], eax
mov eax, [rsi+56]
and eax, 15
mov [rsi+56], eax
mov eax, [rsi+56]
mov [rsi+16], eax
mov eax, [rsi+16]
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132AC0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerDQT 00003A */
PpjCOvOoacPmQWGwSm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132BA0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_MarkerDQT 00003C */
IaKHWPEviaHrQaXERp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA132C80
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+56]
and eax, 15
mov [rsi+56], eax
mov eax, [rsi+56]
mov [rsi+16], eax
mov dword [rsi+24], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132EE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDQT 000049 */
MgJDhMHLJoDrLptACT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
mov ecx, 64
sub eax, ecx
sub ecx, [rsi+24]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132E90
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDQT 00004F */
KbXmiFBjhTtnHpCJVs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov eax, [rsi+24]
add eax, 1
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+56], edx
mov rcx, rdi
mov rdx, 0x00000228BA132FF0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA133030
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA133070
mov rax, 0x00007FFDB68E1366
call rax /* OP:007E-0000 */
mov eax, [rsi+24]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1330F0
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov eax, [rsi+72]
add eax, [rsi+80]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA133170
mov rax, 0x00007FFDB68E1898
call rax /* OP:004E-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1332E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDQT 000064 */
EiqBIpGDsSlmEioRPw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+24]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA132EE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDQT 000069 */
DhDjuLKVTCxjPQshke:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+56]
lea rdx, [rax+65]
mov [rsi+56], rdx
mov rax, [rsi+56]
mov [rsi+0], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1328B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDQT 000075 */
FHlKJJOEdGWlNqdtWF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rax, [rsi+48]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA133540
mov rax, 0x00007FFDB68E372E
call rax /* OP:01B4-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1335C0
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* PDJPG_MarkerSOF0 000000 */
DuCMkoCewiFwNtWUqu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+72]
mov [rsi+80], rax
mov rcx, rdi
mov rdx, 0x00000228BA133700
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+80]
shl eax, 8
mov [rsi+80], eax
mov rax, [rsi+72]
mov [rsi+88], rax
mov rax, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+88], edx
mov eax, [rsi+80]
or eax, [rsi+88]
mov [rsi+80], eax
mov eax, [rsi+80]
mov [rsi+40], eax
mov rax, [rsi+72]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+3]
mov [rsi+80], edx
mov eax, [rsi+80]
shl eax, 8
mov [rsi+80], eax
mov rax, [rsi+72]
mov [rsi+88], rax
mov rax, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+4]
mov [rsi+88], edx
mov eax, [rsi+80]
or eax, [rsi+88]
mov [rsi+80], eax
mov eax, [rsi+80]
mov [rsi+16], eax
mov rax, [rsi+72]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+5]
mov [rsi+80], edx
mov eax, [rsi+80]
shl eax, 8
mov [rsi+80], eax
mov rax, [rsi+72]
mov [rsi+88], rax
mov rax, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+6]
mov [rsi+88], edx
mov eax, [rsi+80]
or eax, [rsi+88]
mov [rsi+80], eax
mov eax, [rsi+80]
mov [rsi+24], eax
mov eax, [rsi+24]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA133C40
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov eax, [rsi+16]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA133CC0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov dword [rsi+48], 0x00000000
mov dword [rsi+56], 0x00000000
mov rax, [rsi+72]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+7]
mov [rsi+80], edx
mov eax, [rsi+80]
mov [rsi+32], eax
mov rax, [rsi+72]
mov [rsi+80], rax
mov rax, [rsi+80]
lea rdx, [rax+8]
mov [rsi+80], rdx
mov rax, [rsi+80]
mov [rsi+8], rax
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA134180
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 000052 */
ISeRdMQIWVRmEwIxPQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+16]
mov rax, 0x00000228BA134920
cmp ecx, [rsi+32]
mov r10, 0x00000228BA1352C0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOF0 000057 */
JgERtbCaovOqFNktER:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+80], rax
mov rcx, rdi
mov rdx, 0x00000228BA134210
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA134250
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA1342D0
mov rax, 0x00007FFDB68E1898
call rax /* OP:004E-0000 */
mov rax, [rsi+8]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+80], edx
mov eax, [rsi+80]
sar eax, 4
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA1343D0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA134450
mov rax, 0x00007FFDB68E1898
call rax /* OP:004E-0000 */
mov rax, [rsi+8]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+80], edx
mov eax, [rsi+80]
and eax, 15
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA134550
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA134590
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA134610
mov rax, 0x00007FFDB68E1898
call rax /* OP:004E-0000 */
mov rax, [rsi+8]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+80], edx
mov rcx, rdi
mov rdx, 0x00000228BA1346D0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA134750
mov rax, 0x00007FFDB68E1898
call rax /* OP:004E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA134790
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA134810
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+48]
mov [rsi+88], eax
mov ecx, [rsi+80]
mov rax, 0x00000228BA134B60
cmp ecx, [rsi+88]
mov r10, 0x00000228BA134D80
cmovle rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOF0 000099 */
JhkuucMceKRWIicNGg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA134890
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA134AE0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+80]
mov [rsi+48], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA134D80
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 0000A3 */
GbstLQBRhekAAdmsCG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA134BF0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA134C70
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+56]
mov [rsi+88], eax
mov ecx, [rsi+80]
mov rax, 0x00000228BA134ED0
cmp ecx, [rsi+88]
mov r10, 0x00000228BA135020
cmovle rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOF0 0000B0 */
LtDJljQKOHpdEmnHev:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA134CF0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA134E50
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+80]
mov [rsi+56], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA135020
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 0000BA */
AGVnSnMlLbDdJUEgwS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+80], rax
mov rax, [rsi+80]
lea rdx, [rax+3]
mov [rsi+80], rdx
mov rax, [rsi+80]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1350F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 0000C3 */
GWOlieJPhGStDHSnLN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA134180
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 0000C8 */
HSfociARsBwNCQBnBC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+48]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA1351C0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov eax, [rsi+56]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA135240
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1353E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 0000D8 */
LiaNNlBNlXMWQpWsSx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+16]
mov rax, 0x00000228BA135930
cmp ecx, [rsi+32]
mov r10, 0x00000228BA135C50
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOF0 0000DD */
PtDoBBBJQIqnFuDPsb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA135350
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1354B0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1354F0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+80]
imul eax, [rsi+88]
mov [rsi+80], eax
mov eax, [rsi+48]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1355B0
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1355F0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA135670
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1356B0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA135730
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA135770
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+80]
imul eax, [rsi+88]
mov [rsi+80], eax
mov eax, [rsi+56]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA135830
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA135870
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA1358F0
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA135AB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 00010C */
OGoeFiBVdOleJqQCwo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1353E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOF0 000111 */
HOIdXAMWciATAdDcCf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA135B80
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA135C00
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000000 */
MwOSrBKEvcqGAxFGBU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+64]
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA135D60
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+72]
shl eax, 8
mov [rsi+72], eax
mov rax, [rsi+64]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+80], edx
mov eax, [rsi+72]
or eax, [rsi+80]
mov [rsi+72], eax
mov eax, [rsi+72]
mov [rsi+40], eax
mov rax, [rsi+64]
mov [rsi+72], rax
mov rax, [rsi+72]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+72], edx
mov eax, [rsi+72]
sar eax, 4
mov [rsi+72], eax
mov eax, [rsi+72]
and eax, 15
mov [rsi+72], eax
mov eax, [rsi+72]
mov [rsi+24], eax
mov rax, [rsi+64]
mov [rsi+72], rax
mov rax, [rsi+72]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+72], edx
mov eax, [rsi+72]
and eax, 15
mov [rsi+72], eax
mov eax, [rsi+72]
mov [rsi+16], eax
mov rax, 0x008D0228BAEE960D
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA136160
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+16]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1361E0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136220
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+24]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1362A0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1362E0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA136360
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000037 */
OkKHmcKFKBfrQeLMAJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA136320
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136510
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+72]
mov [rsi+48], eax
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA136730
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000042 */
GCTEcWNLLWixCbDdrg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 256
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1366E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000049 */
FjFsbhGQCEpfMcOOpw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA1367C0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136800
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136840
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx], dl
mov rcx, rdi
mov rdx, 0x00000228BA1368C0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136900
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136940
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136980
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov rcx, rdi
mov rdx, 0x00000228BA136A00
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136A40
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136A80
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA136AC0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA136CA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000070 */
GbGKIONGOgSWIkDlXp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA136730
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000075 */
LjWjICEpVKinLtffrp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+64]
mov [rsi+72], rax
mov rax, [rsi+72]
lea rdx, [rax+3]
mov [rsi+72], rdx
mov rax, [rsi+72]
mov [rsi+0], rax
mov rax, [rsi+0]
mov [rsi+72], rax
mov rax, [rsi+72]
lea rdx, [rax+16]
mov [rsi+72], rdx
mov rax, [rsi+72]
mov [rsi+8], rax
mov dword [rsi+32], 0x00000000
mov dword [rsi+40], 0x00000000
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA137130
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 00008F */
PCoLqqItGakpNsitGt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 16
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1370E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000095 */
AdTjLwDclviDJGmDAo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1370A0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01E6-0000 */
mov dword [rsi+24], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA137420
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 00009D */
FCTehjBDkqKaAlkSFi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
mov [rsi+72], eax
mov rax, [rsi+0]
mov [rsi+80], rax
mov eax, [rsi+16]
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+80], edx
mov ecx, [rsi+72]
mov rax, 0x00000228BA137C30
cmp ecx, [rsi+80]
mov r10, 0x00000228BA137EE0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerDHT 0000A9 */
COIBPJHUpltLMRsmxE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA1374B0
mov rax, 0x00007FFDB68E7103
call rax /* OP:00A4-0000 */
inc dword [rsi+80]
mov eax, [rsi+80]
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA137570
mov rax, 0x00007FFDB68E4A3E
call rax /* OP:009F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1375B0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1375F0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA137630
mov rax, 0x00007FFDB68E3C65
call rax /* OP:01B2-0000 */
mov eax, [rsi+88]
add eax, [rsi+96]
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov eax, [rsi+16]
add eax, 1
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA137730
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA137770
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1377B0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1377F0
mov rax, 0x00007FFDB68E3C65
call rax /* OP:01B2-0000 */
mov eax, [rsi+88]
add eax, [rsi+96]
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx], dl
mov rcx, rdi
mov rdx, 0x00000228BA1378B0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+16]
add eax, 1
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA137930
mov rax, 0x00007FFDB68E74AF
call rax /* OP:0006-0000 */
dec dword [rsi+72]
mov rcx, rdi
mov rdx, 0x00000228BA1379B0
mov rax, 0x00007FFDB68E4A3E
call rax /* OP:009F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1379F0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA137A30
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA137A70
mov rax, 0x00007FFDB68E3C65
call rax /* OP:01B2-0000 */
mov eax, [rsi+88]
add eax, [rsi+96]
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov eax, [rsi+16]
add eax, 1
mov [rsi+40], eax
mov rax, [rsi+8]
mov [rsi+72], rax
mov rax, [rsi+72]
lea rdx, [rax+1]
mov [rsi+72], rdx
mov rax, [rsi+72]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA137E10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0000F0 */
FbqvLKOQMIibDspLHr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+24]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA137420
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0000F5 */
GBkAGsMgStqNEjqumq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA137130
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0000FA */
JFOJvwEJuxfgDLMFvE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9627
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA137FB0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+32]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA138030
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138070
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+40]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1380F0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138130
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1381B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 00010E */
NEebqtFrvbTtIvcXLq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138440
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000112 */
JqkVAdEtpTRbBLKmHD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 256
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1383F0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000119 */
BRIHGBOBPebfCiwKeO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1383B0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1384D0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138510
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138550
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov rcx, rdi
mov rdx, 0x00000228BA1385D0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138610
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138650
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138690
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138840
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000134 */
JcdAeGNhpRQSECFEpI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138440
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000139 */
QbdIiiQMcqTAHusTHu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+16], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138A70
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 00013D */
FHkTMcLhkpcmCINsII:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 256
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138A20
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000144 */
IeRcPEDcnvrlFjqndC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1389E0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138B00
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138B40
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+72], edx
mov eax, [rsi+72]
mov [rsi+40], eax
mov eax, [rsi+40]
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138C80
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000156 */
PrRSXmJHUJERFllXhP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA139FA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000159 */
OIPqPAQqSAuELHvill:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA138C40
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138DF0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA138E30
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxw edx, [rax+rcx*2]
mov [rsi+72], edx
mov eax, [rsi+72]
mov [rsi+24], eax
mov eax, [rsi+40]
mov ecx, 8
sub eax, ecx
sub ecx, [rsi+40]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138F70
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 00016C */
IvHfRhCLCwqnBdPuBn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA139050
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139090
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1390D0
mov rax, 0x00007FFDB68E74AF
call rax /* OP:0006-0000 */
mov eax, [rsi+72]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA139150
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139190
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1391D0
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139210
mov rax, 0x00007FFDB68E74AF
call rax /* OP:0006-0000 */
mov eax, [rsi+72]
mov [rsi+32], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA139510
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 000181 */
PgCKWgBHoVuLHavvIx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA1393C0
mov rax, 0x00007FFDB68E7103
call rax /* OP:00A4-0000 */
dec dword [rsi+80]
mov eax, [rsi+80]
mov [rsi+32], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1394C0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 00018A */
MslJLBEphbeJOmVaIG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
mov ecx, 256
sub eax, ecx
sub ecx, [rsi+24]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1395E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerDHT 000191 */
CWCveXDrniDWIpJnmf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA1396C0
mov rax, 0x00007FFDB68E4985
call rax /* OP:009E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139700
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139740
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139780
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
inc dword [rsi+24]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA139510
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0001A4 */
PVrtSlDPivBbBSQhQj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA139FA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0001A7 */
LFNUEvMwKVpFGKJvek:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
mov [rsi+72], eax
mov eax, [rsi+40]
sub eax, 8
mov [rsi+80], eax
mov rcx, rdi
mov rdx, 0x00000228BA139A30
mov rax, 0x00007FFDB68E106E
call rax /* OP:0007-0000 */
mov eax, [rsi+72]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA139AB0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139AF0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139B30
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movsxw edx, [rax+rcx*2]
mov [rsi+72], edx
mov rcx, rdi
mov rdx, 0x00000228BA139BB0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139BF0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139C30
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov eax, [rsi+16]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA139CF0
mov rax, 0x00007FFDB68E4985
call rax /* OP:009E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139D30
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139D70
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA139DB0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx*2], dx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA139FA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0001D4 */
BooPQoFCSCdCHrHdbP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA138A70
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerDHT 0001D9 */
QVxjlvKMfXktGTqoxG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+8]
mov [rsi+72], rax
mov rax, [rsi+64]
mov [rsi+80], rax
mov rcx, rdi
mov rdx, 0x00000228BA13A0B0
mov rax, 0x00007FFDB68E372E
call rax /* OP:01B4-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13A130
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000000 */
EFXJXcOWCHCSLAxjlM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13A0F0
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A510
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A550
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A590
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A5D0
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A610
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A650
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A690
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A6D0
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A710
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A750
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A790
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A7D0
mov rax, 0x00007FFDB68E57EF
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A810
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A850
mov rax, 0x00007FFDB68E1F05
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13A890
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rax, 0x008D0228BAEE9638
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13A990
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000048 */
CeqNWoCBcaOTGkoCQB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+248]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13AB10
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+256]
shl eax, 8
mov [rsi+256], eax
mov rax, [rsi+248]
mov [rsi+264], rax
mov rax, [rsi+264]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+264], edx
mov eax, [rsi+256]
or eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+160], eax
mov rax, 0x008D0228BAEE9654
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13ACD0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+248]
mov [rsi+272], rax
mov rax, [rsi+272]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+272], edx
mov rcx, rdi
mov rdx, 0x00000228BA13AD90
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13ADD0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13AE50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000067 */
MccAqKKXDVvdKdpSMv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+248]
mov [rsi+256], rax
mov rax, [rsi+256]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+256], edx
mov eax, [rsi+256]
mov [rsi+224], eax
mov dword [rsi+232], 0x00000000
mov rax, [rsi+248]
mov [rsi+256], rax
mov rax, [rsi+256]
lea rdx, [rax+3]
mov [rsi+256], rdx
mov rax, [rsi+256]
mov [rsi+128], rax
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13B3A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00007F */
KrdMQhEoSQTnGDolvi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+256], eax
mov rax, [rsi+248]
mov [rsi+264], rax
mov rax, [rsi+264]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+2]
mov [rsi+264], edx
mov ecx, [rsi+256]
mov rax, 0x00000228BA13B880
cmp ecx, [rsi+264]
mov r10, 0x00000228BA13D980
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 00008A */
QhrahjOvFxOdQIFGut:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9663
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13B430
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rax, [rsi+128]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA13B4B0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA13B4F0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13B530
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rax, [rsi+128]
mov [rsi+272], rax
mov rax, [rsi+272]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+272], edx
mov eax, [rsi+272]
sar eax, 4
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13B630
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13B670
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rax, [rsi+128]
mov [rsi+272], rax
mov rax, [rsi+272]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+272], edx
mov eax, [rsi+272]
and eax, 15
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13B770
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13B7B0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13B830
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0000B2 */
MOtmbIDTlcFDDDUcrQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+128]
mov [rsi+256], rax
mov rax, [rsi+256]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+256], edx
mov eax, [rsi+256]
sar eax, 4
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13BA20
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
mov rax, [rsi+128]
mov [rsi+256], rax
mov rax, [rsi+256]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+256], edx
mov eax, [rsi+256]
and eax, 15
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13BB20
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13BB60
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
mov dword [rsi+144], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13BDE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0000D0 */
CLrsAjBigDrrHUAMbi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+144]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13BD10
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov ecx, [rsi+256]
mov rax, 0x00000228BA13C000
cmp ecx, [rsi+264]
mov r10, 0x00000228BA13D060
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0000DA */
AURsXUCQaTmNDhUKXa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13BD50
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13BEB0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rax, [rsi+128]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA13BF30
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov ecx, [rsi+256]
mov rax, 0x00000228BA13C690
cmp ecx, [rsi+264]
mov r10, 0x00000228BA13C840
cmovne rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0000EA */
ARuNiuPBdVUxPifKuA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13BF70
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C0D0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C110
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C150
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C1D0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C210
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C250
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C2D0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C310
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C350
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C3D0
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C410
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C450
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C4D0
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C510
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C550
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13C590
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C610
mov rax, 0x00007FFDB68E53F8
call rax /* OP:0187-0000 */
inc dword [rsi+184]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13D060
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000134 */
LFfllqJHNQeaMghkcf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+144]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13BDE0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000139 */
HMEXRNBfAMKwEhCksx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13C8D0
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov eax, [rsi+256]
add eax, 7
mov [rsi+256], eax
mov eax, [rsi+256]
sar eax, 3
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA13C9D0
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov eax, [rsi+256]
add eax, 7
mov [rsi+256], eax
mov eax, [rsi+256]
sar eax, 3
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+208], eax
mov eax, [rsi+200]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CB10
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov eax, [rsi+208]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CB90
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov eax, [rsi+200]
add eax, 1
mov [rsi+256], eax
mov eax, [rsi+208]
add eax, 2
mov [rsi+264], eax
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+216], eax
mov rax, [rsi+128]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13CD10
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov rcx, rdi
mov rdx, 0x00000228BA13CD50
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CDD0
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov eax, [rsi+144]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CE50
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CED0
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13CF10
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13CF90
mov rax, 0x00007FFDB68E137A
call rax /* OP:004C-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13D010
mov rax, 0x00007FFDB68E648D
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000187 */
GhnBvVKWQFrWGEMQPU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13CFD0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13D1E0
mov rax, 0x00007FFDB68E35E4
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13D220
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13D2A0
mov rax, 0x00007FFDB68E1893
call rax /* OP:004D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13D5F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000195 */
NFUCrhQjPENECfdwTa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13D370
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13D3F0
mov rax, 0x00007FFDB68E137A
call rax /* OP:004C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13D430
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13D470
mov rax, 0x00007FFDB68E53E4
call rax /* OP:0187-0000 */
xor rax, rax
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13D4F0
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov rax, [rsi+128]
mov [rsi+256], rax
mov rax, [rsi+256]
lea rdx, [rax+2]
mov [rsi+256], rdx
mov rax, [rsi+256]
mov [rsi+128], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13D720
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0001B2 */
MKhVHuJviphtMjNAup:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13B3A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0001B7 */
OCvjBGGhptQWGbvOhN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+128]
mov [rsi+256], rax
mov rax, [rsi+256]
lea rdx, [rax+3]
mov [rsi+256], rdx
mov rax, [rsi+256]
mov [rsi+128], rax
mov rax, 0x008D0228BAEE9675
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13D930
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0001C5 */
DULooDNNkqWAGuapLq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13DBB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0001CA */
BUvESDLOGmQuPdJUPW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13DAE0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov ecx, [rsi+256]
mov rax, 0x00000228BA13E210
cmp ecx, [rsi+264]
mov r10, 0x00000228BA13F760
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0001D4 */
OmISSoCDQVQLLXWEJN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13DB20
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13DC80
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov eax, [rsi+256]
mov [rsi+144], eax
mov rax, 0x008D0228BAEE9691
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13DD40
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DD80
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13DE00
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DE40
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DE80
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DEC0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13DF40
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DF80
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13DFC0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E000
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E040
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E080
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E0C0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E100
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E140
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13E1C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00020E */
OccmbvQXaDDSDHLmfK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13E180
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E3A0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+256]
imul eax, 65536
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E420
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E460
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E4A0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E520
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E560
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E5E0
mov rax, 0x00007FFDB68E1901
call rax /* OP:0049-0000 */
mov eax, [rsi+256]
imul eax, 65536
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E660
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E6A0
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E6E0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E760
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E7A0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E820
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov eax, [rsi+256]
add eax, 7
mov [rsi+256], eax
mov eax, [rsi+256]
sar eax, 3
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E8E0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13E960
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13E9A0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+144]
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EA20
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov eax, [rsi+256]
add eax, 7
mov [rsi+256], eax
mov eax, [rsi+256]
sar eax, 3
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EAE0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EB60
mov rax, 0x00007FFDB68E1933
call rax /* OP:0044-0000 */
mov rax, 0x008D0228BAEE96C5
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA13EBE0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+136]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EC60
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13ECA0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+144]
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA13ED20
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13ED60
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EDA0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EE20
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EE60
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EEA0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EEE0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13EF60
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EFA0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13EFE0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F020
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13F0A0
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F0E0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F120
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F160
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+136]
mov [rsi+280], eax
mov rcx, rdi
mov rdx, 0x00000228BA13F1E0
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F220
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F260
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13F2E0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002A7 */
EwigTmFtCCRLCdlaUQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13DBB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0002AC */
FcQtANBtTvIoNumNSm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13F650
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F690
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13F710
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002B5 */
PVtoClGRFOdKPrBcSO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000001
mov rcx, rdi
mov rdx, 0x00000228BA13F7F0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F830
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13F870
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13F8F0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002C6 */
IbuPWRDAHoRxMQKnEo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13FBB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0002CB */
MSQMgeEjBatbGPnBbT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13FA60
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FAA0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FAE0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13FB60
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002D8 */
OWwbtPKkVsRrMGGtAl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13FE20
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0002DD */
LCaEbSFMXnBAKltneq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13FCD0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FD10
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FD50
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA13FDD0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002EA */
MiPQJQKjLBpJQRhtwe:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140090
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0002EF */
JSKXXVPxxNmDPTaiFd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA13FF40
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FF80
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA13FFC0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140040
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0002FC */
LiASNtErBJgXNobrjx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140300
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000301 */
QgLOMkBejnGMCWhLxl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1401B0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1401F0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140230
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1402B0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00030E */
OnBFXBHgiDHcLwFvqu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140570
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000313 */
LxEBADAtxTESNJamnh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA140420
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140460
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1404A0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140520
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000320 */
QWTPlIMAgSNcFxwxsc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1408E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000325 */
NURIDBNsNXiQDHGNqW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA1406D0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140710
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov dword [rsi+136], 0x00000001
mov rcx, rdi
mov rdx, 0x00000228BA140790
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1407D0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140810
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140890
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00033D */
AfUXVpJCxdeoPHIGxc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140BA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000342 */
NWuWldHxwKJxJwreud:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA140A50
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140A90
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140AD0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140B50
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00034F */
MGNQhxBWrplkEMPwRM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140E10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000354 */
QFnexMEvmxgUOIeoew:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA140CC0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140D00
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140D40
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA140DC0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000361 */
MoToHdIrLSwnIakSju:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141080
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000366 */
PVJkKmCEGtLtImfHBS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA140F30
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140F70
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA140FB0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141030
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000373 */
GFosBRLcRCkcCSrvxO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1412F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000378 */
BGwnlHKwxeWfQLqIeD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1411A0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1411E0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA141220
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1412A0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000385 */
FuBaDpEemTwlELmFgH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141560
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00038A */
EilfqAFOhDetJIEFNc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA141410
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA141450
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0050-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA141490
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141510
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000397 */
CmbSMUHFasSkLrnebE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141740
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00039C */
QmVdlUNeTmpoIPmJXK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA1416C0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA141700
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141F30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0003A6 */
GtfVwDInQLmOFkiEuQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA141810
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
xor rax, rax
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA141890
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141F30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0003B1 */
FFQOmtMhoeQBJENqfU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA141960
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1419A0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+264]
shl eax, 3
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
dec dword [rsi+256]
mov rcx, rdi
mov rdx, 0x00000228BA141AA0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+264]
shl eax, 3
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA141B20
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov eax, [rsi+256]
mov [rsi+200], eax
mov rcx, rdi
mov rdx, 0x00000228BA141BA0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA141BE0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+264]
shl eax, 3
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
dec dword [rsi+256]
mov rcx, rdi
mov rdx, 0x00000228BA141CE0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+264]
shl eax, 3
mov [rsi+264], eax
mov rcx, rdi
mov rdx, 0x00000228BA141D60
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov eax, [rsi+256]
mov [rsi+208], eax
mov eax, [rsi+200]
imul eax, [rsi+208]
mov [rsi+216], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+128]
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA141EE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0003E8 */
BCeITVFRWIJjOGeVIt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142220
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0003EE */
CGKeUTBDptnSCTJGbs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov ecx, 256
sub eax, ecx
sub ecx, [rsi+136]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1421D0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0003F5 */
JvfRJrMIqHGeEHiOnP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA1422B0
mov rax, 0x00007FFDB68E5402
call rax /* OP:0187-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1423C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0003FB */
ITwdBCAonviuCKSWwX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142220
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000400 */
IaXTgRNcoptCPbmvWp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE96F5
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142510
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000406 */
GJAijkPSxCTEBskDlv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1424D0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1425F0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142670
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00040F */
QRiRxqPLluNeBePrNi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9711
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1427D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000415 */
HmchxoJJRUplCFoSMS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+232], 0x00000000
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142A10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00041E */
CkREeoAQwtkKQJhoXc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+136]
mov rax, 0x00000228BA142AA0
cmp ecx, [rsi+208]
mov r10, 0x00000228BA143D30
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 000424 */
HkFlTjJFmonmESkpDF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+144], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142BC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000429 */
DVfGJkNHJWgNIJPbRI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+144]
mov rax, 0x00000228BA1430A0
cmp ecx, [rsi+200]
mov r10, 0x00000228BA143B80
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 00042F */
MQmItBCpFjeRBEgRjC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA142C90
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA142D10
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rax, [rsi+96]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA142E10
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rax, [rsi+40]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA142F10
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA142F90
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143050
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000452 */
AxlcinBaXLeFPbtesE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143240
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00045A */
DWagMdCVbliRQBWBdc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143B80
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00045D */
PpFvQmJMboctJoXsvH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA1433B0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA143430
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA143470
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143530
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00046C */
HtdepUPpfcMROQPvKF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA143650
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA1436D0
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rax, [rsi+56]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA143750
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rax, [rsi+64]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA1437D0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA143810
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA143850
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1438D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000488 */
GoTbMbFPQVIfKusqMR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+144]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142BC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00048D */
BaqhrSDhEEUwAJSlde:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143B30
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000493 */
EExomLKHStPKCNvVFN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143D30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000496 */
BgaSQbKXkiNqAQXIoF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA142A10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00049B */
HEEHHrPAwTOXDWROWF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CA60
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00049E */
FUHHLhBUWKOHNJIuTA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA143DC0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143E40
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0004A5 */
OcxSPTCkLRepPIElUO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9730
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA143FA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0004AB */
AIDwMEMFPViLDLXUAR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+232], 0x00000000
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1441E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0004B4 */
QNjfkOJdRUgmDaTACT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+136]
mov rax, 0x00000228BA144270
cmp ecx, [rsi+208]
mov r10, 0x00000228BA14A320
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0004BA */
NQAfNuJXShdnBQUstH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+144], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA144390
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0004BF */
ArLDHHGjiXBJADuiad:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+144]
mov rax, 0x00000228BA144AB0
cmp ecx, [rsi+200]
mov r10, 0x00000228BA14A170
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0004C5 */
PEOiodLGNSqnHLsqIN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA144300
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01E6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA144420
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01E6-0000 */
mov eax, [rsi+168]
add eax, 0
mov [rsi+256], eax
mov rax, [rsi+72]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1444E0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+176]
add eax, 0
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+152], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1446A0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA144720
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rax, [rsi+96]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA144820
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rax, [rsi+40]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA144920
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA1449A0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA144A60
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000502 */
ArVPKIBxNdTsBaCEEW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA144CA0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00050A */
DQghNNKgSinTHHNrRl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00050D */
NjnEEtPMWOXEDbubOI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA144E10
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA144E90
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA144ED0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA144F90
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00051C */
AcmGGBBtnAhSHhgcWk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1450B0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA145130
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rax, [rsi+56]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA1451B0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rax, [rsi+64]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA145230
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+176]
add eax, 0
mov [rsi+296], eax
mov eax, [rsi+296]
imul eax, 8
mov [rsi+296], eax
mov eax, [rsi+168]
add eax, 0
mov [rsi+304], eax
mov eax, [rsi+304]
shl eax, 3
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1453B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00053C */
BBWtwuBDfwgNMJmMEp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+168]
add eax, 0
mov [rsi+256], eax
mov rax, [rsi+72]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA145550
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+176]
add eax, 1
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+152], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA145710
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA145790
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rax, [rsi+96]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA145890
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rax, [rsi+40]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA145990
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA145A10
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA145AD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00056F */
JHXvCWObQHdLJPBCdR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA145D00
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000577 */
EjTNCbGBThKtLmWBJF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00057A */
IosxxKKoNNMxNEmFRr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA145E70
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA145EF0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA145F30
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA145FF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000589 */
DsmSrBDTAXwbHUeVep:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA146110
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA146190
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rax, [rsi+56]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA146210
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rax, [rsi+64]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA146290
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+176]
add eax, 1
mov [rsi+296], eax
mov eax, [rsi+296]
imul eax, 8
mov [rsi+296], eax
mov eax, [rsi+168]
add eax, 0
mov [rsi+304], eax
mov eax, [rsi+304]
shl eax, 3
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA146410
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0005A9 */
PLLIXfLuoEHrNgHlQi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+168]
add eax, 1
mov [rsi+256], eax
mov rax, [rsi+72]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1465B0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+176]
add eax, 0
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+152], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA146770
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA1467F0
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rax, [rsi+96]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA1468F0
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rax, [rsi+40]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA1469F0
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA146A70
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA146B30
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0005DC */
PMjoAtBmKwNHPNfBhS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA146D60
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0005E4 */
IVWGTPNxmkUAPpuDUv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0005E7 */
BdPhoMNuHJBBIrNQiv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA146ED0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA146F50
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA146F90
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA147050
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0005F6 */
FmlFEfBcQpUnNLDAjU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA147170
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA1471F0
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rax, [rsi+56]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA147270
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rax, [rsi+64]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA1472F0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+176]
add eax, 0
mov [rsi+296], eax
mov eax, [rsi+296]
imul eax, 8
mov [rsi+296], eax
mov eax, [rsi+168]
add eax, 1
mov [rsi+304], eax
mov eax, [rsi+304]
shl eax, 3
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA147470
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000616 */
DcjEuWMotmCsGqwkLL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+168]
add eax, 1
mov [rsi+256], eax
mov rax, [rsi+72]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA147610
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+176]
add eax, 1
mov [rsi+264], eax
mov eax, [rsi+256]
add eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+152], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1477D0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA147850
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rax, [rsi+96]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA147950
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rax, [rsi+40]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA147A50
mov rax, 0x00007FFDB68E4D2C
call rax /* OP:0159-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA147AD0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA147B90
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000649 */
JDOuCkLImmmjIFOMFk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA147DC0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000651 */
KAxaKKCdeMwwHfqecT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000654 */
MIhMLrDJhWfEEJLONG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA147F30
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA147FB0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA147FF0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1480B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000663 */
QAklKbMCoieXKMLgIS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA1481D0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+112]
mov [rsi+272], rax
mov rcx, rdi
mov rdx, 0x00000228BA148250
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rax, [rsi+56]
mov [rsi+280], rax
mov rcx, rdi
mov rdx, 0x00000228BA1482D0
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov rax, [rsi+64]
mov [rsi+288], rax
mov rcx, rdi
mov rdx, 0x00000228BA148350
mov rax, 0x00007FFDB68E19EC
call rax /* OP:0150-0000 */
mov eax, [rsi+176]
add eax, 1
mov [rsi+296], eax
mov eax, [rsi+296]
imul eax, 8
mov [rsi+296], eax
mov eax, [rsi+168]
add eax, 1
mov [rsi+304], eax
mov eax, [rsi+304]
shl eax, 3
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1484D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000683 */
KHDjltGNwRVUQJFIGq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA148670
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1486B0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1486F0
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA1487B0
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rcx, rdi
mov rdx, 0x00000228BA148870
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA1488F0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1489B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0006AC */
MTOiiQBKCeRLOvXiuB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA148B90
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0006B4 */
PJsaImNGUpAUQlqRDi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0006B7 */
MUsDUuPlKHajDNthQP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA148D00
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA148D40
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA148DC0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA148E00
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA148EC0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0006CA */
EcuXExCpbkMNIUjKAT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA149030
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149070
mov rax, 0x00007FFDB68E52CC
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1490B0
mov rax, 0x00007FFDB68E5439
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1490F0
mov rax, 0x00007FFDB68E5439
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149130
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149170
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1491F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0006E8 */
QkvGITAtWFRaBTkKNc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA149360
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1493A0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1493E0
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA1494A0
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rcx, rdi
mov rdx, 0x00000228BA149560
mov rax, 0x00007FFDB68E6F37
call rax /* OP:017F-0000 */
mov eax, [rsi+136]
imul eax, [rsi+200]
mov [rsi+296], eax
mov rcx, rdi
mov rdx, 0x00000228BA1495E0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1496A0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000711 */
LTTUwmMJWGUnGOVpIt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA149880
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000719 */
PKAdKjNktDJGHAOAfQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A170
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00071C */
CxQGTSAgSllqMAKjVc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA1499F0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149A30
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA149AB0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149AF0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA149BB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00072F */
AiGTQFDjQeHeAbdPPV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA149D20
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149D60
mov rax, 0x00007FFDB68E52CC
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149DA0
mov rax, 0x00007FFDB68E5439
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149DE0
mov rax, 0x00007FFDB68E5439
call rax /* OP:017F-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149E20
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA149E60
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA149EE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00074D */
ITgFNSAQtawSBnGOiu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+144]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA144390
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000752 */
OuqXNfEAErMkFolnbj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A120
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000758 */
LSufsSHXShsbCTcjWc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A320
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00075B */
AqibkRJqBuALLBtoGs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1441E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000760 */
JrEVbxAhwNLdKiDMti:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CA60
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000763 */
FFrXXkKmxxbMCqtkpn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9751
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A470
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000769 */
ErTIOUHpjlkJAQfHDT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+232], 0x00000000
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A6B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000772 */
PeQXQrKnwPFaOgikVx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+136]
mov rax, 0x00000228BA14A740
cmp ecx, [rsi+216]
mov r10, 0x00000228BA14CA60
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 000778 */
QrAaTvJvlEUhJTkIJX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+144], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A860
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00077D */
MICkpfAvFNaSCAEgVP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+144]
mov rax, 0x00000228BA14A8F0
cmp ecx, [rsi+224]
mov r10, 0x00000228BA14C7A0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 000783 */
KxTtQEDFCvOFNQqTkl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+152], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14AA90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000788 */
QcgVNDFXtTEKEwCHXQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+152]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA14A9C0
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov ecx, [rsi+256]
mov rax, 0x00000228BA14AB20
cmp ecx, [rsi+264]
mov r10, 0x00000228BA14C520
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 000792 */
MLwKQLLaaTpfCESvRa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+160], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14ACC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000797 */
LtaacpMVglkVGiuUdA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+160]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA14ABF0
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov ecx, [rsi+256]
mov rax, 0x00000228BA14ADE0
cmp ecx, [rsi+264]
mov r10, 0x00000228BA14C2A0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_MarkerSOS 0007A1 */
IWUBDDOsliovIbPSMn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14AD90
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0007A7 */
FIStpiGdeMVcEqcjDQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C2A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 0007AA */
AnqXpHPdoljjNsdnCO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA14AF00
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14AF40
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14AF80
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14AFC0
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B000
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+168], eax
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdx, 0x00000228BA14B100
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B140
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B180
mov rax, 0x00007FFDB68E1721
call rax /* OP:0170-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B1C0
mov rax, 0x00007FFDB68E110E
call rax /* OP:0172-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B200
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+256]
imul eax, [rsi+264]
mov [rsi+256], eax
mov eax, [rsi+256]
mov [rsi+176], eax
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+0]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA14B340
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B380
mov rax, 0x00007FFDB68E1406
call rax /* OP:0130-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B3C0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14B400
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+272]
shl eax, 1
mov [rsi+272], eax
mov eax, [rsi+272]
add eax, 0
mov [rsi+272], eax
mov rcx, rdi
mov rdx, 0x00000228BA14B4C0
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+280]
shl eax, 1
mov [rsi+280], eax
inc dword [rsi+280]
mov rcx, rdi
mov rdx, 0x00000228BA14B580
mov rax, 0x00007FFDB68E6F64
call rax /* OP:017E-0000 */
mov eax, [rsi+136]
mov [rsi+296], eax
mov eax, [rsi+216]
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14B680
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 0007FD */
DDSBuKARkExUGdTfLD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+256]
mov [rsi+232], eax
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14B8E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000805 */
AsPqpqFtTrkJEQpANM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C2A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000808 */
LweiUuQIeQLBHLAGsV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+256], rax
mov rcx, rdi
mov rdx, 0x00000228BA14BA50
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BA90
mov rax, 0x00007FFDB68E1406
call rax /* OP:0130-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BAD0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA14BB50
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BB90
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+232]
mov [rsi+280], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14BC50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00081D */
KrKAOPGEjEMeJCkska:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+240]
mov [rsi+256], rax
mov rax, [rsi+16]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA14BDC0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BE00
mov rax, 0x00007FFDB68E531C
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BE40
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14BE80
mov rax, 0x00007FFDB68E548E
call rax /* OP:017E-0000 */
mov eax, [rsi+176]
add eax, [rsi+160]
mov [rsi+296], eax
mov eax, [rsi+296]
imul eax, 8
mov [rsi+296], eax
mov eax, [rsi+168]
add eax, [rsi+152]
mov [rsi+304], eax
mov eax, [rsi+304]
shl eax, 3
mov [rsi+304], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C000
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00083F */
BaLXnGCNctWxGFXBiR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+160]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14ACC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000844 */
GdHcmWPpfNvmHAGbxf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C250
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00084A */
QITcHCGPAUufDQrFAJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C520
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00084D */
CnaKlqJqMXPDDxtHlW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+152]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14AA90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000852 */
NvtRgaBQtdWOBMbGaH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C4D0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000858 */
PBbCcaBUbedwJQDbJv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C7A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00085B */
CDEECrQEVBjFGhETeo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+144]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A860
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000860 */
OCwJVpIFHNRXGocaMX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14C750
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000866 */
MEvOwJJpbwetOcIgGv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CA60
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000869 */
ABQqcbMOscDCEUORIN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14A6B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00086E */
IKkpNfCAcWCeNBskrk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9773
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CA10
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000874 */
JLGVmlEVmHSGADJFhv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+232]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+232]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CB30
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 00087A */
IWBvUvQiERonPqTctD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9795
mov [rsi+256], rax
xor rax, rax
mov [rsi+264], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14CC90
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_MarkerSOS 000880 */
LsKNpIFBPHIPLerfaK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+256], 0xFFFFFFFF
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14D4F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 000887 */
EUwQvDCKfILUKFfiaF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14CE00
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rax, [rsi+248]
mov [rsi+264], rax
mov rcx, rdi
mov rdx, 0x00000228BA14CE80
mov rax, 0x00007FFDB68E372E
call rax /* OP:01B4-0000 */
mov eax, [rsi+256]
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+256], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14D4F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00089B */
HDBhLaLMQDWiNvVVoC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14D4F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_MarkerSOS 00089D */
OjJdOANjMrHAQfJrNr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14D060
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D0A0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D0E0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D120
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D160
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D1A0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D1E0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D220
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D260
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D2A0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D2E0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D320
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D360
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D3A0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D3E0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14D420
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14D4A0
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

/* PDJHUFF_InitStream 000000 */
BJwGhxHmVgwLKMEXrd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA14E7B0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
xor rax, rax
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA14E830
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rax, [rsi+8]
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA14E8B0
mov rax, 0x00007FFDB68E1915
call rax /* OP:016D-0000 */
mov rax, [rsi+8]
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA14E930
mov rax, 0x00007FFDB68E1915
call rax /* OP:016D-0000 */
mov rax, [rsi+0]
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14E9F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_InitStream 000016 */
IEdEaAPDUDeELhTRbe:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14E9B0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14EB30
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
shl eax, 8
mov [rsi+16], eax
mov rax, [rsi+0]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14EC30
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_InitStream 000022 */
OUxWGaJDlShmPoRfvG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
or eax, [rsi+24]
mov [rsi+16], eax
mov rcx, rdi
mov rdx, 0x00000228BA14ED10
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14ED50
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
shl eax, 8
mov [rsi+16], eax
mov rax, [rsi+0]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14EE50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_InitStream 00002F */
IKtHxxGPiLpwANRPeh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
or eax, [rsi+24]
mov [rsi+16], eax
mov rcx, rdi
mov rdx, 0x00000228BA14EF30
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14EF70
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+16]
shl eax, 8
mov [rsi+16], eax
mov rax, [rsi+0]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14F070
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_InitStream 00003C */
JhrxtWJXoWlpMBKlWi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
or eax, [rsi+24]
mov [rsi+16], eax
mov rcx, rdi
mov rdx, 0x00000228BA14F150
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14F1D0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_NextByte 000000 */
HXSqoeJvMSBCKTwIps:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14F190
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14F2F0
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+32]
lea rdx, [rax+1]
mov [rsi+32], rdx
mov rcx, rdi
mov rdx, 0x00000228BA14F370
mov rax, 0x00007FFDB68E1915
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14F3B0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+24]
mov [rsi+0], eax
mov eax, [rsi+0]
mov ecx, 255
sub eax, ecx
sub ecx, [rsi+0]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+24], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14F4B0
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJHUFF_NextByte 000016 */
KHilULDSPRnkLEdMTV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14F470
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14F5E0
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+32]
lea rdx, [rax+1]
mov [rsi+32], rdx
mov rcx, rdi
mov rdx, 0x00000228BA14F660
mov rax, 0x00007FFDB68E1915
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14F6A0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+24]
mov [rsi+8], eax
mov eax, [rsi+8]
mov [rsi+24], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14F7A0
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJHUFF_NextByte 00002B */
LDLJAWKNwJDsKcxFVR:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE97B9
mov [rsi+24], rax
xor rax, rax
mov [rsi+32], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14F950
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_NextByte 000030 */
CwmaGqBmauKxLutSpF:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14F910
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA14FA30
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14FAB0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_NextByte 000037 */
QehcwxJPqlpLKAWCbr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14FB90
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000000 */
LpgNfcJQoJRuHtlFNV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+8], 0x00000001
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14FE10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 000004 */
QUvCGhCLGeAANqRLtX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov ecx, 64
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14FDC0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00000A */
LlSUDOCUQwNMKoRRJJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
xor rax, rax
mov [rsi+88], rax
mov rax, [rsi+40]
mov [rsi+96], rax
mov eax, [rsi+8]
mov [rsi+104], eax
mov rax, [rsi+96]
movsxd rcx, [rsi+104]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+rcx*4], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150030
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 000012 */
CMEMLuMIKxtPHUjNDA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+8]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14FE10
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 000017 */
OaRHfCMFlRJRQgmoSU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1500C0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150100
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150140
mov rax, 0x00007FFDB68E1375
call rax /* OP:0135-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150180
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+88]
mov [rsi+0], rax
mov rax, [rsi+40]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA150240
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov rax, [rsi+32]
mov [rsi+96], rax
mov eax, [rsi+48]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150340
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00002F */
IMOxdwAjfbqkDoJtlv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+104], rax
mov rcx, rdi
mov rdx, 0x00000228BA150480
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+96]
imul eax, [rsi+104]
mov [rsi+96], eax
mov eax, [rsi+88]
add eax, [rsi+96]
mov [rsi+88], eax
mov rax, [rsi+40]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA150580
mov rax, 0x00007FFDB68E268F
call rax /* OP:008C-0154 */
mov dword [rsi+8], 0x00000001
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1507B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 00003F */
CaAIiJJmPIqaNpFbKQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov ecx, 64
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150760
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000045 */
AXaVHXGOMmCCACsIPd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+32]
mov [rsi+88], rax
mov eax, [rsi+56]
mov [rsi+96], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1508C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00004B */
GDfNqUNErLnDFUbdQC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+88]
mov [rsi+16], eax
mov eax, [rsi+16]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150A20
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000052 */
PKRIFkHKcxihCKMsiB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150B40
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000057 */
DARcPQLJvSdSBbbpao:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE97C8
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA150C20
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+16]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA150CA0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150CE0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+16]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA150D60
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150DA0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA150E20
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150E60
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+80]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA150EE0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA150F20
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA150FA0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000079 */
DMTpdQLVlUnFMijVTQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151100
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00007B */
ADLgVIGfMsPOQFIBsB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1520B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 00007E */
AhKmJDPWtfdhCxjtXi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA150F60
mov rax, 0x00007FFDB68E2185
call rax /* OP:01C7-0000 */
mov eax, [rsi+88]
and eax, 15
mov [rsi+88], eax
mov eax, [rsi+88]
add eax, [rsi+8]
mov [rsi+8], eax
mov eax, [rsi+16]
and eax, 15
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151370
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00008D */
BhdQWcPVCLnLHivRoK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151F50
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 000090 */
MsFreMBkNdVEMdmvxP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov ecx, 64
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151520
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000096 */
QcLdmWOXPpFmFlbXQg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1520B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 000099 */
BMIibIFwwtGDKNkLkn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
and eax, 15
mov [rsi+16], eax
mov rax, [rsi+32]
mov [rsi+88], rax
mov eax, [rsi+16]
mov [rsi+96], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151750
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 0000A3 */
JgjHsDGAfiemEpLdQx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+88]
mov [rsi+24], eax
mov eax, [rsi+24]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA151870
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1518B0
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1518F0
mov rax, 0x00007FFDB68E74AF
call rax /* OP:0006-0000 */
mov eax, [rsi+88]
sar eax, 31
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA151970
mov rax, 0x00007FFDB68E10B9
call rax /* OP:001C-0000 */
mov dword [rsi+96], 0xFFFFFFFF
mov rcx, rdi
mov rdx, 0x00000228BA1519F0
mov rax, 0x00007FFDB68E132A
call rax /* OP:00BE-0000 */
inc dword [rsi+96]
mov eax, [rsi+88]
and eax, [rsi+96]
mov [rsi+88], eax
mov eax, [rsi+88]
add eax, [rsi+24]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA151AF0
mov rax, 0x00007FFDB68E1366
call rax /* OP:007E-0000 */
mov eax, [rsi+8]
mov [rsi+96], eax
mov rcx, rdi
mov rdx, 0x00000228BA151B70
mov rax, 0x00007FFDB68E1424
call rax /* OP:0040-0000 */
mov eax, [rsi+88]
mov [rsi+16], eax
mov rax, [rsi+0]
mov [rsi+88], rax
mov eax, [rsi+16]
mov [rsi+96], eax
mov rax, [rsi+88]
movsxd rcx, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+88], edx
mov rcx, rdi
mov rdx, 0x00000228BA151CB0
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov rax, [rsi+40]
mov [rsi+96], rax
mov eax, [rsi+16]
mov [rsi+104], eax
mov rax, [rsi+96]
movsxd rcx, [rsi+104]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+rcx*4], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA151F50
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 0000CF */
OWEfhjNLDtMnQFFJpc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+8]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1507B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeBlock 0000D4 */
LLfTHPIDFnTCDMnKuA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov ecx, 64
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152060
mov rax, 0x00007FFDB68E4CF0
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 0000DA */
OuQKcgOJGrNoHuhoUA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE97EF
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA152140
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+16]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA1521C0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152200
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+16]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA152280
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1522C0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+8]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA152340
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152380
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA152400
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152440
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov eax, [rsi+80]
mov [rsi+104], eax
mov rcx, rdi
mov rdx, 0x00000228BA1524C0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152500
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152580
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000103 */
HoDBPRGmsKkRDuNphV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE981D
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA152700
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152740
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152780
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1527C0
mov rax, 0x00007FFDB68E372E
call rax /* OP:01B4-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152800
mov rax, 0x00007FFDB68E4D18
call rax /* OP:0111-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA152840
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1528C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000118 */
DipuVhKNDMGGNEgijt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1529F0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00011A */
IahIgNMwruDjPPIjDa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
mov ecx, 1
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152B10
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 00011F */
NSGQUTMnRUshAukkis:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152BF0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_DecodeBlock 000121 */
EMPxliFUlgjMAmaxms:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152CD0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_DecodeDiffDC 000000 */
IvnVdDJloToSQQkKiE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+16]
mov [rsi+32], rax
mov eax, [rsi+24]
mov [rsi+40], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA152F20
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeDiffDC 000006 */
HGKAHvICaHoPNpavnq:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+0], eax
mov rax, [rsi+16]
mov [rsi+32], rax
mov eax, [rsi+0]
mov [rsi+40], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1530C0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeDiffDC 00000E */
LNuJwHIUMWfiImFTpO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
mov [rsi+8], eax
mov eax, [rsi+8]
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA1531E0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153220
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153260
mov rax, 0x00007FFDB68E74AF
call rax /* OP:0006-0000 */
mov eax, [rsi+32]
sar eax, 31
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA1532E0
mov rax, 0x00007FFDB68E10B9
call rax /* OP:001C-0000 */
mov dword [rsi+40], 0xFFFFFFFF
mov rcx, rdi
mov rdx, 0x00000228BA153360
mov rax, 0x00007FFDB68E132A
call rax /* OP:00BE-0000 */
inc dword [rsi+40]
mov eax, [rsi+32]
and eax, [rsi+40]
mov [rsi+32], eax
mov eax, [rsi+32]
add eax, [rsi+8]
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1534A0
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 000000 */
FCLPhgPcuPNpIDufVA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA153460
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153620
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153660
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+56]
sub eax, [rsi+64]
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA1536E0
mov rax, 0x00007FFDB68E749B
call rax /* OP:0174-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153720
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov eax, [rsi+48]
mov [rsi+0], eax
mov rcx, rdi
mov rdx, 0x00000228BA1537A0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01E6-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1537E0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+40]
or eax, [rsi+0]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movsxw edx, [rax+rcx*2]
mov [rsi+48], edx
mov eax, [rsi+48]
mov [rsi+8], eax
mov rcx, rdi
mov rdx, 0x00000228BA1538E0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+40]
or eax, [rsi+8]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+48], edx
mov eax, [rsi+48]
mov [rsi+16], eax
mov eax, [rsi+16]
mov ecx, 8
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+48], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA153A60
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 00002D */
QGadOmArBKfOLvhvjD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA153A20
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153BE0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153C20
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153C60
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153CA0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA153D20
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 00003D */
EbbmnJGhQpPWHrXxQE:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA153CE0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+48]
shl eax, 8
mov [rsi+48], eax
mov rax, [rsi+32]
mov [rsi+56], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA153EC0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 000046 */
FdEQOxEbkvtuJlWbjf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+48]
or eax, [rsi+56]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA153FA0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA153FE0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+48]
sub eax, 8
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA154060
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1541C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 000053 */
GAoGmpEUKWwPKwqlrO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA154170
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 000055 */
HgCicUHhdcuiMFktXn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA154130
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154250
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154290
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+56]
sub eax, [rsi+64]
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA154310
mov rax, 0x00007FFDB68E749B
call rax /* OP:0174-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154350
mov rax, 0x00007FFDB68E4A3E
call rax /* OP:009F-0000 */
mov eax, [rsi+48]
mov [rsi+0], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1546C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 000065 */
LuPSqsCkHaRQCBDLfx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+40]
or eax, [rsi+8]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA1544F0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+24]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+48], edx
mov eax, [rsi+48]
mov [rsi+16], eax
mov eax, [rsi+16]
mov [rsi+48], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA154670
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 000077 */
PTeclmPEcNaXFtqQWD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1555F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 00007A */
QXFNKdGfTCpFBJkVjr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA1547E0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154820
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154860
mov rax, 0x00007FFDB68E106E
call rax /* OP:0007-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1548A0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+24]
mov [rsi+64], eax
mov rax, [rsi+56]
movsxd rcx, [rsi+64]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxw edx, [rax+rcx*2]
mov [rsi+56], edx
mov ecx, [rsi+48]
mov rax, 0x00000228BA154C60
cmp ecx, [rsi+56]
mov r10, 0x00000228BA154E90
cmove rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJHUFF_DecodeSymbol 00008D */
DIpQfkONpbGiCquFMP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA154960
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov eax, [rsi+24]
mov [rsi+56], eax
mov rax, [rsi+48]
movsxd rcx, [rsi+56]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movsxw edx, [rax+rcx*2]
mov [rsi+48], edx
mov eax, [rsi+48]
mov [rsi+8], eax
mov eax, [rsi+8]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+8]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+48], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA154C10
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 00009B */
NjjUoVNSJbxrJMPUQK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1555F0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 00009E */
QlwesFPbALnFFkPgDl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1546C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 0000A1 */
FhirQsIXwaTCJQAJbd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA154BD0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154E10
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154E50
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155030
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 0000AA */
DWmnXUKJOQKhQTClFs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA154F20
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA154F60
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA154FE0
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 0000B2 */
ItTWWRGsCrbmKknlpS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA154FA0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+48]
shl eax, 8
mov [rsi+48], eax
mov rax, [rsi+32]
mov [rsi+56], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155180
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 0000BB */
PUEpOPKJLtidAvstSi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+48]
or eax, [rsi+56]
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA155260
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1552A0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+48]
sub eax, 8
mov [rsi+48], eax
mov rcx, rdi
mov rdx, 0x00000228BA155320
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155030
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 0000CA */
NEokwxCmVOMqMsgtOf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155430
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJHUFF_DecodeSymbol 0000CC */
PSBRQBBEWjfrIHbDsp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1546C0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_DecodeSymbol 0000CF */
KAoIfsLqjvaPJENOPS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1555A0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_ReadNBits 000000 */
BKExljKOJQMSQSBuJC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+16]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+16]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+24], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155770
mov rax, 0x00007FFDB68E4D3B
add rsp, 504
jmp rax

/* PDJHUFF_ReadNBits 000005 */
LcHQscMjsGePOrDkqf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155850
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJHUFF_ReadNBits 000007 */
KpJksaPdROGTJGxRNm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA155730
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155930
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155970
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1559B0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+32]
sub eax, [rsi+40]
mov [rsi+32], eax
mov rcx, rdi
mov rdx, 0x00000228BA155A30
mov rax, 0x00007FFDB68E749B
call rax /* OP:0174-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155A70
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155AB0
mov rax, 0x00007FFDB68E132A
call rax /* OP:00BE-0000 */
dec dword [rsi+32]
mov eax, [rsi+24]
and eax, [rsi+32]
mov [rsi+24], eax
mov eax, [rsi+24]
mov [rsi+0], eax
mov rcx, rdi
mov rdx, 0x00000228BA155BB0
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155BF0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155C30
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155E90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_ReadNBits 000026 */
MpkgqBDxTOWTFHCjXG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA155D80
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA155DC0
mov rax, 0x00007FFDB68E1F14
call rax /* OP:0068-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155E40
mov rax, 0x00007FFDB68E4D72
add rsp, 504
jmp rax

/* PDJHUFF_ReadNBits 00002E */
PiDTHbFQlEStHfqtRG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA155E00
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+24]
shl eax, 8
mov [rsi+24], eax
mov rax, [rsi+8]
mov [rsi+32], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155FE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJHUFF_ReadNBits 000037 */
LKmEsXOdfkdgFKJQqn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+24]
or eax, [rsi+32]
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA1560C0
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA156100
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov eax, [rsi+24]
sub eax, 8
mov [rsi+24], eax
mov rcx, rdi
mov rdx, 0x00000228BA156180
mov rax, 0x00007FFDB68E19BF
call rax /* OP:016D-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA155E90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJHUFF_ReadNBits 000046 */
PraKjNJXaAEqARdMeU:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA156290
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000000 */
KMrtSnHBcSehPVlsxD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA156250
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1563C0
mov rax, 0x00007FFDB68E1E74
call rax /* OP:0141-0000 */
mov eax, [rsi+80]
mov ecx, 2
sub eax, ecx
sub ecx, [rsi+80]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA156480
mov rax, 0x00007FFDB68E4CD7
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000010 */
LIRDKqMhDPVJPnwJFK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA156560
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov eax, [rsi+88]
imul eax, 8281
mov [rsi+88], eax
mov eax, [rsi+88]
add eax, 32768
mov [rsi+88], eax
mov eax, [rsi+88]
sar eax, 16
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA156660
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+88]
mov [rsi+48], eax
mov rax, [rsi+64]
mov [rsi+16], rax
mov rax, [rsi+16]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+256]
mov [rsi+88], rdx
mov rax, [rsi+88]
mov [rsi+24], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA156A30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT 00002F */
KQihVLKDwpTpAmkMbg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+16]
mov [rsi+88], rax
mov rax, [rsi+24]
mov [rsi+96], rax
mov rax, [rsi+88]
mov rcx, [rsi+96]
sub rax, rcx
sub rcx, [rsi+88]
sar rax, 63
shr rcx, 63
or eax, ecx
mov [rsi+88], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1569E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000038 */
NhXsqnDLXaadCAJEBB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA156B00
mov rax, 0x00007FFDB68E268F
call rax /* OP:008C-0154 */
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+4], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+8], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+12], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+16], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+20], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+24], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+28], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+32], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+36], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+40], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+44], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+48], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+52], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+56], edx
mov eax, [rsi+48]
mov [rsi+88], eax
mov rax, [rsi+16]
mov [rsi+96], rax
mov rax, [rsi+96]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+88]
mov [rax+60], edx
mov rax, [rsi+16]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+64]
mov [rsi+88], rdx
mov rax, [rsi+88]
mov [rsi+16], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA156A30
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT 0000B3 */
FMMofIPfdLoMFOkUUS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159FB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT 0000B6 */
CSKbrIIcAecMNgpeql:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+0]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA157AD0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA157B10
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA157B90
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0000C5 */
CihFBfECkGsUNHnUdl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+32]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA157CF0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA157D30
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA157DB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0000D4 */
PwLNhNDuPwhlBrrLPS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+64]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA157F10
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA157F50
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA157FD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0000E3 */
PxDDxeFxsILXNvurIL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+96]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA158130
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA158170
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1581F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0000F2 */
OFWedSCwoOTNJuhQbn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+128]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA158350
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA158390
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158410
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000101 */
NcqDkxOaLbEpIqNaSo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+160]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA158570
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1585B0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158630
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000110 */
MlnTUGJHhbJsBKpcfx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+192]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA158790
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1587D0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158850
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 00011F */
KGwvhHEeDNhBHuNscm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+88], rax
mov rax, [rsi+88]
lea rdx, [rax+224]
mov [rsi+88], rdx
mov rax, [rsi+0]
mov [rsi+96], rax
mov rcx, rdi
mov rdx, 0x00000228BA1589B0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1589F0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158A70
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 00012E */
JEWMJWFxauKpDnXcPt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA158B50
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA158B90
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+0]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158CD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 00013F */
CAgfaHJMqvxxFmqSeM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA158DB0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA158DF0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+4]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA158F30
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000150 */
GSVXRpCqGhKHBJTgjh:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA159010
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA159050
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+8]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159190
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000161 */
MkiCurKxAgikPfqHpA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA159270
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1592B0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+12]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1593F0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000172 */
QBUjTFPVNXXiGlVKFW:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA1594D0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA159510
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+16]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159650
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000183 */
ORcvUpBqnFhSOwKuEx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA159730
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA159770
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+20]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1598B0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 000194 */
PajKdcHaoMriQVdIWr:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA159990
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1599D0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+24]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159B10
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0001A5 */
ACMSEMAshdxfQIQJnp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+88], rax
mov rcx, rdi
mov rdx, 0x00000228BA159BF0
mov rax, 0x00007FFDB68E1A28
call rax /* OP:0138-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA159C30
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+64]
mov [rsi+96], rax
mov rax, [rsi+96]
lea rdx, [rax+28]
mov [rsi+96], rdx
mov eax, [rsi+72]
mov [rsi+104], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159D70
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_TransIDCT 0001B6 */
NPIhcLBqQoGcEHwPRT:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159FB0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT 0001B8 */
EcsWQQLlCrvWQIWAQo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA159D30
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA159EE0
mov rax, 0x00007FFDB68E29A5
call rax /* OP:0143-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA159F60
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000000 */
HJxNMVLcgmxHJSasFd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+144]
add eax, 8
mov [rsi+160], eax
mov eax, [rsi+128]
mov [rsi+168], eax
mov ecx, [rsi+160]
mov rax, 0x00000228BA15A5A0
cmp ecx, [rsi+168]
mov r10, 0x00000228BA15A630
cmovg rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_CopyOutBlock8B 00000A */
IQmGmrLMfbQEARWTSo:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+152]
add eax, 8
mov [rsi+160], eax
mov eax, [rsi+136]
mov [rsi+168], eax
mov ecx, [rsi+160]
mov rax, 0x00000228BA15A630
cmp ecx, [rsi+168]
mov r10, 0x00000228BA15BB60
cmovle rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_CopyOutBlock8B 000014 */
BTJbOpHiSuSfHbSEjd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+80], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15A790
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000019 */
QKSGODDnxUtBFOGqth:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+80]
mov ecx, 8
sub eax, ecx
sub ecx, [rsi+80]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+160], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15A740
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 00001F */
KvLoMrQpHNDfDrQJvG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+152]
add eax, [rsi+80]
mov [rsi+160], eax
mov eax, [rsi+136]
mov [rsi+168], eax
mov ecx, [rsi+160]
mov rax, 0x00000228BA15A980
cmp ecx, [rsi+168]
mov r10, 0x00000228BA15ACD0
cmovl rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_CopyOutBlock8B 000029 */
CwDcjpIMTFLRNCCQRp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B9B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 00002C */
MWpUqxAfKpCMNBNCJC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+160], rax
mov rcx, rdi
mov rdx, 0x00000228BA15AA10
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx*4]
mov [rsi+160], rdx
mov rax, [rsi+160]
mov [rsi+0], rax
mov rax, [rsi+120]
mov [rsi+160], rax
mov eax, [rsi+152]
add eax, [rsi+80]
mov [rsi+168], eax
mov rcx, rdi
mov rdx, 0x00000228BA15AB50
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx]
mov [rsi+160], rdx
mov eax, [rsi+144]
mov [rsi+168], eax
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx]
mov [rsi+160], rdx
mov rax, [rsi+160]
mov [rsi+8], rax
mov dword [rsi+88], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15AEA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 00004E */
JsGtIGEtDPNCMJpDbw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+88]
mov ecx, 8
sub eax, ecx
sub ecx, [rsi+88]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+160], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15AE50
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000054 */
NoDgVDOqlQaCAiDMFL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+144]
add eax, [rsi+88]
mov [rsi+160], eax
mov eax, [rsi+128]
mov [rsi+168], eax
mov ecx, [rsi+160]
mov rax, 0x00000228BA15B090
cmp ecx, [rsi+168]
mov r10, 0x00000228BA15B330
cmovl rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_CopyOutBlock8B 00005E */
CPmkHMBjAWQIOgqDtx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B8E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000061 */
FHPCqhAxDdTCPEGPeJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+160], rax
mov rcx, rdi
mov rdx, 0x00000228BA15B120
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+168]
lea rdx, [rax+4]
mov [rsi+168], rdx
mov rax, [rsi+168]
mov [rsi+0], rax
mov rcx, rdi
mov rdx, 0x00000228BA15B1E0
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov eax, [rsi+160]
mov [rsi+96], eax
mov eax, [rsi+96]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+96]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+160], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B2E0
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000075 */
NUpHhpQRRthmJmaeXm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+96], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B570
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 00007A */
OKuJtaGqJBQjMsigra:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+96]
mov ecx, 255
sub eax, ecx
sub ecx, [rsi+96]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+160], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B520
mov rax, 0x00007FFDB68E4CF0
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000080 */
KCrpbGKAsAdiGOSSHu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+96], 0x000000FF
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B810
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000085 */
GFAhxSPrlKQEQUlvcO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+96]
mov [rsi+160], eax
mov rcx, rdi
mov rdx, 0x00000228BA15B6D0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA15B710
mov rax, 0x00007FFDB68E1F69
call rax /* OP:01B3-0000 */
mov rax, [rsi+8]
mov [rsi+160], rax
mov rax, [rsi+160]
lea rdx, [rax+1]
mov [rsi+160], rdx
mov rax, [rsi+160]
mov [rsi+8], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15B8E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000094 */
OEgaKEDUXGoRGIvhxi:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+88]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15AEA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000099 */
HDlAPgMPdSmuCnNxWX:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+80]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15A790
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 00009E */
FMHBENEADRbNKHcCTj:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15BA80
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 00009F */
AMCgMuPassAnHAOXXA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov dword [rsi+80], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15BCC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 0000A4 */
DKhfPeQkdKOrMktfPB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+80]
mov ecx, 8
sub eax, ecx
sub ecx, [rsi+80]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+160], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15BC70
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 0000AA */
MlaumKJFsOgkGUOXJM:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+160], rax
mov rcx, rdi
mov rdx, 0x00000228BA15BD50
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx*4]
mov [rsi+160], rdx
mov rax, [rsi+160]
mov [rsi+0], rax
mov rax, [rsi+120]
mov [rsi+160], rax
mov eax, [rsi+152]
add eax, [rsi+80]
mov [rsi+168], eax
mov rcx, rdi
mov rdx, 0x00000228BA15BE90
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx]
mov [rsi+160], rdx
mov eax, [rsi+144]
mov [rsi+168], eax
mov rax, [rsi+160]
movsxd rcx, [rsi+168]
lea rdx, [rax+rcx]
mov [rsi+160], rdx
mov rax, [rsi+160]
mov [rsi+8], rax
mov rax, [rsi+0]
mov [rsi+160], rax
mov rcx, rdi
mov rdx, 0x00000228BA15C010
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15C090
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 0000CE */
IkDQlqDHXDsFNPUFGp:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15C050
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rcx, rdi
mov rdx, 0x00000228BA15C230
mov rax, 0x00007FFDB68E2F9A
call rax /* OP:008C-015E */
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+4]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15C330
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 0000DB */
KHJMLuAGuRMKCMnBmH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15C2F0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+1], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+8]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15C550
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 0000E8 */
LeIITkCJOckNFCEJKv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15C510
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+2], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+12]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15C770
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 0000F5 */
GNSiaBOhiHBDJWiEWn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15C730
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+3], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+16]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15C990
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000102 */
AnwtBLNqnQcgHjlRmm:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15C950
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+4], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+20]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15CBB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 00010F */
GCqnvmCTMJNuJCgJST:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15CB70
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+5], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+24]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15CDD0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 00011C */
QBqPkHCrRRgHDAUoxa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15CD90
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+6], dl
mov rax, [rsi+0]
mov [rsi+160], rax
mov rax, [rsi+160]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+28]
mov [rsi+160], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15CFF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_CopyOutBlock8B 000129 */
PrOAxUAPjVTvCdfqoc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA15CFB0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+8]
mov [rsi+168], rax
mov rax, [rsi+168]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+160]
mov [rax+7], dl
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D220
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000130 */
QLUjNOOgnvBPDjCdGG:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+80]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15BCC0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_CopyOutBlock8B 000135 */
KDpFMqFIiplDBArESs:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D2F0
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* clamp255 000000 */
JsMDusNqlrqaJgDFUA:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
mov ecx, 0
sub eax, ecx
sub ecx, [rsi+0]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D520
mov rax, 0x00007FFDB68E4CCD
add rsp, 504
jmp rax

/* clamp255 000004 */
CarXLpNIgcESEHXhMu:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D600
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* clamp255 000006 */
ONGUPmCleTklDbmSlS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+0]
mov ecx, 255
sub eax, ecx
sub ecx, [rsi+0]
sar eax, 31
shr ecx, 31
or eax, ecx
mov [rsi+8], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D720
mov rax, 0x00007FFDB68E4CF0
add rsp, 504
jmp rax

/* clamp255 00000B */
EbBtWfGbLmdmAOqcEQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D800
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* clamp255 00000E */
GfPJcEBnrgOWEMJcUv:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15D8E0
mov rax, 0x00007FFDB68E449E
add rsp, 504
jmp rax

/* PDJPG_TransIDCT_Horiz 000000 */
MuRUMEMtecKPHmRUVQ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+128], rax
mov rcx, rdi
mov rdx, 0x00000228BA15DA00
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov eax, [rsi+128]
imul eax, 91
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+0], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+16]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 91
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+8], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+8]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 118
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+16], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+8]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 49
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+24], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+24]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 118
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+32], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+24]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 49
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+40], eax
mov eax, [rsi+0]
add eax, [rsi+16]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA15E000
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA15E040
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+128]
mov [rsi+48], eax
mov eax, [rsi+0]
add eax, [rsi+24]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA15E100
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA15E140
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov eax, [rsi+128]
mov [rsi+56], eax
mov eax, [rsi+0]
sub eax, [rsi+24]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA15E200
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA15E240
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+128]
mov [rsi+64], eax
mov eax, [rsi+0]
sub eax, [rsi+16]
mov [rsi+128], eax
mov rcx, rdi
mov rdx, 0x00000228BA15E300
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA15E340
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov eax, [rsi+128]
mov [rsi+72], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+4]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 126
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+12]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 106
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+20]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 71
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+28]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 25
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+80], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+4]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 106
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+12]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 25
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15FC60
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT_Horiz 000094 */
NBmbRSGltheNAmoiKa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+20]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 126
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+28]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 71
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+88], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+4]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 71
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+12]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 126
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+20]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 25
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+28]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 106
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+96], eax
mov rax, [rsi+112]
mov [rsi+128], rax
mov rax, [rsi+128]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+4]
mov [rsi+128], edx
mov eax, [rsi+128]
imul eax, 25
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+12]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 71
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+20]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 106
mov [rsi+136], eax
mov eax, [rsi+128]
add eax, [rsi+136]
mov [rsi+128], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+28]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 126
mov [rsi+136], eax
mov eax, [rsi+128]
sub eax, [rsi+136]
mov [rsi+128], eax
mov eax, [rsi+128]
mov [rsi+104], eax
mov eax, [rsi+48]
add eax, [rsi+80]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rcx, rdi
mov rdx, 0x00000228BA15F6E0
mov rax, 0x00007FFDB68E268F
call rax /* OP:008C-0154 */
mov eax, [rsi+56]
add eax, [rsi+88]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+4], edx
mov eax, [rsi+64]
add eax, [rsi+96]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+8], edx
mov eax, [rsi+72]
add eax, [rsi+104]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+12], edx
mov eax, [rsi+72]
sub eax, [rsi+104]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+16], edx
mov eax, [rsi+64]
sub eax, [rsi+96]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+20], edx
mov eax, [rsi+56]
sub eax, [rsi+88]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+24], edx
mov eax, [rsi+48]
sub eax, [rsi+80]
mov [rsi+128], eax
mov rax, [rsi+120]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+128]
mov [rax+28], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15FF90
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_TransIDCT_Horiz 000132 */
FdiPDoBfgkgCKRdjBa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA15FF40
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* BGBBTJ_JPG_TransIDCT_Vert2 000000 */
LswItTNEJjegDDupQd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+112]
mov [rsi+136], rax
mov rcx, rdi
mov rdx, 0x00000228BA160050
mov rax, 0x00007FFDB68E2644
call rax /* OP:008C-0150 */
mov eax, [rsi+136]
imul eax, 91
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+0], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+128]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 91
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+8], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+64]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 118
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+16], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+64]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 49
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+24], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+192]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 118
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+32], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+192]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 49
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+40], eax
mov eax, [rsi+0]
add eax, [rsi+16]
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA160650
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA160690
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+136]
mov [rsi+48], eax
mov eax, [rsi+0]
add eax, [rsi+24]
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA160750
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA160790
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov eax, [rsi+136]
mov [rsi+56], eax
mov eax, [rsi+0]
sub eax, [rsi+24]
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA160850
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA160890
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov eax, [rsi+136]
mov [rsi+64], eax
mov eax, [rsi+0]
sub eax, [rsi+16]
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA160950
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA160990
mov rax, 0x00007FFDB68E12A3
call rax /* OP:00B9-0000 */
mov eax, [rsi+136]
mov [rsi+72], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+32]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 126
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+96]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 106
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+160]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 71
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+224]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 25
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+80], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+32]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 106
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+96]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 25
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1622B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* BGBBTJ_JPG_TransIDCT_Vert2 000094 */
AqrLxQJgWoBbOlVbCL:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+160]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 126
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+224]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 71
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+88], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+32]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 71
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+96]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 126
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+160]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 25
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+224]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 106
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+96], eax
mov rax, [rsi+112]
mov [rsi+136], rax
mov rax, [rsi+136]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+32]
mov [rsi+136], edx
mov eax, [rsi+136]
imul eax, 25
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+96]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 71
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+160]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 106
mov [rsi+144], eax
mov eax, [rsi+136]
add eax, [rsi+144]
mov [rsi+136], eax
mov rax, [rsi+112]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rax+224]
mov [rsi+144], edx
mov eax, [rsi+144]
imul eax, 126
mov [rsi+144], eax
mov eax, [rsi+136]
sub eax, [rsi+144]
mov [rsi+136], eax
mov eax, [rsi+136]
mov [rsi+104], eax
mov eax, [rsi+48]
add eax, [rsi+80]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA161D30
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rcx, rdi
mov rdx, 0x00000228BA161DB0
mov rax, 0x00007FFDB68E268F
call rax /* OP:008C-0154 */
mov eax, [rsi+56]
add eax, [rsi+88]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA161E70
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+32], edx
mov eax, [rsi+64]
add eax, [rsi+96]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA161FB0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+64], edx
mov eax, [rsi+72]
add eax, [rsi+104]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA1620F0
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+96], edx
mov eax, [rsi+72]
sub eax, [rsi+104]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA162230
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1629E0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* BGBBTJ_JPG_TransIDCT_Vert2 00012A */
FSPVCVFlDKOkFLgesd:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+128], edx
mov eax, [rsi+64]
sub eax, [rsi+96]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA162610
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+160], edx
mov eax, [rsi+56]
sub eax, [rsi+88]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA162750
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+192], edx
mov eax, [rsi+48]
sub eax, [rsi+80]
mov [rsi+136], eax
mov eax, [rsi+136]
sar eax, 16
mov [rsi+136], eax
mov rcx, rdi
mov rdx, 0x00000228BA162890
mov rax, 0x00007FFDB68E1E83
call rax /* OP:00B8-0000 */
mov rax, [rsi+120]
mov [rsi+144], rax
mov rax, [rsi+144]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+136]
mov [rax+224], edx
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA162990
mov rax, 0x00007FFDB68E6F05
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000000 */
LVPGqjNnlIBwGiWvuP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA162950
mov rax, 0x00007FFDB68E18D9
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA14E390
mov rax, 0x00007FFDB68E4CFA
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000007 */
JlloqiAhVMgPKoOgsK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9833
mov [rsi+224], rax
xor rax, rax
mov [rsi+232], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA162BC0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 00000C */
IJxpirAwWONLNLuWSc:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA14E1F0
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162CA0
mov rax, 0x00007FFDB68E18E8
call rax /* OP:015C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162CE0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+224]
mov [rsi+0], rax
mov rcx, rdi
mov rdx, 0x00000228BA162D60
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162DA0
mov rax, 0x00007FFDB68E18E8
call rax /* OP:005C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162DE0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+224]
mov [rsi+8], rax
mov rcx, rdi
mov rdx, 0x00000228BA162E60
mov rax, 0x00007FFDB68E1866
call rax /* OP:016C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162EA0
mov rax, 0x00007FFDB68E18E8
call rax /* OP:005C-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162EE0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+224]
mov [rsi+16], rax
mov rcx, rdi
mov rdx, 0x00000228BA162F60
mov rax, 0x00007FFDB68E2185
call rax /* OP:01E7-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA162FA0
mov rax, 0x00007FFDB68E2185
call rax /* OP:01E7-0000 */
mov dword [rsi+144], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1631D0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_GetImageRGBA 000039 */
QTiWPOKTsGvMPrTGMb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+144]
mov rax, 0x00000228BA163BA0
cmp ecx, [rsi+168]
mov r10, 0x00000228BA166690
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_GetImageRGBA 00003F */
GeHndWEFbErJCCRnEg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+168]
sub eax, [rsi+144]
mov [rsi+224], eax
dec dword [rsi+224]
mov eax, [rsi+224]
mov [rsi+152], eax
mov rax, [rsi+0]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA163320
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov eax, [rsi+232]
add eax, 0
mov [rsi+232], eax
mov rcx, rdi
mov rdx, 0x00000228BA1633A0
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+32], rax
mov rax, [rsi+0]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA1634A0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
inc dword [rsi+232]
mov rcx, rdi
mov rdx, 0x00000228BA163520
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+24], rax
mov rax, [rsi+8]
mov [rsi+224], rax
mov eax, [rsi+152]
imul eax, [rsi+160]
mov [rsi+232], eax
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+40], rax
mov rax, [rsi+16]
mov [rsi+224], rax
mov eax, [rsi+152]
imul eax, [rsi+160]
mov [rsi+232], eax
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+48], rax
mov rax, [rsi+200]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA163820
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
mov eax, [rsi+232]
add eax, 0
mov [rsi+232], eax
mov rcx, rdi
mov rdx, 0x00000228BA1638A0
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov eax, [rsi+232]
shl eax, 2
mov [rsi+232], eax
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+56], rax
mov rax, [rsi+200]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA1639E0
mov rax, 0x00007FFDB68E1EBA
call rax /* OP:01C6-0000 */
inc dword [rsi+232]
mov rcx, rdi
mov rdx, 0x00000228BA163A60
mov rax, 0x00007FFDB68E137F
call rax /* OP:00BA-0000 */
mov eax, [rsi+232]
shl eax, 2
mov [rsi+232], eax
mov rax, [rsi+224]
movsxd rcx, [rsi+232]
lea rdx, [rax+rcx]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+64], rax
mov dword [rsi+136], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA163E00
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_GetImageRGBA 00009F */
NEmfAFBmGtkSDIwlOt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+136]
mov rax, 0x00000228BA164720
cmp ecx, [rsi+160]
mov r10, 0x00000228BA166570
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_GetImageRGBA 0000A5 */
OlxojXBhbMxvBTWNST:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+24]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA163E90
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+224]
mov [rsi+72], eax
mov rax, [rsi+24]
mov [rsi+224], rax
mov rax, [rsi+224]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+224], edx
mov eax, [rsi+224]
mov [rsi+80], eax
mov rax, [rsi+24]
mov [rsi+224], rax
mov rax, [rsi+224]
lea rdx, [rax+2]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+24], rax
mov rax, [rsi+32]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA1640D0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+224]
mov [rsi+88], eax
mov rax, [rsi+32]
mov [rsi+224], rax
mov rax, [rsi+224]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+1]
mov [rsi+224], edx
mov eax, [rsi+224]
mov [rsi+96], eax
mov rax, [rsi+32]
mov [rsi+224], rax
mov rax, [rsi+224]
lea rdx, [rax+2]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+32], rax
mov rax, [rsi+40]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA164310
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+232]
lea rdx, [rax+1]
mov [rsi+232], rdx
mov rax, [rsi+232]
mov [rsi+40], rax
mov rcx, rdi
mov rdx, 0x00000228BA1643D0
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+224]
mov [rsi+104], eax
mov rax, [rsi+48]
mov [rsi+224], rax
mov rcx, rdi
mov rdx, 0x00000228BA164490
mov rax, 0x00007FFDB68E70B3
call rax /* OP:00A9-0000 */
mov rax, [rsi+232]
lea rdx, [rax+1]
mov [rsi+232], rdx
mov rax, [rsi+232]
mov [rsi+48], rax
mov rcx, rdi
mov rdx, 0x00000228BA164550
mov rax, 0x00007FFDB68E14E2
call rax /* OP:008C-0159 */
mov eax, [rsi+224]
mov [rsi+112], eax
mov eax, [rsi+104]
sub eax, 128
mov [rsi+120], eax
mov eax, [rsi+112]
sub eax, 128
mov [rsi+128], eax
mov eax, [rsi+72]
add eax, [rsi+128]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1646D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 0000FF */
ITUigiNwowJtFWMOVl:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA164690
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rcx, rdi
mov rdx, 0x00000228BA164910
mov rax, 0x00007FFDB68E2F9A
call rax /* OP:008C-015E */
mov eax, [rsi+72]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1649D0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000109 */
LcsGUlEacpkdECNWHI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA164990
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+1], dl
mov eax, [rsi+72]
add eax, [rsi+120]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA164BB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000115 */
OShjFsPDbqeDKQHopC:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA164B70
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+2], dl
mov rcx, rdi
mov rdx, 0x00000228BA164D10
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+3], dl
mov eax, [rsi+80]
add eax, [rsi+128]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA164E50
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000129 */
AMAHFUNAoVsrBcqnnw:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA164E10
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+4], dl
mov eax, [rsi+80]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165080
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000133 */
MeuUXcItVHDTOLLvUa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA165040
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+5], dl
mov eax, [rsi+80]
add eax, [rsi+120]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165260
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 00013F */
AHmvtuOmHmoeAjEOpg:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA165220
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+6], dl
mov rcx, rdi
mov rdx, 0x00000228BA1653C0
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+56]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+7], dl
mov eax, [rsi+88]
add eax, [rsi+128]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165500
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000153 */
AvFAkCARieNeBuGvnK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1654C0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rcx, rdi
mov rdx, 0x00000228BA165670
mov rax, 0x00007FFDB68E2F9A
call rax /* OP:008C-015E */
mov eax, [rsi+88]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165730
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 00015D */
PoBSbaQhXPaAAmHIeS:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1656F0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+1], dl
mov eax, [rsi+88]
add eax, [rsi+120]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165910
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000169 */
JjmNoQOBXIDTEoUIAO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA1658D0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+2], dl
mov rcx, rdi
mov rdx, 0x00000228BA165A70
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+3], dl
mov eax, [rsi+96]
add eax, [rsi+128]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165BB0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 00017D */
GlCFmDOlOvVxMNimrD:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA165B70
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+4], dl
mov eax, [rsi+96]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165DE0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000187 */
KiQUiMIlgEtgDCHNoa:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA165DA0
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+5], dl
mov eax, [rsi+96]
add eax, [rsi+120]
mov [rsi+224], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA165FC0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 000193 */
PISFwbKdpDphEBxhLH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdx, 0x00000228BA165F80
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+6], dl
mov rcx, rdi
mov rdx, 0x00000228BA166120
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+64]
mov [rsi+232], rax
mov rax, [rsi+232]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+224]
mov [rax+7], dl
mov rax, [rsi+56]
mov [rsi+224], rax
mov rax, [rsi+224]
lea rdx, [rax+8]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+56], rax
mov rax, [rsi+64]
mov [rsi+224], rax
mov rax, [rsi+224]
lea rdx, [rax+8]
mov [rsi+224], rdx
mov rax, [rsi+224]
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1664A0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_GetImageRGBA 0001B2 */
JANwpTMRgONTFGgNuI:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+136]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA163E00
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_GetImageRGBA 0001B7 */
BJSUfIHQSsexKUaKaV:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+144]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1631D0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_GetImageRGBA 0001BC */
BMsksNLFjtCSKfMNsJ:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA166640
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 0001BE */
LjAMpnPDirdbPdipFf:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, 0x008D0228BAEE9857
mov [rsi+224], rax
xor rax, rax
mov [rsi+232], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1667A0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_GetImageRGBA 0001C3 */
OpcnmTFpnAcwMOnADN:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA166880
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_StoreTGA 000000 */
KfuRqwNxnOMxBrBuQK:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+40]
imul eax, [rsi+48]
mov [rsi+56], eax
mov eax, [rsi+56]
shl eax, 2
mov [rsi+56], eax
mov eax, [rsi+56]
add eax, 64
mov [rsi+56], eax
mov rcx, rdi
mov rdx, 0x00000228BA166AB0
mov rax, 0x00007FFDB68E35E4
call rax /* OP:0089-0000 */
mov rax, [rsi+56]
mov [rsi+8], rax
mov rax, [rsi+8]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA166B70
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rax, [rsi+32]
mov [rsi+64], rax
mov rcx, rdi
mov rdx, 0x00000228BA166BF0
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov eax, [rsi+40]
mov [rsi+72], eax
mov eax, [rsi+48]
mov [rsi+80], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA166CF0
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_StoreTGA 000019 */
KMEfUJFtTWVgBwLEGP:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+56]
mov [rsi+16], eax
mov rax, [rsi+24]
mov [rsi+56], rax
mov rax, 0x008D0228BAEE987C
mov [rsi+64], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA166F00
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* PDJPG_StoreTGA 000021 */
ApQNdRORgILAOuDeNO:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+56]
mov [rsi+0], rax
mov rax, [rsi+8]
mov [rsi+56], rax
mov rcx, rdi
mov rdx, 0x00000228BA167020
mov rax, 0x00007FFDB68E53A3
call rax /* OP:01B0-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA167060
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov eax, [rsi+16]
mov [rsi+72], eax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA167160
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* PDJPG_StoreTGA 00002F */
CaxXwTDBuCDdIGWhjk:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+0]
mov [rsi+56], rax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1672C0
mov rax, 0x00007FFDB68E4D1D
add rsp, 504
jmp rax

/* PDJPG_StoreTGA 000034 */
FRWqwlMInUDwOojhDb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1673E0
mov rax, 0x00007FFDB68E445D
add rsp, 504
jmp rax

/* PDJPG_FlattenTGA 000000 */
CdPFXnKrCSKpIavWPx:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov rax, [rsi+40]
mov [rsi+0], rax
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rcx, rdi
mov rdx, 0x00000228BA167580
mov rax, 0x00007FFDB68E2F9A
call rax /* OP:008C-015E */
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+1], dl
mov rcx, rdi
mov rdx, 0x00000228BA167680
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+2], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+3], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+4], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+5], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+6], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+7], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+8], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+9], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+10], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+11], dl
mov eax, [rsi+56]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA167E40
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+12], dl
mov rcx, rdi
mov rdx, 0x00000228BA167F00
mov rax, 0x00007FFDB68E2185
call rax /* OP:01C7-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA167F40
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+13], dl
mov eax, [rsi+64]
mov [rsi+72], eax
mov rcx, rdi
mov rdx, 0x00000228BA168040
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+14], dl
mov rcx, rdi
mov rdx, 0x00000228BA168100
mov rax, 0x00007FFDB68E2185
call rax /* OP:01C7-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA168140
mov rax, 0x00007FFDB68E46F1
call rax /* OP:009D-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+15], dl
mov rcx, rdi
mov rdx, 0x00000228BA168200
mov rax, 0x00007FFDB68E7243
call rax /* OP:002A-0000 */
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+16], dl
xor rax, rax
mov [rsi+72], rax
mov rax, [rsi+0]
mov [rsi+80], rax
mov rax, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+17], dl
mov rax, 0x008D0228BAEE9887
mov [rsi+72], rax
mov rcx, rdi
mov rdx, 0x00000228BA1683C0
mov rax, 0x00007FFDB68E358F
call rax /* OP:0089-0000 */
mov eax, [rsi+56]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA168440
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA168480
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA1688B0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_FlattenTGA 000088 */
PWbkLuJAoOtEPBnchn:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+64]
mov [rsi+88], eax
mov rcx, rdi
mov rdx, 0x00000228BA1687A0
mov rax, 0x00007FFDB68E52C2
call rax /* OP:0110-0000 */
mov rcx, rdi
mov rdx, 0x00000228BA1687E0
mov rax, 0x00007FFDB68E18E3
call rax /* OP:01AC-0000 */
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA168860
mov rax, 0x00007FFDB68E4403
add rsp, 504
jmp rax

/* PDJPG_FlattenTGA 000091 */
IrIacjDprJKNQjpmBb:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+56]
imul eax, [rsi+64]
mov [rsi+32], eax
mov dword [rsi+8], 0x00000000
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA168AA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_FlattenTGA 000099 */
PXXAcRJrThvONXFrmH:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov ecx, [rsi+8]
mov rax, 0x00000228BA169070
cmp ecx, [rsi+32]
mov r10, 0x00000228BA1693A0
cmovge rax, r10
mov rdi, [rsp+480]
mov rsi, [rsp+488]
add rsp, 504
ret

/* PDJPG_FlattenTGA 00009E */
OQqmsxDhsTuFHioKAB:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+8]
imul eax, 4
mov [rsi+16], eax
mov eax, [rsi+8]
imul eax, 3
mov [rsi+72], eax
mov eax, [rsi+72]
add eax, 18
mov [rsi+72], eax
mov eax, [rsi+72]
mov [rsi+24], eax
mov rax, [rsi+48]
mov [rsi+72], rax
mov eax, [rsi+16]
add eax, 2
mov [rsi+80], eax
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+72], edx
mov rax, [rsi+40]
mov [rsi+80], rax
mov eax, [rsi+24]
add eax, 0
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx], dl
mov rax, [rsi+48]
mov [rsi+72], rax
mov eax, [rsi+16]
add eax, 1
mov [rsi+80], eax
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+72], edx
mov rax, [rsi+40]
mov [rsi+80], rax
mov eax, [rsi+24]
add eax, 1
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx], dl
mov rax, [rsi+48]
mov [rsi+72], rax
mov eax, [rsi+16]
add eax, 0
mov [rsi+80], eax
mov rax, [rsi+72]
movsxd rcx, [rsi+80]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
movzxb edx, [rax+rcx]
mov [rsi+72], edx
mov rax, [rsi+40]
mov [rsi+80], rax
mov eax, [rsi+24]
add eax, 2
mov [rsi+88], eax
mov rax, [rsi+80]
movsxd rcx, [rsi+88]
mov rdx, 0x0000FFFFFFFFFFFF
and rax, rdx
mov edx, [rsi+72]
mov [rax+rcx], dl
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA169200
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_FlattenTGA 0000D4 */
JgxJOnAiCDjtEwPDrt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
inc dword [rsi+8]
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA168AA0
add rsp, 504
mov rax, [rdx+16]
jmp rax

/* PDJPG_FlattenTGA 0000D9 */
BOxdfaHHCcnvJxFgVt:
sub rsp, 504
mov [rsp+488], rsi
mov [rsp+480], rdi
mov rdi, rcx
mov rsi, [rdi+16]
mov eax, [rsi+32]
imul eax, 3
mov [rsi+72], eax
mov eax, [rsi+72]
add eax, 18
mov [rsi+72], eax
mov rcx, rdi
mov rdi, [rsp+480]
mov rsi, [rsp+488]
mov rdx, 0x00000228BA169350
mov rax, 0x00007FFDB68E6EBF
add rsp, 504
jmp rax

